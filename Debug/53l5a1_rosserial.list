
53l5a1_rosserial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb0c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00015dfc  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021a9c  08021a9c  000400b0  2**0
                  CONTENTS
  4 .ARM          00000008  08021a9c  08021a9c  00031a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021aa4  08021aa4  000400b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021aa4  08021aa4  00031aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021aac  08021aac  00031aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08021ab0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000543c  200000b0  08021b60  000400b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054ec  08021b60  000454ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000400b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002acba  00000000  00000000  000400e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045de  00000000  00000000  0006ad9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0006f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00070588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cace  00000000  00000000  00071670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000182d7  00000000  00000000  0008e13e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000950e3  00000000  00000000  000a6415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b4f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004edc  00000000  00000000  0013b54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000b0 	.word	0x200000b0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800bc88 	.word	0x0800bc88

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200000b4 	.word	0x200000b4
 80001d0:	0800bc88 	.word	0x0800bc88

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <MX_DMA_Init+0x4c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <MX_DMA_Init+0x4c>)
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <MX_DMA_Init+0x4c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2010      	movs	r0, #16
 8000504:	f007 fd33 	bl	8007f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000508:	2010      	movs	r0, #16
 800050a:	f007 fd4c 	bl	8007fa6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2011      	movs	r0, #17
 8000514:	f007 fd2b 	bl	8007f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000518:	2011      	movs	r0, #17
 800051a:	f007 fd44 	bl	8007fa6 <HAL_NVIC_EnableIRQ>

}
 800051e:	bf00      	nop
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800

0800052c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b08a      	sub	sp, #40	; 0x28
 8000530:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
 800053a:	605a      	str	r2, [r3, #4]
 800053c:	609a      	str	r2, [r3, #8]
 800053e:	60da      	str	r2, [r3, #12]
 8000540:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000542:	2300      	movs	r3, #0
 8000544:	613b      	str	r3, [r7, #16]
 8000546:	4b4f      	ldr	r3, [pc, #316]	; (8000684 <MX_GPIO_Init+0x158>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a4e      	ldr	r2, [pc, #312]	; (8000684 <MX_GPIO_Init+0x158>)
 800054c:	f043 0304 	orr.w	r3, r3, #4
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
 8000552:	4b4c      	ldr	r3, [pc, #304]	; (8000684 <MX_GPIO_Init+0x158>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	f003 0304 	and.w	r3, r3, #4
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800055e:	2300      	movs	r3, #0
 8000560:	60fb      	str	r3, [r7, #12]
 8000562:	4b48      	ldr	r3, [pc, #288]	; (8000684 <MX_GPIO_Init+0x158>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a47      	ldr	r2, [pc, #284]	; (8000684 <MX_GPIO_Init+0x158>)
 8000568:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b45      	ldr	r3, [pc, #276]	; (8000684 <MX_GPIO_Init+0x158>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	4b41      	ldr	r3, [pc, #260]	; (8000684 <MX_GPIO_Init+0x158>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	4a40      	ldr	r2, [pc, #256]	; (8000684 <MX_GPIO_Init+0x158>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6313      	str	r3, [r2, #48]	; 0x30
 800058a:	4b3e      	ldr	r3, [pc, #248]	; (8000684 <MX_GPIO_Init+0x158>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	4b3a      	ldr	r3, [pc, #232]	; (8000684 <MX_GPIO_Init+0x158>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a39      	ldr	r2, [pc, #228]	; (8000684 <MX_GPIO_Init+0x158>)
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <MX_GPIO_Init+0x158>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2120      	movs	r1, #32
 80005b6:	4834      	ldr	r0, [pc, #208]	; (8000688 <MX_GPIO_Init+0x15c>)
 80005b8:	f008 fb92 	bl	8008ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PWR_EN_C_Pin|LPn_C_Pin, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2111      	movs	r1, #17
 80005c0:	4832      	ldr	r0, [pc, #200]	; (800068c <MX_GPIO_Init+0x160>)
 80005c2:	f008 fb8d 	bl	8008ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_RST_C_GPIO_Port, I2C_RST_C_Pin, GPIO_PIN_RESET);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2108      	movs	r1, #8
 80005ca:	4830      	ldr	r0, [pc, #192]	; (800068c <MX_GPIO_Init+0x160>)
 80005cc:	f008 fb88 	bl	8008ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	482a      	ldr	r0, [pc, #168]	; (8000690 <MX_GPIO_Init+0x164>)
 80005e8:	f008 f8fa 	bl	80087e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_C_Pin;
 80005ec:	2310      	movs	r3, #16
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_C_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0314 	add.w	r3, r7, #20
 80005fe:	4619      	mov	r1, r3
 8000600:	4821      	ldr	r0, [pc, #132]	; (8000688 <MX_GPIO_Init+0x15c>)
 8000602:	f008 f8ed 	bl	80087e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000606:	2320      	movs	r3, #32
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060a:	2301      	movs	r3, #1
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060e:	2300      	movs	r3, #0
 8000610:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000612:	2300      	movs	r3, #0
 8000614:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	4619      	mov	r1, r3
 800061c:	481a      	ldr	r0, [pc, #104]	; (8000688 <MX_GPIO_Init+0x15c>)
 800061e:	f008 f8df 	bl	80087e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PWR_EN_C_Pin|LPn_C_Pin;
 8000622:	2311      	movs	r3, #17
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000626:	2301      	movs	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800062a:	2301      	movs	r3, #1
 800062c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000632:	f107 0314 	add.w	r3, r7, #20
 8000636:	4619      	mov	r1, r3
 8000638:	4814      	ldr	r0, [pc, #80]	; (800068c <MX_GPIO_Init+0x160>)
 800063a:	f008 f8d1 	bl	80087e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2C_RST_C_Pin;
 800063e:	2308      	movs	r3, #8
 8000640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000642:	2301      	movs	r3, #1
 8000644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000646:	2302      	movs	r3, #2
 8000648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064a:	2300      	movs	r3, #0
 800064c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(I2C_RST_C_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_GPIO_Init+0x160>)
 8000656:	f008 f8c3 	bl	80087e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	200a      	movs	r0, #10
 8000660:	f007 fc85 	bl	8007f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000664:	200a      	movs	r0, #10
 8000666:	f007 fc9e 	bl	8007fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2028      	movs	r0, #40	; 0x28
 8000670:	f007 fc7d 	bl	8007f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f007 fc96 	bl	8007fa6 <HAL_NVIC_EnableIRQ>

}
 800067a:	bf00      	nop
 800067c:	3728      	adds	r7, #40	; 0x28
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40020000 	.word	0x40020000
 800068c:	40020400 	.word	0x40020400
 8000690:	40020800 	.word	0x40020800

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800069a:	f007 faf7 	bl	8007c8c <HAL_Init>
  HAL_Delay(20); // <- this is crucial
 800069e:	2014      	movs	r0, #20
 80006a0:	f007 fb66 	bl	8007d70 <HAL_Delay>

  /* USER CODE BEGIN Init */
  SystemClock_Config();
 80006a4:	f000 f85e 	bl	8000764 <SystemClock_Config>
  MX_DMA_Init();
 80006a8:	f7ff ff18 	bl	80004dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006ac:	f003 ff44 	bl	8004538 <MX_USART2_UART_Init>
  MX_GPIO_Init();
 80006b0:	f7ff ff3c 	bl	800052c <MX_GPIO_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  /* Initialize Sensor, may take 2 secs */
  HAL_Delay(100);
 80006b4:	2064      	movs	r0, #100	; 0x64
 80006b6:	f007 fb5b 	bl	8007d70 <HAL_Delay>
  status = VL53L5A1_RANGING_SENSOR_Init(VL53L5A1_DEV_CENTER);
 80006ba:	2001      	movs	r0, #1
 80006bc:	f004 f9c9 	bl	8004a52 <VL53L5A1_RANGING_SENSOR_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a21      	ldr	r2, [pc, #132]	; (8000748 <main+0xb4>)
 80006c4:	6013      	str	r3, [r2, #0]
  if (status != BSP_ERROR_NONE)
 80006c6:	4b20      	ldr	r3, [pc, #128]	; (8000748 <main+0xb4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <main+0x3e>
  {
    Error_Handler();
 80006ce:	f000 f8c9 	bl	8000864 <Error_Handler>
  }
  uint32_t Id;
  VL53L5A1_RANGING_SENSOR_ReadID(VL53L5A1_DEV_CENTER, &Id);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	2001      	movs	r0, #1
 80006d8:	f004 f9d2 	bl	8004a80 <VL53L5A1_RANGING_SENSOR_ReadID>
  VL53L5A1_RANGING_SENSOR_GetCapabilities(VL53L5A1_DEV_CENTER, &Cap);
 80006dc:	491b      	ldr	r1, [pc, #108]	; (800074c <main+0xb8>)
 80006de:	2001      	movs	r0, #1
 80006e0:	f004 f9f6 	bl	8004ad0 <VL53L5A1_RANGING_SENSOR_GetCapabilities>
  /* load some default settings */
  Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <main+0xbc>)
 80006e6:	2203      	movs	r2, #3
 80006e8:	601a      	str	r2, [r3, #0]
  Profile.TimingBudget = 15; /* 5 ms < TimingBudget < 100 ms */
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <main+0xbc>)
 80006ec:	220f      	movs	r2, #15
 80006ee:	605a      	str	r2, [r3, #4]
  Profile.Frequency = 10; /* Hz */
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <main+0xbc>)
 80006f2:	220a      	movs	r2, #10
 80006f4:	609a      	str	r2, [r3, #8]
  Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <main+0xbc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	60da      	str	r2, [r3, #12]
  Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <main+0xbc>)
 80006fe:	2201      	movs	r2, #1
 8000700:	611a      	str	r2, [r3, #16]

  /* set the profile if different from default one */
  VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 8000702:	4913      	ldr	r1, [pc, #76]	; (8000750 <main+0xbc>)
 8000704:	2001      	movs	r0, #1
 8000706:	f004 fa0b 	bl	8004b20 <VL53L5A1_RANGING_SENSOR_ConfigProfile>
  /* get low-level driver pointers */
  ll_sensor_obj = (VL53L5CX_Object_t*)VL53L5A1_RANGING_SENSOR_CompObj[VL53L5A1_DEV_CENTER];
 800070a:	4b12      	ldr	r3, [pc, #72]	; (8000754 <main+0xc0>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	4a12      	ldr	r2, [pc, #72]	; (8000758 <main+0xc4>)
 8000710:	6013      	str	r3, [r2, #0]
  ll_sensor_dev = &ll_sensor_obj->Dev;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <main+0xc4>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	3318      	adds	r3, #24
 8000718:	4a10      	ldr	r2, [pc, #64]	; (800075c <main+0xc8>)
 800071a:	6013      	str	r3, [r2, #0]
  /* start measuring */
  status = VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 800071c:	2101      	movs	r1, #1
 800071e:	2001      	movs	r0, #1
 8000720:	f004 fa26 	bl	8004b70 <VL53L5A1_RANGING_SENSOR_Start>
 8000724:	4603      	mov	r3, r0
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <main+0xb4>)
 8000728:	6013      	str	r3, [r2, #0]
  if (status != BSP_ERROR_NONE)
 800072a:	4b07      	ldr	r3, [pc, #28]	; (8000748 <main+0xb4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <main+0xa2>
  {
    Error_Handler();
 8000732:	f000 f897 	bl	8000864 <Error_Handler>
  }
  /* initalize rosserial */
  setup();
 8000736:	f002 fba5 	bl	8002e84 <setup>
  /* unblock incoming messages */
  init = 0;
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <main+0xcc>)
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* rosserial loop */
	loop();
 8000740:	f002 fbe0 	bl	8002f04 <loop>
 8000744:	e7fc      	b.n	8000740 <main+0xac>
 8000746:	bf00      	nop
 8000748:	200000cc 	.word	0x200000cc
 800074c:	20005354 	.word	0x20005354
 8000750:	20005364 	.word	0x20005364
 8000754:	20002838 	.word	0x20002838
 8000758:	20005378 	.word	0x20005378
 800075c:	2000537c 	.word	0x2000537c
 8000760:	20000000 	.word	0x20000000

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f00b f93e 	bl	800b9f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	4b28      	ldr	r3, [pc, #160]	; (8000830 <SystemClock_Config+0xcc>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a27      	ldr	r2, [pc, #156]	; (8000830 <SystemClock_Config+0xcc>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b25      	ldr	r3, [pc, #148]	; (8000830 <SystemClock_Config+0xcc>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a4:	2300      	movs	r3, #0
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	4b22      	ldr	r3, [pc, #136]	; (8000834 <SystemClock_Config+0xd0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b0:	4a20      	ldr	r2, [pc, #128]	; (8000834 <SystemClock_Config+0xd0>)
 80007b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <SystemClock_Config+0xd0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c4:	2302      	movs	r3, #2
 80007c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007cc:	2310      	movs	r3, #16
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007d8:	2308      	movs	r3, #8
 80007da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80007dc:	2354      	movs	r3, #84	; 0x54
 80007de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007e4:	2307      	movs	r3, #7
 80007e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f009 fae1 	bl	8009db4 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007f8:	f000 f834 	bl	8000864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2302      	movs	r3, #2
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800080c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	2102      	movs	r1, #2
 8000818:	4618      	mov	r0, r3
 800081a:	f009 fd43 	bl	800a2a4 <HAL_RCC_ClockConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000824:	f000 f81e 	bl	8000864 <Error_Handler>
  }
}
 8000828:	bf00      	nop
 800082a:	3750      	adds	r7, #80	; 0x50
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <HAL_GPIO_EXTI_Callback>:
 *
 * @details Catch interrupt from sensor and set new_data variable
 **************************************************************************************************
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	2b10      	cmp	r3, #16
 8000846:	d103      	bne.n	8000850 <HAL_GPIO_EXTI_Callback+0x18>
		case INT_C_Pin: {
			new_data = 1;
 8000848:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_GPIO_EXTI_Callback+0x28>)
 800084a:	2201      	movs	r2, #1
 800084c:	701a      	strb	r2, [r3, #0]
			break;
 800084e:	e000      	b.n	8000852 <HAL_GPIO_EXTI_Callback+0x1a>
		}
		case B1_Pin: {
//			reset_sensor_i2c();
		}
		default: {
			break;
 8000850:	bf00      	nop
		}
	}
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	200000d0 	.word	0x200000d0

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800086c:	2120      	movs	r1, #32
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <Error_Handler+0x1c>)
 8000870:	f008 fa4f 	bl	8008d12 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000878:	f007 fa7a 	bl	8007d70 <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800087c:	e7f6      	b.n	800086c <Error_Handler+0x8>
 800087e:	bf00      	nop
 8000880:	40020000 	.word	0x40020000

08000884 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
	...

080008a8 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <_ZN3ros3MsgC1Ev+0x1c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4618      	mov	r0, r3
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	0800c370 	.word	0x0800c370

080008c8 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
      data()
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ffe8 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 80008d8:	4a06      	ldr	r2, [pc, #24]	; (80008f4 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3304      	adds	r3, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ffce 	bl	8000884 <_ZN3ros4TimeC1Ev>
    {
    }
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	0800c358 	.word	0x0800c358

080008f8 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80008f8:	b480      	push	{r7}
 80008fa:	b085      	sub	sp, #20
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6859      	ldr	r1, [r3, #4]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	683a      	ldr	r2, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	b2ca      	uxtb	r2, r1
 8000912:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	0a19      	lsrs	r1, r3, #8
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	3301      	adds	r3, #1
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	4413      	add	r3, r2
 8000922:	b2ca      	uxtb	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	0c19      	lsrs	r1, r3, #16
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3302      	adds	r3, #2
 8000930:	683a      	ldr	r2, [r7, #0]
 8000932:	4413      	add	r3, r2
 8000934:	b2ca      	uxtb	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	0e19      	lsrs	r1, r3, #24
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3303      	adds	r3, #3
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	4413      	add	r3, r2
 8000946:	b2ca      	uxtb	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	3304      	adds	r3, #4
 800094e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6899      	ldr	r1, [r3, #8]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	683a      	ldr	r2, [r7, #0]
 8000958:	4413      	add	r3, r2
 800095a:	b2ca      	uxtb	r2, r1
 800095c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	689b      	ldr	r3, [r3, #8]
 8000962:	0a19      	lsrs	r1, r3, #8
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	3301      	adds	r3, #1
 8000968:	683a      	ldr	r2, [r7, #0]
 800096a:	4413      	add	r3, r2
 800096c:	b2ca      	uxtb	r2, r1
 800096e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	0c19      	lsrs	r1, r3, #16
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	3302      	adds	r3, #2
 800097a:	683a      	ldr	r2, [r7, #0]
 800097c:	4413      	add	r3, r2
 800097e:	b2ca      	uxtb	r2, r1
 8000980:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	0e19      	lsrs	r1, r3, #24
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3303      	adds	r3, #3
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	4413      	add	r3, r2
 8000990:	b2ca      	uxtb	r2, r1
 8000992:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	3304      	adds	r3, #4
 8000998:	60fb      	str	r3, [r7, #12]
      return offset;
 800099a:	68fb      	ldr	r3, [r7, #12]
    }
 800099c:	4618      	mov	r0, r3
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	461a      	mov	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685a      	ldr	r2, [r3, #4]
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	6839      	ldr	r1, [r7, #0]
 80009ce:	440b      	add	r3, r1
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	021b      	lsls	r3, r3, #8
 80009d4:	431a      	orrs	r2, r3
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	685a      	ldr	r2, [r3, #4]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	3302      	adds	r3, #2
 80009e2:	6839      	ldr	r1, [r7, #0]
 80009e4:	440b      	add	r3, r1
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	041b      	lsls	r3, r3, #16
 80009ea:	431a      	orrs	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	3303      	adds	r3, #3
 80009f8:	6839      	ldr	r1, [r7, #0]
 80009fa:	440b      	add	r3, r1
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	061b      	lsls	r3, r3, #24
 8000a00:	431a      	orrs	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	3304      	adds	r3, #4
 8000a0a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	683a      	ldr	r2, [r7, #0]
 8000a10:	4413      	add	r3, r2
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	689a      	ldr	r2, [r3, #8]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	3301      	adds	r3, #1
 8000a22:	6839      	ldr	r1, [r7, #0]
 8000a24:	440b      	add	r3, r1
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	021b      	lsls	r3, r3, #8
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689a      	ldr	r2, [r3, #8]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3302      	adds	r3, #2
 8000a38:	6839      	ldr	r1, [r7, #0]
 8000a3a:	440b      	add	r3, r1
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	431a      	orrs	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	3303      	adds	r3, #3
 8000a4e:	6839      	ldr	r1, [r7, #0]
 8000a50:	440b      	add	r3, r1
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	061b      	lsls	r3, r3, #24
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3304      	adds	r3, #4
 8000a60:	60fb      	str	r3, [r7, #12]
     return offset;
 8000a62:	68fb      	ldr	r3, [r7, #12]
    }
 8000a64:	4618      	mov	r0, r3
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	0800bca0 	.word	0x0800bca0

08000a8c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8000a96:	4618      	mov	r0, r3
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	0800bcb0 	.word	0x0800bcb0

08000aa8 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff fef8 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	809a      	strh	r2, [r3, #4]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a09      	ldr	r2, [pc, #36]	; (8000aec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a07      	ldr	r2, [pc, #28]	; (8000aec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4a06      	ldr	r2, [pc, #24]	; (8000aec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000ad4:	611a      	str	r2, [r3, #16]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
    {
    }
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	0800c340 	.word	0x0800c340
 8000aec:	0800bcd4 	.word	0x0800bcd4

08000af0 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	8899      	ldrh	r1, [r3, #4]
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	683a      	ldr	r2, [r7, #0]
 8000b06:	4413      	add	r3, r2
 8000b08:	b2ca      	uxtb	r2, r1
 8000b0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	889b      	ldrh	r3, [r3, #4]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	b299      	uxth	r1, r3
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	3301      	adds	r3, #1
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	b2ca      	uxtb	r2, r1
 8000b1e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	3302      	adds	r3, #2
 8000b24:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	689b      	ldr	r3, [r3, #8]
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fb52 	bl	80001d4 <strlen>
 8000b30:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	69b9      	ldr	r1, [r7, #24]
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f002 fb6c 	bl	8003218 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	3304      	adds	r3, #4
 8000b44:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	18d0      	adds	r0, r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	69ba      	ldr	r2, [r7, #24]
 8000b52:	4619      	mov	r1, r3
 8000b54:	f00a ff40 	bl	800b9d8 <memcpy>
      offset += length_topic_name;
 8000b58:	69fa      	ldr	r2, [r7, #28]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff fb35 	bl	80001d4 <strlen>
 8000b6a:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	6979      	ldr	r1, [r7, #20]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 fb4f 	bl	8003218 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3304      	adds	r3, #4
 8000b7e:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 8000b80:	69fb      	ldr	r3, [r7, #28]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	18d0      	adds	r0, r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	697a      	ldr	r2, [r7, #20]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f00a ff23 	bl	800b9d8 <memcpy>
      offset += length_message_type;
 8000b92:	69fa      	ldr	r2, [r7, #28]
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	4413      	add	r3, r2
 8000b98:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	691b      	ldr	r3, [r3, #16]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb18 	bl	80001d4 <strlen>
 8000ba4:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	6939      	ldr	r1, [r7, #16]
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f002 fb32 	bl	8003218 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000bb4:	69fb      	ldr	r3, [r7, #28]
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	683a      	ldr	r2, [r7, #0]
 8000bbe:	18d0      	adds	r0, r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	f00a ff06 	bl	800b9d8 <memcpy>
      offset += length_md5sum;
 8000bcc:	69fa      	ldr	r2, [r7, #28]
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	695b      	ldr	r3, [r3, #20]
 8000bd8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000bda:	68f9      	ldr	r1, [r7, #12]
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	4413      	add	r3, r2
 8000be2:	b2ca      	uxtb	r2, r1
 8000be4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	0a19      	lsrs	r1, r3, #8
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3301      	adds	r3, #1
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2ca      	uxtb	r2, r1
 8000bf4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	0c19      	lsrs	r1, r3, #16
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	683a      	ldr	r2, [r7, #0]
 8000c00:	4413      	add	r3, r2
 8000c02:	b2ca      	uxtb	r2, r1
 8000c04:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	0e19      	lsrs	r1, r3, #24
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	3303      	adds	r3, #3
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	4413      	add	r3, r2
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	61fb      	str	r3, [r7, #28]
      return offset;
 8000c1c:	69fb      	ldr	r3, [r7, #28]
    }
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3720      	adds	r7, #32
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b08a      	sub	sp, #40	; 0x28
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
 8000c2e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	4413      	add	r3, r2
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	889b      	ldrh	r3, [r3, #4]
 8000c46:	b21a      	sxth	r2, r3
 8000c48:	69bb      	ldr	r3, [r7, #24]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	6839      	ldr	r1, [r7, #0]
 8000c4e:	440b      	add	r3, r1
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	021b      	lsls	r3, r3, #8
 8000c54:	b21b      	sxth	r3, r3
 8000c56:	4313      	orrs	r3, r2
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	b29a      	uxth	r2, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	3302      	adds	r3, #2
 8000c64:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	683a      	ldr	r2, [r7, #0]
 8000c6a:	441a      	add	r2, r3
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 faee 	bl	8003254 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	3304      	adds	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	627b      	str	r3, [r7, #36]	; 0x24
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	4413      	add	r3, r2
 8000c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d20c      	bcs.n	8000ca8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	441a      	add	r2, r3
 8000c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c96:	3b01      	subs	r3, #1
 8000c98:	6839      	ldr	r1, [r7, #0]
 8000c9a:	440b      	add	r3, r1
 8000c9c:	7812      	ldrb	r2, [r2, #0]
 8000c9e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca6:	e7ec      	b.n	8000c82 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	683a      	ldr	r2, [r7, #0]
 8000cbe:	441a      	add	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	4413      	add	r3, r2
 8000cca:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000ccc:	69bb      	ldr	r3, [r7, #24]
 8000cce:	683a      	ldr	r2, [r7, #0]
 8000cd0:	441a      	add	r2, r3
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f002 fabb 	bl	8003254 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	623b      	str	r3, [r7, #32]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	4413      	add	r3, r2
 8000cee:	6a3a      	ldr	r2, [r7, #32]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d20c      	bcs.n	8000d0e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8000cf4:	683a      	ldr	r2, [r7, #0]
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	441a      	add	r2, r3
 8000cfa:	6a3b      	ldr	r3, [r7, #32]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	6839      	ldr	r1, [r7, #0]
 8000d00:	440b      	add	r3, r1
 8000d02:	7812      	ldrb	r2, [r2, #0]
 8000d04:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	e7ec      	b.n	8000ce8 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4413      	add	r3, r2
 8000d14:	3b01      	subs	r3, #1
 8000d16:	683a      	ldr	r2, [r7, #0]
 8000d18:	4413      	add	r3, r2
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	683a      	ldr	r2, [r7, #0]
 8000d24:	441a      	add	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	4413      	add	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	683a      	ldr	r2, [r7, #0]
 8000d36:	441a      	add	r2, r3
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f002 fa88 	bl	8003254 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	3304      	adds	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	61fb      	str	r3, [r7, #28]
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	69fa      	ldr	r2, [r7, #28]
 8000d56:	429a      	cmp	r2, r3
 8000d58:	d20c      	bcs.n	8000d74 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8000d5a:	683a      	ldr	r2, [r7, #0]
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	441a      	add	r2, r3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	6839      	ldr	r1, [r7, #0]
 8000d66:	440b      	add	r3, r1
 8000d68:	7812      	ldrb	r2, [r2, #0]
 8000d6a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
 8000d72:	e7ec      	b.n	8000d4e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000d74:	69ba      	ldr	r2, [r7, #24]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4413      	add	r3, r2
 8000d7a:	3b01      	subs	r3, #1
 8000d7c:	683a      	ldr	r2, [r7, #0]
 8000d7e:	4413      	add	r3, r2
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	3b01      	subs	r3, #1
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	441a      	add	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8000d90:	69ba      	ldr	r2, [r7, #24]
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	6839      	ldr	r1, [r7, #0]
 8000da2:	440a      	add	r2, r1
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	4313      	orrs	r3, r2
 8000da8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	3301      	adds	r3, #1
 8000db0:	6839      	ldr	r1, [r7, #0]
 8000db2:	440b      	add	r3, r1
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	4313      	orrs	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000dbc:	68ba      	ldr	r2, [r7, #8]
 8000dbe:	69bb      	ldr	r3, [r7, #24]
 8000dc0:	3302      	adds	r3, #2
 8000dc2:	6839      	ldr	r1, [r7, #0]
 8000dc4:	440b      	add	r3, r1
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	041b      	lsls	r3, r3, #16
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	69bb      	ldr	r3, [r7, #24]
 8000dd2:	3303      	adds	r3, #3
 8000dd4:	6839      	ldr	r1, [r7, #0]
 8000dd6:	440b      	add	r3, r1
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	061b      	lsls	r3, r3, #24
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8000de0:	68ba      	ldr	r2, [r7, #8]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000de6:	69bb      	ldr	r3, [r7, #24]
 8000de8:	3304      	adds	r3, #4
 8000dea:	61bb      	str	r3, [r7, #24]
     return offset;
 8000dec:	69bb      	ldr	r3, [r7, #24]
    }
 8000dee:	4618      	mov	r0, r3
 8000df0:	3728      	adds	r7, #40	; 0x28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8000e02:	4618      	mov	r0, r3
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	0800bcd8 	.word	0x0800bcd8

08000e14 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	0800bcf4 	.word	0x0800bcf4

08000e30 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff fd34 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8000e40:	4a06      	ldr	r2, [pc, #24]	; (8000e5c <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	711a      	strb	r2, [r3, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000e50:	609a      	str	r2, [r3, #8]
    {
    }
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	0800c328 	.word	0x0800c328
 8000e60:	0800bcd4 	.word	0x0800bcd4

08000e64 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	7912      	ldrb	r2, [r2, #4]
 8000e7c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	3301      	adds	r3, #1
 8000e82:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	689b      	ldr	r3, [r3, #8]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9a3 	bl	80001d4 <strlen>
 8000e8e:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	4413      	add	r3, r2
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f002 f9bd 	bl	8003218 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	18d0      	adds	r0, r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f00a fd91 	bl	800b9d8 <memcpy>
      offset += length_msg;
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	4413      	add	r3, r2
 8000ebc:	60fb      	str	r3, [r7, #12]
      return offset;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
    }
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	4413      	add	r3, r2
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	441a      	add	r2, r3
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f002 f9ad 	bl	8003254 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	3304      	adds	r3, #4
 8000efe:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4413      	add	r3, r2
 8000f0a:	697a      	ldr	r2, [r7, #20]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d20c      	bcs.n	8000f2a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	441a      	add	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	440b      	add	r3, r1
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	3301      	adds	r3, #1
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	e7ec      	b.n	8000f04 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	3b01      	subs	r3, #1
 8000f32:	683a      	ldr	r2, [r7, #0]
 8000f34:	4413      	add	r3, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	3b01      	subs	r3, #1
 8000f3e:	683a      	ldr	r2, [r7, #0]
 8000f40:	441a      	add	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
     return offset;
 8000f4e:	693b      	ldr	r3, [r7, #16]
    }
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	0800bd18 	.word	0x0800bd18

08000f74 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 8000f7e:	4618      	mov	r0, r3
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0800bd2c 	.word	0x0800bd2c

08000f90 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fc84 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	619a      	str	r2, [r3, #24]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	61da      	str	r2, [r3, #28]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	0800c310 	.word	0x0800c310

08000fec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6859      	ldr	r1, [r3, #4]
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	4413      	add	r3, r2
 8001004:	b2ca      	uxtb	r2, r1
 8001006:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	0a19      	lsrs	r1, r3, #8
 800100e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001010:	3301      	adds	r3, #1
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	4413      	add	r3, r2
 8001016:	b2ca      	uxtb	r2, r1
 8001018:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	0c19      	lsrs	r1, r3, #16
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	3302      	adds	r3, #2
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	4413      	add	r3, r2
 8001028:	b2ca      	uxtb	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	0e19      	lsrs	r1, r3, #24
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	3303      	adds	r3, #3
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4413      	add	r3, r2
 800103a:	b2ca      	uxtb	r2, r1
 800103c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001040:	3304      	adds	r3, #4
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	6a3a      	ldr	r2, [r7, #32]
 800104e:	429a      	cmp	r2, r3
 8001050:	d22b      	bcs.n	80010aa <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001060:	6939      	ldr	r1, [r7, #16]
 8001062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	b2ca      	uxtb	r2, r1
 800106a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	0a19      	lsrs	r1, r3, #8
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	3301      	adds	r3, #1
 8001074:	683a      	ldr	r2, [r7, #0]
 8001076:	4413      	add	r3, r2
 8001078:	b2ca      	uxtb	r2, r1
 800107a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	0c19      	lsrs	r1, r3, #16
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	3302      	adds	r3, #2
 8001084:	683a      	ldr	r2, [r7, #0]
 8001086:	4413      	add	r3, r2
 8001088:	b2ca      	uxtb	r2, r1
 800108a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	0e19      	lsrs	r1, r3, #24
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	3303      	adds	r3, #3
 8001094:	683a      	ldr	r2, [r7, #0]
 8001096:	4413      	add	r3, r2
 8001098:	b2ca      	uxtb	r2, r1
 800109a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	3304      	adds	r3, #4
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 80010a2:	6a3b      	ldr	r3, [r7, #32]
 80010a4:	3301      	adds	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	e7ce      	b.n	8001048 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6919      	ldr	r1, [r3, #16]
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	b2ca      	uxtb	r2, r1
 80010b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	0a19      	lsrs	r1, r3, #8
 80010be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c0:	3301      	adds	r3, #1
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	4413      	add	r3, r2
 80010c6:	b2ca      	uxtb	r2, r1
 80010c8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	0c19      	lsrs	r1, r3, #16
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	3302      	adds	r3, #2
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2ca      	uxtb	r2, r1
 80010da:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691b      	ldr	r3, [r3, #16]
 80010e0:	0e19      	lsrs	r1, r3, #24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	3303      	adds	r3, #3
 80010e6:	683a      	ldr	r2, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	b2ca      	uxtb	r2, r1
 80010ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	3304      	adds	r3, #4
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	691b      	ldr	r3, [r3, #16]
 80010fc:	69fa      	ldr	r2, [r7, #28]
 80010fe:	429a      	cmp	r2, r3
 8001100:	d22b      	bcs.n	800115a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001110:	68f9      	ldr	r1, [r7, #12]
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	b2ca      	uxtb	r2, r1
 800111a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	0a19      	lsrs	r1, r3, #8
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	3301      	adds	r3, #1
 8001124:	683a      	ldr	r2, [r7, #0]
 8001126:	4413      	add	r3, r2
 8001128:	b2ca      	uxtb	r2, r1
 800112a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	0c19      	lsrs	r1, r3, #16
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	3302      	adds	r3, #2
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	4413      	add	r3, r2
 8001138:	b2ca      	uxtb	r2, r1
 800113a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	0e19      	lsrs	r1, r3, #24
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	3303      	adds	r3, #3
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	3304      	adds	r3, #4
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3301      	adds	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
 8001158:	e7ce      	b.n	80010f8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69d9      	ldr	r1, [r3, #28]
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	b2ca      	uxtb	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69db      	ldr	r3, [r3, #28]
 800116c:	0a19      	lsrs	r1, r3, #8
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	3301      	adds	r3, #1
 8001172:	683a      	ldr	r2, [r7, #0]
 8001174:	4413      	add	r3, r2
 8001176:	b2ca      	uxtb	r2, r1
 8001178:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	0c19      	lsrs	r1, r3, #16
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3302      	adds	r3, #2
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	b2ca      	uxtb	r2, r1
 800118a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	0e19      	lsrs	r1, r3, #24
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	3303      	adds	r3, #3
 8001196:	683a      	ldr	r2, [r7, #0]
 8001198:	4413      	add	r3, r2
 800119a:	b2ca      	uxtb	r2, r1
 800119c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a0:	3304      	adds	r3, #4
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d228      	bcs.n	8001204 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff f808 	bl	80001d4 <strlen>
 80011c4:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	4413      	add	r3, r2
 80011cc:	6979      	ldr	r1, [r7, #20]
 80011ce:	4618      	mov	r0, r3
 80011d0:	f002 f822 	bl	8003218 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80011d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d6:	3304      	adds	r3, #4
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	18d0      	adds	r0, r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	4413      	add	r3, r2
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	697a      	ldr	r2, [r7, #20]
 80011ee:	4619      	mov	r1, r3
 80011f0:	f00a fbf2 	bl	800b9d8 <memcpy>
      offset += length_stringsi;
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	4413      	add	r3, r2
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	3301      	adds	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	e7d1      	b.n	80011a8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001206:	4618      	mov	r0, r3
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800120e:	b580      	push	{r7, lr}
 8001210:	b08e      	sub	sp, #56	; 0x38
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 800121c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121e:	683a      	ldr	r2, [r7, #0]
 8001220:	4413      	add	r3, r2
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001228:	3301      	adds	r3, #1
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	6a3a      	ldr	r2, [r7, #32]
 8001234:	4313      	orrs	r3, r2
 8001236:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123a:	3302      	adds	r3, #2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	041b      	lsls	r3, r3, #16
 8001244:	6a3a      	ldr	r2, [r7, #32]
 8001246:	4313      	orrs	r3, r2
 8001248:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124c:	3303      	adds	r3, #3
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	4413      	add	r3, r2
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	061b      	lsls	r3, r3, #24
 8001256:	6a3a      	ldr	r2, [r7, #32]
 8001258:	4313      	orrs	r3, r2
 800125a:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 800125c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125e:	3304      	adds	r3, #4
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	6a3a      	ldr	r2, [r7, #32]
 8001268:	429a      	cmp	r2, r3
 800126a:	d90a      	bls.n	8001282 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68da      	ldr	r2, [r3, #12]
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f00a fbc4 	bl	800ba04 <realloc>
 800127c:	4602      	mov	r2, r0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a3a      	ldr	r2, [r7, #32]
 8001286:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001288:	2300      	movs	r3, #0
 800128a:	633b      	str	r3, [r7, #48]	; 0x30
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001292:	429a      	cmp	r2, r3
 8001294:	d236      	bcs.n	8001304 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800129e:	6839      	ldr	r1, [r7, #0]
 80012a0:	440a      	add	r2, r1
 80012a2:	7812      	ldrb	r2, [r2, #0]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	3301      	adds	r3, #1
 80012ae:	6839      	ldr	r1, [r7, #0]
 80012b0:	440b      	add	r3, r1
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	4313      	orrs	r3, r2
 80012b8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012be:	3302      	adds	r3, #2
 80012c0:	6839      	ldr	r1, [r7, #0]
 80012c2:	440b      	add	r3, r1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	041b      	lsls	r3, r3, #16
 80012c8:	4313      	orrs	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012d0:	3303      	adds	r3, #3
 80012d2:	6839      	ldr	r1, [r7, #0]
 80012d4:	440b      	add	r3, r1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	061b      	lsls	r3, r3, #24
 80012da:	4313      	orrs	r3, r2
 80012dc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 80012e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012e6:	3304      	adds	r3, #4
 80012e8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	3208      	adds	r2, #8
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 80012fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012fe:	3301      	adds	r3, #1
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
 8001302:	e7c3      	b.n	800128c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	4413      	add	r3, r2
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 800130e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001310:	3301      	adds	r3, #1
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	4413      	add	r3, r2
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	69fa      	ldr	r2, [r7, #28]
 800131c:	4313      	orrs	r3, r2
 800131e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001322:	3302      	adds	r3, #2
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	4413      	add	r3, r2
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	041b      	lsls	r3, r3, #16
 800132c:	69fa      	ldr	r2, [r7, #28]
 800132e:	4313      	orrs	r3, r2
 8001330:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001334:	3303      	adds	r3, #3
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	4413      	add	r3, r2
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	061b      	lsls	r3, r3, #24
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	4313      	orrs	r3, r2
 8001342:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001346:	3304      	adds	r3, #4
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	429a      	cmp	r2, r3
 8001352:	d90a      	bls.n	800136a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699a      	ldr	r2, [r3, #24]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4619      	mov	r1, r3
 800135e:	4610      	mov	r0, r2
 8001360:	f00a fb50 	bl	800ba04 <realloc>
 8001364:	4602      	mov	r2, r0
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800137a:	429a      	cmp	r2, r3
 800137c:	d236      	bcs.n	80013ec <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	440a      	add	r2, r1
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001394:	3301      	adds	r3, #1
 8001396:	6839      	ldr	r1, [r7, #0]
 8001398:	440b      	add	r3, r1
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	4313      	orrs	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a6:	3302      	adds	r3, #2
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	440b      	add	r3, r1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b8:	3303      	adds	r3, #3
 80013ba:	6839      	ldr	r1, [r7, #0]
 80013bc:	440b      	add	r3, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	061b      	lsls	r3, r3, #24
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 80013cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ce:	3304      	adds	r3, #4
 80013d0:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	3214      	adds	r2, #20
 80013e0:	6812      	ldr	r2, [r2, #0]
 80013e2:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 80013e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013e6:	3301      	adds	r3, #1
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ea:	e7c3      	b.n	8001374 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80013ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	4413      	add	r3, r2
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 80013f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f8:	3301      	adds	r3, #1
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800140a:	3302      	adds	r3, #2
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	4413      	add	r3, r2
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800141a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800141c:	3303      	adds	r3, #3
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	061b      	lsls	r3, r3, #24
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800142c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800142e:	3304      	adds	r3, #4
 8001430:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69db      	ldr	r3, [r3, #28]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	429a      	cmp	r2, r3
 800143a:	d90a      	bls.n	8001452 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4619      	mov	r1, r3
 8001446:	4610      	mov	r0, r2
 8001448:	f00a fadc 	bl	800ba04 <realloc>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001458:	2300      	movs	r3, #0
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001462:	429a      	cmp	r2, r3
 8001464:	d23f      	bcs.n	80014e6 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	441a      	add	r2, r3
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f001 feee 	bl	8003254 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147a:	3304      	adds	r3, #4
 800147c:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800147e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
 8001482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4413      	add	r3, r2
 8001488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800148a:	429a      	cmp	r2, r3
 800148c:	d20c      	bcs.n	80014a8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001492:	441a      	add	r2, r3
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	3b01      	subs	r3, #1
 8001498:	6839      	ldr	r1, [r7, #0]
 800149a:	440b      	add	r3, r1
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3301      	adds	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
 80014a6:	e7ec      	b.n	8001482 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80014a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4413      	add	r3, r2
 80014ae:	3b01      	subs	r3, #1
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80014b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014ba:	3b01      	subs	r3, #1
 80014bc:	683a      	ldr	r2, [r7, #0]
 80014be:	441a      	add	r2, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80014c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	3220      	adds	r2, #32
 80014da:	6812      	ldr	r2, [r2, #0]
 80014dc:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 80014de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e0:	3301      	adds	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80014e4:	e7ba      	b.n	800145c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 80014e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80014e8:	4618      	mov	r0, r3
 80014ea:	3738      	adds	r7, #56	; 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	0800c0d0 	.word	0x0800c0d0

0800150c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	4b03      	ldr	r3, [pc, #12]	; (8001524 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	0800bd50 	.word	0x0800bd50

08001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
 8001534:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	68ba      	ldr	r2, [r7, #8]
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	611a      	str	r2, [r3, #16]
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4618      	mov	r0, r3
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
 800155e:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	68d8      	ldr	r0, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6891      	ldr	r1, [r2, #8]
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	4798      	blx	r3
 8001574:	4603      	mov	r3, r0
  };
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	691b      	ldr	r3, [r3, #16]
  }
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80015ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 4096;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <_ZN13STM32HardwareC1Ev+0x3c>)
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80015d8:	3308      	adds	r3, #8
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80015e4:	330c      	adds	r3, #12
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
    }
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	20005494 	.word	0x20005494

080015fc <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 f804 	bl	8001612 <_ZN13STM32Hardware10reset_rbufEv>
    }
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3304      	adds	r3, #4
 8001622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001626:	4619      	mov	r1, r3
 8001628:	f009 f904 	bl	800a834 <HAL_UART_Receive_DMA>
    }
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
      int c = -1;
 800163c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001640:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ffa4 	bl	8001596 <_ZN13STM32Hardware10getRdmaIndEv>
 800164e:	4603      	mov	r3, r0
 8001650:	429c      	cmp	r4, r3
 8001652:	bf14      	ite	ne
 8001654:	2301      	movne	r3, #1
 8001656:	2300      	moveq	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b00      	cmp	r3, #0
 800165c:	d012      	beq.n	8001684 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001664:	1c59      	adds	r1, r3, #1
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	4413      	add	r3, r2
 8001670:	791b      	ldrb	r3, [r3, #4]
 8001672:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800167a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001684:	68fb      	ldr	r3, [r7, #12]
    }
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bd90      	pop	{r4, r7, pc}
	...

08001690 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	d108      	bne.n	80016b8 <_ZN13STM32Hardware5flushEv+0x28>
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <_ZN13STM32Hardware5flushEv+0xe0>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	f083 0301 	eor.w	r3, r3, #1
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <_ZN13STM32Hardware5flushEv+0x28>
 80016b4:	2301      	movs	r3, #1
 80016b6:	e000      	b.n	80016ba <_ZN13STM32Hardware5flushEv+0x2a>
 80016b8:	2300      	movs	r3, #0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d053      	beq.n	8001766 <_ZN13STM32Hardware5flushEv+0xd6>
        mutex = true;
 80016be:	4b2c      	ldr	r3, [pc, #176]	; (8001770 <_ZN13STM32Hardware5flushEv+0xe0>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80016ca:	3308      	adds	r3, #8
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80016d4:	330c      	adds	r3, #12
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d041      	beq.n	8001760 <_ZN13STM32Hardware5flushEv+0xd0>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80016e2:	330c      	adds	r3, #12
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80016ec:	3308      	adds	r3, #8
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d20e      	bcs.n	8001712 <_ZN13STM32Hardware5flushEv+0x82>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80016fa:	3308      	adds	r3, #8
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001706:	330c      	adds	r3, #12
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	b29b      	uxth	r3, r3
 8001710:	e008      	b.n	8001724 <_ZN13STM32Hardware5flushEv+0x94>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001718:	330c      	adds	r3, #12
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	b29b      	uxth	r3, r3
 800171e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001722:	b29b      	uxth	r3, r3
 8001724:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001730:	330c      	adds	r3, #12
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	4413      	add	r3, r2
 800173c:	89fa      	ldrh	r2, [r7, #14]
 800173e:	4619      	mov	r1, r3
 8001740:	f008 fffa 	bl	800a738 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800174a:	330c      	adds	r3, #12
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	4413      	add	r3, r2
 8001752:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800175c:	330c      	adds	r3, #12
 800175e:	601a      	str	r2, [r3, #0]
        }
        mutex = false;
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <_ZN13STM32Hardware5flushEv+0xe0>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
      }
    }
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200000d1 	.word	0x200000d1

08001774 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
      int n = length;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800178a:	bfa8      	it	ge
 800178c:	f44f 5380 	movge.w	r3, #4096	; 0x1000
 8001790:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001798:	3308      	adds	r3, #8
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f5c3 5280 	rsb	r2, r3, #4096	; 0x1000
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	4293      	cmp	r3, r2
 80017a4:	bf28      	it	cs
 80017a6:	4613      	movcs	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80017b0:	3308      	adds	r3, #8
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f00a f909 	bl	800b9d8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80017cc:	3308      	adds	r3, #8
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	4413      	add	r3, r2
 80017d4:	f3c3 020b 	ubfx	r2, r3, #0, #12
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80017de:	3308      	adds	r3, #8
 80017e0:	601a      	str	r2, [r3, #0]

      if(n != n_tail){
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d00b      	beq.n	8001802 <_ZN13STM32Hardware5writeEPhi+0x8e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f503 7002 	add.w	r0, r3, #520	; 0x208
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	18d1      	adds	r1, r2, r3
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f00a f8eb 	bl	800b9d8 <memcpy>
      }

      flush();
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f7ff ff44 	bl	8001690 <_ZN13STM32Hardware5flushEv>
    }
 8001808:	bf00      	nop
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	f006 fa9e 	bl	8007d58 <HAL_GetTick>
 800181c:	4603      	mov	r3, r0
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <_ZN8std_msgs5EmptyC1Ev>:

  class Empty : public ros::Msg
  {
    public:

    Empty()
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
    {
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff f838 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8001838:	4a03      	ldr	r2, [pc, #12]	; (8001848 <_ZN8std_msgs5EmptyC1Ev+0x20>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	601a      	str	r2, [r3, #0]
    }
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4618      	mov	r0, r3
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	0800c2cc 	.word	0x0800c2cc

0800184c <_ZNK8std_msgs5Empty9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
      return offset;
 800185a:	68fb      	ldr	r3, [r7, #12]
    }
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_ZN8std_msgs5Empty11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
     return offset;
 8001876:	68fb      	ldr	r3, [r7, #12]
    }
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_ZN8std_msgs5Empty7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Empty"; };
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <_ZN8std_msgs5Empty7getTypeEv+0x18>)
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	0800bd74 	.word	0x0800bd74

080018a0 <_ZN8std_msgs5Empty6getMD5Ev>:
    virtual const char * getMD5() override { return "d41d8cd98f00b204e9800998ecf8427e"; };
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <_ZN8std_msgs5Empty6getMD5Ev+0x18>)
 80018aa:	4618      	mov	r0, r3
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	0800bd84 	.word	0x0800bd84

080018bc <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe ffee 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 80018cc:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3308      	adds	r3, #8
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe ffd1 	bl	8000884 <_ZN3ros4TimeC1Ev>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80018e6:	611a      	str	r2, [r3, #16]
    {
    }
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	0800c2b4 	.word	0x0800c2b4
 80018f8:	0800bcd4 	.word	0x0800bcd4

080018fc <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	0a19      	lsrs	r1, r3, #8
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	4413      	add	r3, r2
 8001926:	b2ca      	uxtb	r2, r1
 8001928:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	0c19      	lsrs	r1, r3, #16
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	3302      	adds	r3, #2
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	4413      	add	r3, r2
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	0e19      	lsrs	r1, r3, #24
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3303      	adds	r3, #3
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	4413      	add	r3, r2
 800194a:	b2ca      	uxtb	r2, r1
 800194c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	3304      	adds	r3, #4
 8001952:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6899      	ldr	r1, [r3, #8]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	4413      	add	r3, r2
 800195e:	b2ca      	uxtb	r2, r1
 8001960:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	0a19      	lsrs	r1, r3, #8
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	4413      	add	r3, r2
 8001970:	b2ca      	uxtb	r2, r1
 8001972:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	0c19      	lsrs	r1, r3, #16
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3302      	adds	r3, #2
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	4413      	add	r3, r2
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	0e19      	lsrs	r1, r3, #24
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	3303      	adds	r3, #3
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	4413      	add	r3, r2
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3304      	adds	r3, #4
 800199c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68d9      	ldr	r1, [r3, #12]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	b2ca      	uxtb	r2, r1
 80019aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a19      	lsrs	r1, r3, #8
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	3301      	adds	r3, #1
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	0c19      	lsrs	r1, r3, #16
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3302      	adds	r3, #2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	4413      	add	r3, r2
 80019cc:	b2ca      	uxtb	r2, r1
 80019ce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0e19      	lsrs	r1, r3, #24
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3303      	adds	r3, #3
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	b2ca      	uxtb	r2, r1
 80019e0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3304      	adds	r3, #4
 80019e6:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fbf1 	bl	80001d4 <strlen>
 80019f2:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	68b9      	ldr	r1, [r7, #8]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f001 fc0b 	bl	8003218 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3304      	adds	r3, #4
 8001a06:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	18d0      	adds	r0, r2, r3
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4619      	mov	r1, r3
 8001a16:	f009 ffdf 	bl	800b9d8 <memcpy>
      offset += length_frame_id;
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	4413      	add	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]
      return offset;
 8001a22:	68fb      	ldr	r3, [r7, #12]
    }
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	4413      	add	r3, r2
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	440b      	add	r3, r1
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	021b      	lsls	r3, r3, #8
 8001a58:	431a      	orrs	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3302      	adds	r3, #2
 8001a66:	6839      	ldr	r1, [r7, #0]
 8001a68:	440b      	add	r3, r1
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	3303      	adds	r3, #3
 8001a7c:	6839      	ldr	r1, [r7, #0]
 8001a7e:	440b      	add	r3, r1
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	061b      	lsls	r3, r3, #24
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689a      	ldr	r2, [r3, #8]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	6839      	ldr	r1, [r7, #0]
 8001aa8:	440b      	add	r3, r1
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	021b      	lsls	r3, r3, #8
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	3302      	adds	r3, #2
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	440b      	add	r3, r1
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	3303      	adds	r3, #3
 8001ad2:	6839      	ldr	r1, [r7, #0]
 8001ad4:	440b      	add	r3, r1
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	061b      	lsls	r3, r3, #24
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	461a      	mov	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	3301      	adds	r3, #1
 8001afc:	6839      	ldr	r1, [r7, #0]
 8001afe:	440b      	add	r3, r1
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	3302      	adds	r3, #2
 8001b12:	6839      	ldr	r1, [r7, #0]
 8001b14:	440b      	add	r3, r1
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	041b      	lsls	r3, r3, #16
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	3303      	adds	r3, #3
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	061b      	lsls	r3, r3, #24
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	441a      	add	r2, r3
 8001b42:	f107 030c 	add.w	r3, r7, #12
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 fb83 	bl	8003254 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	3304      	adds	r3, #4
 8001b52:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d20c      	bcs.n	8001b7e <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8001b64:	683a      	ldr	r2, [r7, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	441a      	add	r2, r3
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	6839      	ldr	r1, [r7, #0]
 8001b70:	440b      	add	r3, r1
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e7ec      	b.n	8001b58 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	4413      	add	r3, r2
 8001b84:	3b01      	subs	r3, #1
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	683a      	ldr	r2, [r7, #0]
 8001b94:	441a      	add	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
     return offset;
 8001ba2:	693b      	ldr	r3, [r7, #16]
    }
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	0800bda8 	.word	0x0800bda8

08001bc8 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	0800bdb8 	.word	0x0800bdb8

08001be4 <_ZN21sensors_53l5a1_driver8nb_spadsC1Ev>:
    public:
      typedef std_msgs::Header _header_type;
      _header_type header;
      uint32_t number_spads_enabled[64];

    nb_spads():
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
      header(),
      number_spads_enabled()
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fe5a 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <_ZN21sensors_53l5a1_driver8nb_spadsC1Ev+0x40>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fe5c 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f103 0218 	add.w	r2, r3, #24
 8001c0a:	233f      	movs	r3, #63	; 0x3f
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db04      	blt.n	8001c1a <_ZN21sensors_53l5a1_driver8nb_spadsC1Ev+0x36>
 8001c10:	2100      	movs	r1, #0
 8001c12:	6011      	str	r1, [r2, #0]
 8001c14:	3204      	adds	r2, #4
 8001c16:	3b01      	subs	r3, #1
 8001c18:	e7f8      	b.n	8001c0c <_ZN21sensors_53l5a1_driver8nb_spadsC1Ev+0x28>
    {
    }
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	0800c29c 	.word	0x0800c29c

08001c28 <_ZNK21sensors_53l5a1_driver8nb_spads9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	1d18      	adds	r0, r3, #4
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	f7ff fe5b 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	2b3f      	cmp	r3, #63	; 0x3f
 8001c56:	d834      	bhi.n	8001cc2 <_ZNK21sensors_53l5a1_driver8nb_spads9serializeEPh+0x9a>
      *(outbuffer + offset + 0) = (this->number_spads_enabled[i] >> (8 * 0)) & 0xFF;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	3206      	adds	r2, #6
 8001c5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2ca      	uxtb	r2, r1
 8001c6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->number_spads_enabled[i] >> (8 * 1)) & 0xFF;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	3206      	adds	r2, #6
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	0a19      	lsrs	r1, r3, #8
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b2ca      	uxtb	r2, r1
 8001c82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->number_spads_enabled[i] >> (8 * 2)) & 0xFF;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	3206      	adds	r2, #6
 8001c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8e:	0c19      	lsrs	r1, r3, #16
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	3302      	adds	r3, #2
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	b2ca      	uxtb	r2, r1
 8001c9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->number_spads_enabled[i] >> (8 * 3)) & 0xFF;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68ba      	ldr	r2, [r7, #8]
 8001ca0:	3206      	adds	r2, #6
 8001ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca6:	0e19      	lsrs	r1, r3, #24
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	3303      	adds	r3, #3
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	b2ca      	uxtb	r2, r1
 8001cb2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->number_spads_enabled[i]);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	e7c7      	b.n	8001c52 <_ZNK21sensors_53l5a1_driver8nb_spads9serializeEPh+0x2a>
      }
      return offset;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
    }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN21sensors_53l5a1_driver8nb_spads11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	1d18      	adds	r0, r3, #4
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7ff fea1 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4413      	add	r3, r2
 8001cf0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b3f      	cmp	r3, #63	; 0x3f
 8001cfa:	d846      	bhi.n	8001d8a <_ZN21sensors_53l5a1_driver8nb_spads11deserializeEPh+0xbe>
      this->number_spads_enabled[i] =  ((uint32_t) (*(inbuffer + offset)));
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4619      	mov	r1, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68ba      	ldr	r2, [r7, #8]
 8001d0a:	3206      	adds	r2, #6
 8001d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      this->number_spads_enabled[i] |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	3206      	adds	r2, #6
 8001d16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	440b      	add	r3, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	ea42 0103 	orr.w	r1, r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68ba      	ldr	r2, [r7, #8]
 8001d2e:	3206      	adds	r2, #6
 8001d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      this->number_spads_enabled[i] |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	3206      	adds	r2, #6
 8001d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	3302      	adds	r3, #2
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	041b      	lsls	r3, r3, #16
 8001d4a:	ea42 0103 	orr.w	r1, r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	3206      	adds	r2, #6
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      this->number_spads_enabled[i] |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	3206      	adds	r2, #6
 8001d5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3303      	adds	r3, #3
 8001d66:	6839      	ldr	r1, [r7, #0]
 8001d68:	440b      	add	r3, r1
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	061b      	lsls	r3, r3, #24
 8001d6e:	ea42 0103 	orr.w	r1, r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	3206      	adds	r2, #6
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      offset += sizeof(this->number_spads_enabled[i]);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	e7b5      	b.n	8001cf6 <_ZN21sensors_53l5a1_driver8nb_spads11deserializeEPh+0x2a>
      }
     return offset;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
    }
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <_ZN21sensors_53l5a1_driver8nb_spads7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/nb_spads"; };
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <_ZN21sensors_53l5a1_driver8nb_spads7getTypeEv+0x18>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	0800bddc 	.word	0x0800bddc

08001db0 <_ZN21sensors_53l5a1_driver8nb_spads6getMD5Ev>:
    virtual const char * getMD5() override { return "8dcd29376cfd243dd0979996d5c9b362"; };
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <_ZN21sensors_53l5a1_driver8nb_spads6getMD5Ev+0x18>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	0800bdfc 	.word	0x0800bdfc

08001dcc <_ZN21sensors_53l5a1_driver11am_per_spadC1Ev>:
    public:
      typedef std_msgs::Header _header_type;
      _header_type header;
      uint32_t ambient_per_spad[64];

    am_per_spad():
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
      header(),
      ambient_per_spad()
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fd66 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <_ZN21sensors_53l5a1_driver11am_per_spadC1Ev+0x40>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fd68 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f103 0218 	add.w	r2, r3, #24
 8001df2:	233f      	movs	r3, #63	; 0x3f
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db04      	blt.n	8001e02 <_ZN21sensors_53l5a1_driver11am_per_spadC1Ev+0x36>
 8001df8:	2100      	movs	r1, #0
 8001dfa:	6011      	str	r1, [r2, #0]
 8001dfc:	3204      	adds	r2, #4
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	e7f8      	b.n	8001df4 <_ZN21sensors_53l5a1_driver11am_per_spadC1Ev+0x28>
    {
    }
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	0800c284 	.word	0x0800c284

08001e10 <_ZNK21sensors_53l5a1_driver11am_per_spad9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	1d18      	adds	r0, r3, #4
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7ff fd67 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	4413      	add	r3, r2
 8001e34:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b3f      	cmp	r3, #63	; 0x3f
 8001e3e:	d834      	bhi.n	8001eaa <_ZNK21sensors_53l5a1_driver11am_per_spad9serializeEPh+0x9a>
      *(outbuffer + offset + 0) = (this->ambient_per_spad[i] >> (8 * 0)) & 0xFF;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68ba      	ldr	r2, [r7, #8]
 8001e44:	3206      	adds	r2, #6
 8001e46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	b2ca      	uxtb	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ambient_per_spad[i] >> (8 * 1)) & 0xFF;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	3206      	adds	r2, #6
 8001e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5e:	0a19      	lsrs	r1, r3, #8
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	3301      	adds	r3, #1
 8001e64:	683a      	ldr	r2, [r7, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	b2ca      	uxtb	r2, r1
 8001e6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ambient_per_spad[i] >> (8 * 2)) & 0xFF;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	3206      	adds	r2, #6
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	0c19      	lsrs	r1, r3, #16
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	b2ca      	uxtb	r2, r1
 8001e82:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ambient_per_spad[i] >> (8 * 3)) & 0xFF;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	3206      	adds	r2, #6
 8001e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8e:	0e19      	lsrs	r1, r3, #24
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3303      	adds	r3, #3
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	b2ca      	uxtb	r2, r1
 8001e9a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ambient_per_spad[i]);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	e7c7      	b.n	8001e3a <_ZNK21sensors_53l5a1_driver11am_per_spad9serializeEPh+0x2a>
      }
      return offset;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
    }
 8001eac:	4618      	mov	r0, r3
 8001eae:	3710      	adds	r7, #16
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <_ZN21sensors_53l5a1_driver11am_per_spad11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	1d18      	adds	r0, r3, #4
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4619      	mov	r1, r3
 8001ece:	f7ff fdad 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001eda:	2300      	movs	r3, #0
 8001edc:	60bb      	str	r3, [r7, #8]
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ee2:	d846      	bhi.n	8001f72 <_ZN21sensors_53l5a1_driver11am_per_spad11deserializeEPh+0xbe>
      this->ambient_per_spad[i] =  ((uint32_t) (*(inbuffer + offset)));
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	4619      	mov	r1, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	3206      	adds	r2, #6
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      this->ambient_per_spad[i] |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	3206      	adds	r2, #6
 8001efe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3301      	adds	r3, #1
 8001f06:	6839      	ldr	r1, [r7, #0]
 8001f08:	440b      	add	r3, r1
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	021b      	lsls	r3, r3, #8
 8001f0e:	ea42 0103 	orr.w	r1, r2, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	3206      	adds	r2, #6
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      this->ambient_per_spad[i] |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	3206      	adds	r2, #6
 8001f22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3302      	adds	r3, #2
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	440b      	add	r3, r1
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	ea42 0103 	orr.w	r1, r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	3206      	adds	r2, #6
 8001f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      this->ambient_per_spad[i] |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	3206      	adds	r2, #6
 8001f46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	3303      	adds	r3, #3
 8001f4e:	6839      	ldr	r1, [r7, #0]
 8001f50:	440b      	add	r3, r1
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	ea42 0103 	orr.w	r1, r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68ba      	ldr	r2, [r7, #8]
 8001f5e:	3206      	adds	r2, #6
 8001f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      offset += sizeof(this->ambient_per_spad[i]);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3304      	adds	r3, #4
 8001f68:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	e7b5      	b.n	8001ede <_ZN21sensors_53l5a1_driver11am_per_spad11deserializeEPh+0x2a>
      }
     return offset;
 8001f72:	68fb      	ldr	r3, [r7, #12]
    }
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_ZN21sensors_53l5a1_driver11am_per_spad7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/am_per_spad"; };
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <_ZN21sensors_53l5a1_driver11am_per_spad7getTypeEv+0x18>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	0800be20 	.word	0x0800be20

08001f98 <_ZN21sensors_53l5a1_driver11am_per_spad6getMD5Ev>:
    virtual const char * getMD5() override { return "d12642d837e53a27605a4e5b7d88bf8d"; };
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <_ZN21sensors_53l5a1_driver11am_per_spad6getMD5Ev+0x18>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	0800be44 	.word	0x0800be44

08001fb4 <_ZN21sensors_53l5a1_driver12sig_per_spadC1Ev>:
      _header_type header;
      typedef uint8_t _layer_type;
      _layer_type layer;
      uint32_t signal_per_spad[64];

    sig_per_spad():
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
      header(),
      layer(0),
      signal_per_spad()
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fc72 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <_ZN21sensors_53l5a1_driver12sig_per_spadC1Ev+0x48>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3304      	adds	r3, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc74 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	761a      	strb	r2, [r3, #24]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f103 021c 	add.w	r2, r3, #28
 8001fe0:	233f      	movs	r3, #63	; 0x3f
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db04      	blt.n	8001ff0 <_ZN21sensors_53l5a1_driver12sig_per_spadC1Ev+0x3c>
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	6011      	str	r1, [r2, #0]
 8001fea:	3204      	adds	r2, #4
 8001fec:	3b01      	subs	r3, #1
 8001fee:	e7f8      	b.n	8001fe2 <_ZN21sensors_53l5a1_driver12sig_per_spadC1Ev+0x2e>
    {
    }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	0800c26c 	.word	0x0800c26c

08002000 <_ZNK21sensors_53l5a1_driver12sig_per_spad9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800200a:	2300      	movs	r3, #0
 800200c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	1d18      	adds	r0, r3, #4
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	4413      	add	r3, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f7ff fc6f 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 800201e:	4602      	mov	r2, r0
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->layer >> (8 * 0)) & 0xFF;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	4413      	add	r3, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	7e12      	ldrb	r2, [r2, #24]
 8002030:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->layer);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b3f      	cmp	r3, #63	; 0x3f
 8002040:	d838      	bhi.n	80020b4 <_ZNK21sensors_53l5a1_driver12sig_per_spad9serializeEPh+0xb4>
      *(outbuffer + offset + 0) = (this->signal_per_spad[i] >> (8 * 0)) & 0xFF;
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	3306      	adds	r3, #6
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	6859      	ldr	r1, [r3, #4]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b2ca      	uxtb	r2, r1
 8002056:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->signal_per_spad[i] >> (8 * 1)) & 0xFF;
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3306      	adds	r3, #6
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	0a19      	lsrs	r1, r3, #8
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3301      	adds	r3, #1
 800206a:	683a      	ldr	r2, [r7, #0]
 800206c:	4413      	add	r3, r2
 800206e:	b2ca      	uxtb	r2, r1
 8002070:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->signal_per_spad[i] >> (8 * 2)) & 0xFF;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	3306      	adds	r3, #6
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	0c19      	lsrs	r1, r3, #16
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3302      	adds	r3, #2
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	4413      	add	r3, r2
 8002088:	b2ca      	uxtb	r2, r1
 800208a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->signal_per_spad[i] >> (8 * 3)) & 0xFF;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	3306      	adds	r3, #6
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0e19      	lsrs	r1, r3, #24
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3303      	adds	r3, #3
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	b2ca      	uxtb	r2, r1
 80020a4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->signal_per_spad[i]);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	3301      	adds	r3, #1
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	e7c3      	b.n	800203c <_ZNK21sensors_53l5a1_driver12sig_per_spad9serializeEPh+0x3c>
      }
      return offset;
 80020b4:	68fb      	ldr	r3, [r7, #12]
    }
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZN21sensors_53l5a1_driver12sig_per_spad11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80020be:	b580      	push	{r7, lr}
 80020c0:	b084      	sub	sp, #16
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	1d18      	adds	r0, r3, #4
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	4413      	add	r3, r2
 80020d6:	4619      	mov	r1, r3
 80020d8:	f7ff fca8 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 80020dc:	4602      	mov	r2, r0
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	60fb      	str	r3, [r7, #12]
      this->layer =  ((uint8_t) (*(inbuffer + offset)));
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->layer);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	3301      	adds	r3, #1
 80020f4:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b3f      	cmp	r3, #63	; 0x3f
 80020fe:	d84a      	bhi.n	8002196 <_ZN21sensors_53l5a1_driver12sig_per_spad11deserializeEPh+0xd8>
      this->signal_per_spad[i] =  ((uint32_t) (*(inbuffer + offset)));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4413      	add	r3, r2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4619      	mov	r1, r3
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	3306      	adds	r3, #6
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	6059      	str	r1, [r3, #4]
      this->signal_per_spad[i] |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	3306      	adds	r3, #6
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	685a      	ldr	r2, [r3, #4]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	3301      	adds	r3, #1
 8002126:	6839      	ldr	r1, [r7, #0]
 8002128:	440b      	add	r3, r1
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	431a      	orrs	r2, r3
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	3306      	adds	r3, #6
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	605a      	str	r2, [r3, #4]
      this->signal_per_spad[i] |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3306      	adds	r3, #6
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3302      	adds	r3, #2
 800214c:	6839      	ldr	r1, [r7, #0]
 800214e:	440b      	add	r3, r1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	431a      	orrs	r2, r3
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	3306      	adds	r3, #6
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	440b      	add	r3, r1
 8002160:	605a      	str	r2, [r3, #4]
      this->signal_per_spad[i] |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	3306      	adds	r3, #6
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4413      	add	r3, r2
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	3303      	adds	r3, #3
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	440b      	add	r3, r1
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	061b      	lsls	r3, r3, #24
 800217a:	431a      	orrs	r2, r3
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3306      	adds	r3, #6
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->signal_per_spad[i]);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3304      	adds	r3, #4
 800218c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	3301      	adds	r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
 8002194:	e7b1      	b.n	80020fa <_ZN21sensors_53l5a1_driver12sig_per_spad11deserializeEPh+0x3c>
      }
     return offset;
 8002196:	68fb      	ldr	r3, [r7, #12]
    }
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <_ZN21sensors_53l5a1_driver12sig_per_spad7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/sig_per_spad"; };
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <_ZN21sensors_53l5a1_driver12sig_per_spad7getTypeEv+0x18>)
 80021aa:	4618      	mov	r0, r3
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	0800be68 	.word	0x0800be68

080021bc <_ZN21sensors_53l5a1_driver12sig_per_spad6getMD5Ev>:
    virtual const char * getMD5() override { return "5af842b4d93978fd421a6e5e9202a012"; };
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <_ZN21sensors_53l5a1_driver12sig_per_spad6getMD5Ev+0x18>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	0800be8c 	.word	0x0800be8c

080021d8 <_ZN21sensors_53l5a1_driver8distanceC1Ev>:
      _layer_type layer;
      typedef uint8_t _resolution_type;
      _resolution_type resolution;
      uint16_t distance_mm[64];

    distance():
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
      header(),
      layer(0),
      resolution(0),
      distance_mm()
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fb60 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 80021e8:	4a0e      	ldr	r2, [pc, #56]	; (8002224 <_ZN21sensors_53l5a1_driver8distanceC1Ev+0x4c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3304      	adds	r3, #4
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fb62 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	761a      	strb	r2, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	765a      	strb	r2, [r3, #25]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f103 021a 	add.w	r2, r3, #26
 800220a:	233f      	movs	r3, #63	; 0x3f
 800220c:	2b00      	cmp	r3, #0
 800220e:	db04      	blt.n	800221a <_ZN21sensors_53l5a1_driver8distanceC1Ev+0x42>
 8002210:	2100      	movs	r1, #0
 8002212:	8011      	strh	r1, [r2, #0]
 8002214:	3202      	adds	r2, #2
 8002216:	3b01      	subs	r3, #1
 8002218:	e7f8      	b.n	800220c <_ZN21sensors_53l5a1_driver8distanceC1Ev+0x34>
    {
    }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	0800c254 	.word	0x0800c254

08002228 <_ZNK21sensors_53l5a1_driver8distance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	1d18      	adds	r0, r3, #4
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	4413      	add	r3, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7ff fb5b 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 8002246:	4602      	mov	r2, r0
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->layer >> (8 * 0)) & 0xFF;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	683a      	ldr	r2, [r7, #0]
 8002252:	4413      	add	r3, r2
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	7e12      	ldrb	r2, [r2, #24]
 8002258:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->layer);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3301      	adds	r3, #1
 800225e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->resolution >> (8 * 0)) & 0xFF;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	683a      	ldr	r2, [r7, #0]
 8002264:	4413      	add	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	7e52      	ldrb	r2, [r2, #25]
 800226a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->resolution);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8002272:	2300      	movs	r3, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	2b3f      	cmp	r3, #63	; 0x3f
 800227a:	d81f      	bhi.n	80022bc <_ZNK21sensors_53l5a1_driver8distance9serializeEPh+0x94>
      *(outbuffer + offset + 0) = (this->distance_mm[i] >> (8 * 0)) & 0xFF;
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	330c      	adds	r3, #12
 8002282:	005b      	lsls	r3, r3, #1
 8002284:	4413      	add	r3, r2
 8002286:	8859      	ldrh	r1, [r3, #2]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	4413      	add	r3, r2
 800228e:	b2ca      	uxtb	r2, r1
 8002290:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->distance_mm[i] >> (8 * 1)) & 0xFF;
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	330c      	adds	r3, #12
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	885b      	ldrh	r3, [r3, #2]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	b299      	uxth	r1, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3301      	adds	r3, #1
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	b2ca      	uxtb	r2, r1
 80022ac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->distance_mm[i]);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	3302      	adds	r3, #2
 80022b2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3301      	adds	r3, #1
 80022b8:	60bb      	str	r3, [r7, #8]
 80022ba:	e7dc      	b.n	8002276 <_ZNK21sensors_53l5a1_driver8distance9serializeEPh+0x4e>
      }
      return offset;
 80022bc:	68fb      	ldr	r3, [r7, #12]
    }
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <_ZN21sensors_53l5a1_driver8distance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	1d18      	adds	r0, r3, #4
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7ff fba4 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	4413      	add	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
      this->layer =  ((uint8_t) (*(inbuffer + offset)));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781a      	ldrb	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->layer);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	3301      	adds	r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      this->resolution =  ((uint8_t) (*(inbuffer + offset)));
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	4413      	add	r3, r2
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	765a      	strb	r2, [r3, #25]
      offset += sizeof(this->resolution);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3301      	adds	r3, #1
 800230e:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8002310:	2300      	movs	r3, #0
 8002312:	60bb      	str	r3, [r7, #8]
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b3f      	cmp	r3, #63	; 0x3f
 8002318:	d82a      	bhi.n	8002370 <_ZN21sensors_53l5a1_driver8distance11deserializeEPh+0xaa>
      this->distance_mm[i] =  ((uint16_t) (*(inbuffer + offset)));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b299      	uxth	r1, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	330c      	adds	r3, #12
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	460a      	mov	r2, r1
 8002330:	805a      	strh	r2, [r3, #2]
      this->distance_mm[i] |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	330c      	adds	r3, #12
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	885b      	ldrh	r3, [r3, #2]
 800233e:	b21a      	sxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	3301      	adds	r3, #1
 8002344:	6839      	ldr	r1, [r7, #0]
 8002346:	440b      	add	r3, r1
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	021b      	lsls	r3, r3, #8
 800234c:	b21b      	sxth	r3, r3
 800234e:	4313      	orrs	r3, r2
 8002350:	b21b      	sxth	r3, r3
 8002352:	b299      	uxth	r1, r3
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	330c      	adds	r3, #12
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	460a      	mov	r2, r1
 8002360:	805a      	strh	r2, [r3, #2]
      offset += sizeof(this->distance_mm[i]);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	3302      	adds	r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3301      	adds	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
 800236e:	e7d1      	b.n	8002314 <_ZN21sensors_53l5a1_driver8distance11deserializeEPh+0x4e>
      }
     return offset;
 8002370:	68fb      	ldr	r3, [r7, #12]
    }
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <_ZN21sensors_53l5a1_driver8distance7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/distance"; };
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	4b03      	ldr	r3, [pc, #12]	; (8002394 <_ZN21sensors_53l5a1_driver8distance7getTypeEv+0x18>)
 8002386:	4618      	mov	r0, r3
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	0800beb0 	.word	0x0800beb0

08002398 <_ZN21sensors_53l5a1_driver8distance6getMD5Ev>:
    virtual const char * getMD5() override { return "ea031c368ea421bba7084554872dc176"; };
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <_ZN21sensors_53l5a1_driver8distance6getMD5Ev+0x18>)
 80023a2:	4618      	mov	r0, r3
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	0800bed0 	.word	0x0800bed0

080023b4 <_ZN21sensors_53l5a1_driver5sigmaC1Ev>:
      _header_type header;
      typedef uint8_t _layer_type;
      _layer_type layer;
      uint16_t sigma_mm[64];

    sigma():
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
      header(),
      layer(0),
      sigma_mm()
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fa72 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <_ZN21sensors_53l5a1_driver5sigmaC1Ev+0x48>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff fa74 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	761a      	strb	r2, [r3, #24]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f103 021a 	add.w	r2, r3, #26
 80023e0:	233f      	movs	r3, #63	; 0x3f
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	db04      	blt.n	80023f0 <_ZN21sensors_53l5a1_driver5sigmaC1Ev+0x3c>
 80023e6:	2100      	movs	r1, #0
 80023e8:	8011      	strh	r1, [r2, #0]
 80023ea:	3202      	adds	r2, #2
 80023ec:	3b01      	subs	r3, #1
 80023ee:	e7f8      	b.n	80023e2 <_ZN21sensors_53l5a1_driver5sigmaC1Ev+0x2e>
    {
    }
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	0800c23c 	.word	0x0800c23c

08002400 <_ZNK21sensors_53l5a1_driver5sigma9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	1d18      	adds	r0, r3, #4
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	4413      	add	r3, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f7ff fa6f 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 800241e:	4602      	mov	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4413      	add	r3, r2
 8002424:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->layer >> (8 * 0)) & 0xFF;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	4413      	add	r3, r2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	7e12      	ldrb	r2, [r2, #24]
 8002430:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->layer);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3301      	adds	r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8002438:	2300      	movs	r3, #0
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	2b3f      	cmp	r3, #63	; 0x3f
 8002440:	d81f      	bhi.n	8002482 <_ZNK21sensors_53l5a1_driver5sigma9serializeEPh+0x82>
      *(outbuffer + offset + 0) = (this->sigma_mm[i] >> (8 * 0)) & 0xFF;
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	330c      	adds	r3, #12
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	4413      	add	r3, r2
 800244c:	8859      	ldrh	r1, [r3, #2]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	4413      	add	r3, r2
 8002454:	b2ca      	uxtb	r2, r1
 8002456:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->sigma_mm[i] >> (8 * 1)) & 0xFF;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	330c      	adds	r3, #12
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	885b      	ldrh	r3, [r3, #2]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b299      	uxth	r1, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	3301      	adds	r3, #1
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	4413      	add	r3, r2
 8002470:	b2ca      	uxtb	r2, r1
 8002472:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->sigma_mm[i]);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	3302      	adds	r3, #2
 8002478:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	3301      	adds	r3, #1
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	e7dc      	b.n	800243c <_ZNK21sensors_53l5a1_driver5sigma9serializeEPh+0x3c>
      }
      return offset;
 8002482:	68fb      	ldr	r3, [r7, #12]
    }
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZN21sensors_53l5a1_driver5sigma11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	1d18      	adds	r0, r3, #4
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f7ff fac1 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4413      	add	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]
      this->layer =  ((uint8_t) (*(inbuffer + offset)));
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	781a      	ldrb	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->layer);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	3301      	adds	r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 80024c4:	2300      	movs	r3, #0
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b3f      	cmp	r3, #63	; 0x3f
 80024cc:	d82a      	bhi.n	8002524 <_ZN21sensors_53l5a1_driver5sigma11deserializeEPh+0x98>
      this->sigma_mm[i] =  ((uint16_t) (*(inbuffer + offset)));
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b299      	uxth	r1, r3
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	330c      	adds	r3, #12
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	460a      	mov	r2, r1
 80024e4:	805a      	strh	r2, [r3, #2]
      this->sigma_mm[i] |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	330c      	adds	r3, #12
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	885b      	ldrh	r3, [r3, #2]
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	6839      	ldr	r1, [r7, #0]
 80024fa:	440b      	add	r3, r1
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	b21b      	sxth	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b21b      	sxth	r3, r3
 8002506:	b299      	uxth	r1, r3
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	330c      	adds	r3, #12
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	4413      	add	r3, r2
 8002512:	460a      	mov	r2, r1
 8002514:	805a      	strh	r2, [r3, #2]
      offset += sizeof(this->sigma_mm[i]);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3302      	adds	r3, #2
 800251a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	3301      	adds	r3, #1
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	e7d1      	b.n	80024c8 <_ZN21sensors_53l5a1_driver5sigma11deserializeEPh+0x3c>
      }
     return offset;
 8002524:	68fb      	ldr	r3, [r7, #12]
    }
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <_ZN21sensors_53l5a1_driver5sigma7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/sigma"; };
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <_ZN21sensors_53l5a1_driver5sigma7getTypeEv+0x18>)
 800253a:	4618      	mov	r0, r3
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	0800bef4 	.word	0x0800bef4

0800254c <_ZN21sensors_53l5a1_driver5sigma6getMD5Ev>:
    virtual const char * getMD5() override { return "35fe20af179b747bc4af98c17f84d798"; };
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <_ZN21sensors_53l5a1_driver5sigma6getMD5Ev+0x18>)
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	0800bf10 	.word	0x0800bf10

08002568 <_ZN21sensors_53l5a1_driver6statusC1Ev>:
      _header_type header;
      typedef uint8_t _layer_type;
      _layer_type layer;
      uint8_t target_status[64];

    status():
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
      header(),
      layer(0),
      target_status()
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f998 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8002578:	4a0d      	ldr	r2, [pc, #52]	; (80025b0 <_ZN21sensors_53l5a1_driver6statusC1Ev+0x48>)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff f99a 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	761a      	strb	r2, [r3, #24]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f103 0219 	add.w	r2, r3, #25
 8002594:	233f      	movs	r3, #63	; 0x3f
 8002596:	2b00      	cmp	r3, #0
 8002598:	db04      	blt.n	80025a4 <_ZN21sensors_53l5a1_driver6statusC1Ev+0x3c>
 800259a:	2100      	movs	r1, #0
 800259c:	7011      	strb	r1, [r2, #0]
 800259e:	3201      	adds	r2, #1
 80025a0:	3b01      	subs	r3, #1
 80025a2:	e7f8      	b.n	8002596 <_ZN21sensors_53l5a1_driver6statusC1Ev+0x2e>
    {
    }
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	0800c224 	.word	0x0800c224

080025b4 <_ZNK21sensors_53l5a1_driver6status9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	1d18      	adds	r0, r3, #4
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7ff f995 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->layer >> (8 * 0)) & 0xFF;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	4413      	add	r3, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	7e12      	ldrb	r2, [r2, #24]
 80025e4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->layer);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	3301      	adds	r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 80025ec:	2300      	movs	r3, #0
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b3f      	cmp	r3, #63	; 0x3f
 80025f4:	d80f      	bhi.n	8002616 <_ZNK21sensors_53l5a1_driver6status9serializeEPh+0x62>
      *(outbuffer + offset + 0) = (this->target_status[i] >> (8 * 0)) & 0xFF;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	68ba      	ldr	r2, [r7, #8]
 8002600:	440a      	add	r2, r1
 8002602:	3219      	adds	r2, #25
 8002604:	7812      	ldrb	r2, [r2, #0]
 8002606:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->target_status[i]);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	3301      	adds	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3301      	adds	r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	e7ec      	b.n	80025f0 <_ZNK21sensors_53l5a1_driver6status9serializeEPh+0x3c>
      }
      return offset;
 8002616:	68fb      	ldr	r3, [r7, #12]
    }
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <_ZN21sensors_53l5a1_driver6status11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	1d18      	adds	r0, r3, #4
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	4413      	add	r3, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f7ff f9f7 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	4413      	add	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
      this->layer =  ((uint8_t) (*(inbuffer + offset)));
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	4413      	add	r3, r2
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->layer);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3301      	adds	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 8002658:	2300      	movs	r3, #0
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b3f      	cmp	r3, #63	; 0x3f
 8002660:	d810      	bhi.n	8002684 <_ZN21sensors_53l5a1_driver6status11deserializeEPh+0x64>
      this->target_status[i] =  ((uint8_t) (*(inbuffer + offset)));
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	4413      	add	r3, r2
 8002668:	7819      	ldrb	r1, [r3, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4413      	add	r3, r2
 8002670:	3319      	adds	r3, #25
 8002672:	460a      	mov	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->target_status[i]);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3301      	adds	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	3301      	adds	r3, #1
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	e7eb      	b.n	800265c <_ZN21sensors_53l5a1_driver6status11deserializeEPh+0x3c>
      }
     return offset;
 8002684:	68fb      	ldr	r3, [r7, #12]
    }
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <_ZN21sensors_53l5a1_driver6status7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/status"; };
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	4b03      	ldr	r3, [pc, #12]	; (80026a8 <_ZN21sensors_53l5a1_driver6status7getTypeEv+0x18>)
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	0800bf34 	.word	0x0800bf34

080026ac <_ZN21sensors_53l5a1_driver6status6getMD5Ev>:
    virtual const char * getMD5() override { return "6bd059e4f62cb23f05c6abb7f626ac58"; };
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	4b03      	ldr	r3, [pc, #12]	; (80026c4 <_ZN21sensors_53l5a1_driver6status6getMD5Ev+0x18>)
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	0800bf54 	.word	0x0800bf54

080026c8 <_ZN21sensors_53l5a1_driver11reflectanceC1Ev>:
      _header_type header;
      typedef uint8_t _layer_type;
      _layer_type layer;
      uint8_t reflectance_in_percent[64];

    reflectance():
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
      header(),
      layer(0),
      reflectance_in_percent()
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe f8e8 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 80026d8:	4a0d      	ldr	r2, [pc, #52]	; (8002710 <_ZN21sensors_53l5a1_driver11reflectanceC1Ev+0x48>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	3304      	adds	r3, #4
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff f8ea 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	761a      	strb	r2, [r3, #24]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f103 0219 	add.w	r2, r3, #25
 80026f4:	233f      	movs	r3, #63	; 0x3f
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	db04      	blt.n	8002704 <_ZN21sensors_53l5a1_driver11reflectanceC1Ev+0x3c>
 80026fa:	2100      	movs	r1, #0
 80026fc:	7011      	strb	r1, [r2, #0]
 80026fe:	3201      	adds	r2, #1
 8002700:	3b01      	subs	r3, #1
 8002702:	e7f8      	b.n	80026f6 <_ZN21sensors_53l5a1_driver11reflectanceC1Ev+0x2e>
    {
    }
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	0800c20c 	.word	0x0800c20c

08002714 <_ZNK21sensors_53l5a1_driver11reflectance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	1d18      	adds	r0, r3, #4
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	4413      	add	r3, r2
 800272c:	4619      	mov	r1, r3
 800272e:	f7ff f8e5 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4413      	add	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->layer >> (8 * 0)) & 0xFF;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	4413      	add	r3, r2
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	7e12      	ldrb	r2, [r2, #24]
 8002744:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->layer);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	3301      	adds	r3, #1
 800274a:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 800274c:	2300      	movs	r3, #0
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b3f      	cmp	r3, #63	; 0x3f
 8002754:	d80f      	bhi.n	8002776 <_ZNK21sensors_53l5a1_driver11reflectance9serializeEPh+0x62>
      *(outbuffer + offset + 0) = (this->reflectance_in_percent[i] >> (8 * 0)) & 0xFF;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	4413      	add	r3, r2
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	440a      	add	r2, r1
 8002762:	3219      	adds	r2, #25
 8002764:	7812      	ldrb	r2, [r2, #0]
 8002766:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->reflectance_in_percent[i]);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	3301      	adds	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3301      	adds	r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	e7ec      	b.n	8002750 <_ZNK21sensors_53l5a1_driver11reflectance9serializeEPh+0x3c>
      }
      return offset;
 8002776:	68fb      	ldr	r3, [r7, #12]
    }
 8002778:	4618      	mov	r0, r3
 800277a:	3710      	adds	r7, #16
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <_ZN21sensors_53l5a1_driver11reflectance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800278a:	2300      	movs	r3, #0
 800278c:	60fb      	str	r3, [r7, #12]
      offset += this->header.deserialize(inbuffer + offset);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	1d18      	adds	r0, r3, #4
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	4413      	add	r3, r2
 8002798:	4619      	mov	r1, r3
 800279a:	f7ff f947 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 800279e:	4602      	mov	r2, r0
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4413      	add	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
      this->layer =  ((uint8_t) (*(inbuffer + offset)));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4413      	add	r3, r2
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->layer);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	3301      	adds	r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 80027b8:	2300      	movs	r3, #0
 80027ba:	60bb      	str	r3, [r7, #8]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b3f      	cmp	r3, #63	; 0x3f
 80027c0:	d810      	bhi.n	80027e4 <_ZN21sensors_53l5a1_driver11reflectance11deserializeEPh+0x64>
      this->reflectance_in_percent[i] =  ((uint8_t) (*(inbuffer + offset)));
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	4413      	add	r3, r2
 80027c8:	7819      	ldrb	r1, [r3, #0]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4413      	add	r3, r2
 80027d0:	3319      	adds	r3, #25
 80027d2:	460a      	mov	r2, r1
 80027d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->reflectance_in_percent[i]);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3301      	adds	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
      for( uint32_t i = 0; i < 64; i++){
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3301      	adds	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	e7eb      	b.n	80027bc <_ZN21sensors_53l5a1_driver11reflectance11deserializeEPh+0x3c>
      }
     return offset;
 80027e4:	68fb      	ldr	r3, [r7, #12]
    }
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <_ZN21sensors_53l5a1_driver11reflectance7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/reflectance"; };
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	4b03      	ldr	r3, [pc, #12]	; (8002808 <_ZN21sensors_53l5a1_driver11reflectance7getTypeEv+0x18>)
 80027fa:	4618      	mov	r0, r3
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	0800bf78 	.word	0x0800bf78

0800280c <_ZN21sensors_53l5a1_driver11reflectance6getMD5Ev>:
    virtual const char * getMD5() override { return "8f3eba0570aa10ad6cf86060e770041e"; };
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <_ZN21sensors_53l5a1_driver11reflectance6getMD5Ev+0x18>)
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	0800bf9c 	.word	0x0800bf9c

08002828 <_ZN21sensors_53l5a1_driver7controlC1Ev>:
      typedef uint8_t _sharpener_in_percent_type;
      _sharpener_in_percent_type sharpener_in_percent;
      typedef uint16_t _integration_time_type;
      _integration_time_type integration_time;

    control():
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
      sensor_to_sleep(0),
      resolution_4x4(0),
      order_by_strongest(0),
      ranging_frequency(0),
      sharpener_in_percent(0),
      integration_time(0)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe f838 	bl	80008a8 <_ZN3ros3MsgC1Ev>
 8002838:	4a12      	ldr	r2, [pc, #72]	; (8002884 <_ZN21sensors_53l5a1_driver7controlC1Ev+0x5c>)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3304      	adds	r3, #4
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff f83a 	bl	80018bc <_ZN8std_msgs6HeaderC1Ev>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	761a      	strb	r2, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	765a      	strb	r2, [r3, #25]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	769a      	strb	r2, [r3, #26]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	76da      	strb	r2, [r3, #27]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	771a      	strb	r2, [r3, #28]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	775a      	strb	r2, [r3, #29]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	779a      	strb	r2, [r3, #30]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	841a      	strh	r2, [r3, #32]
    {
    }
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	0800c1f4 	.word	0x0800c1f4

08002888 <_ZNK21sensors_53l5a1_driver7control9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002888:	b580      	push	{r7, lr}
 800288a:	b088      	sub	sp, #32
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      offset += this->header.serialize(outbuffer + offset);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	1d18      	adds	r0, r3, #4
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4619      	mov	r1, r3
 80028a2:	f7ff f82b 	bl	80018fc <_ZNK8std_msgs6Header9serializeEPh>
 80028a6:	4602      	mov	r2, r0
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	4413      	add	r3, r2
 80028ac:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_mode_continuous;
      u_mode_continuous.real = this->mode_continuous;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7e1b      	ldrb	r3, [r3, #24]
 80028b2:	763b      	strb	r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_mode_continuous.base >> (8 * 0)) & 0xFF;
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	7e3a      	ldrb	r2, [r7, #24]
 80028bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->mode_continuous);
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_power_on;
      u_power_on.real = this->power_on;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	7e5b      	ldrb	r3, [r3, #25]
 80028c8:	753b      	strb	r3, [r7, #20]
      *(outbuffer + offset + 0) = (u_power_on.base >> (8 * 0)) & 0xFF;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	7d3a      	ldrb	r2, [r7, #20]
 80028d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->power_on);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	3301      	adds	r3, #1
 80028d8:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_sensor_to_sleep;
      u_sensor_to_sleep.real = this->sensor_to_sleep;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7e9b      	ldrb	r3, [r3, #26]
 80028de:	743b      	strb	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_sensor_to_sleep.base >> (8 * 0)) & 0xFF;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	7c3a      	ldrb	r2, [r7, #16]
 80028e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->sensor_to_sleep);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_resolution_4x4;
      u_resolution_4x4.real = this->resolution_4x4;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	7edb      	ldrb	r3, [r3, #27]
 80028f4:	733b      	strb	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_resolution_4x4.base >> (8 * 0)) & 0xFF;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	7b3a      	ldrb	r2, [r7, #12]
 80028fe:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->resolution_4x4);
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3301      	adds	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_order_by_strongest;
      u_order_by_strongest.real = this->order_by_strongest;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7f1b      	ldrb	r3, [r3, #28]
 800290a:	723b      	strb	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_order_by_strongest.base >> (8 * 0)) & 0xFF;
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	4413      	add	r3, r2
 8002912:	7a3a      	ldrb	r2, [r7, #8]
 8002914:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->order_by_strongest);
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->ranging_frequency >> (8 * 0)) & 0xFF;
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	4413      	add	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	7f52      	ldrb	r2, [r2, #29]
 8002926:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ranging_frequency);
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	3301      	adds	r3, #1
 800292c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->sharpener_in_percent >> (8 * 0)) & 0xFF;
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	4413      	add	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	7f92      	ldrb	r2, [r2, #30]
 8002938:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->sharpener_in_percent);
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3301      	adds	r3, #1
 800293e:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->integration_time >> (8 * 0)) & 0xFF;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	8c19      	ldrh	r1, [r3, #32]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	4413      	add	r3, r2
 800294a:	b2ca      	uxtb	r2, r1
 800294c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->integration_time >> (8 * 1)) & 0xFF;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8c1b      	ldrh	r3, [r3, #32]
 8002952:	0a1b      	lsrs	r3, r3, #8
 8002954:	b299      	uxth	r1, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	4413      	add	r3, r2
 800295e:	b2ca      	uxtb	r2, r1
 8002960:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->integration_time);
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3302      	adds	r3, #2
 8002966:	61fb      	str	r3, [r7, #28]
      return offset;
 8002968:	69fb      	ldr	r3, [r7, #28]
    }
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_ZN21sensors_53l5a1_driver7control11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002972:	b580      	push	{r7, lr}
 8002974:	b088      	sub	sp, #32
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	61fb      	str	r3, [r7, #28]
      offset += this->header.deserialize(inbuffer + offset);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	1d18      	adds	r0, r3, #4
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4413      	add	r3, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7ff f84e 	bl	8001a2c <_ZN8std_msgs6Header11deserializeEPh>
 8002990:	4602      	mov	r2, r0
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	4413      	add	r3, r2
 8002996:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_mode_continuous;
      u_mode_continuous.base = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	763b      	strb	r3, [r7, #24]
      u_mode_continuous.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800299c:	7e3a      	ldrb	r2, [r7, #24]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	6839      	ldr	r1, [r7, #0]
 80029a2:	440b      	add	r3, r1
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	763b      	strb	r3, [r7, #24]
      this->mode_continuous = u_mode_continuous.real;
 80029ac:	7e3a      	ldrb	r2, [r7, #24]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	761a      	strb	r2, [r3, #24]
      offset += sizeof(this->mode_continuous);
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	3301      	adds	r3, #1
 80029b6:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_power_on;
      u_power_on.base = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	753b      	strb	r3, [r7, #20]
      u_power_on.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029bc:	7d3a      	ldrb	r2, [r7, #20]
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	440b      	add	r3, r1
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	753b      	strb	r3, [r7, #20]
      this->power_on = u_power_on.real;
 80029cc:	7d3a      	ldrb	r2, [r7, #20]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	765a      	strb	r2, [r3, #25]
      offset += sizeof(this->power_on);
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3301      	adds	r3, #1
 80029d6:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_sensor_to_sleep;
      u_sensor_to_sleep.base = 0;
 80029d8:	2300      	movs	r3, #0
 80029da:	743b      	strb	r3, [r7, #16]
      u_sensor_to_sleep.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029dc:	7c3a      	ldrb	r2, [r7, #16]
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	6839      	ldr	r1, [r7, #0]
 80029e2:	440b      	add	r3, r1
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	743b      	strb	r3, [r7, #16]
      this->sensor_to_sleep = u_sensor_to_sleep.real;
 80029ec:	7c3a      	ldrb	r2, [r7, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	769a      	strb	r2, [r3, #26]
      offset += sizeof(this->sensor_to_sleep);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3301      	adds	r3, #1
 80029f6:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_resolution_4x4;
      u_resolution_4x4.base = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	733b      	strb	r3, [r7, #12]
      u_resolution_4x4.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80029fc:	7b3a      	ldrb	r2, [r7, #12]
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	6839      	ldr	r1, [r7, #0]
 8002a02:	440b      	add	r3, r1
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	733b      	strb	r3, [r7, #12]
      this->resolution_4x4 = u_resolution_4x4.real;
 8002a0c:	7b3a      	ldrb	r2, [r7, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	76da      	strb	r2, [r3, #27]
      offset += sizeof(this->resolution_4x4);
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3301      	adds	r3, #1
 8002a16:	61fb      	str	r3, [r7, #28]
      union {
        bool real;
        uint8_t base;
      } u_order_by_strongest;
      u_order_by_strongest.base = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	723b      	strb	r3, [r7, #8]
      u_order_by_strongest.base |= ((uint8_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a1c:	7a3a      	ldrb	r2, [r7, #8]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	6839      	ldr	r1, [r7, #0]
 8002a22:	440b      	add	r3, r1
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	723b      	strb	r3, [r7, #8]
      this->order_by_strongest = u_order_by_strongest.real;
 8002a2c:	7a3a      	ldrb	r2, [r7, #8]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	771a      	strb	r2, [r3, #28]
      offset += sizeof(this->order_by_strongest);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
      this->ranging_frequency =  ((uint8_t) (*(inbuffer + offset)));
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	775a      	strb	r2, [r3, #29]
      offset += sizeof(this->ranging_frequency);
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	3301      	adds	r3, #1
 8002a48:	61fb      	str	r3, [r7, #28]
      this->sharpener_in_percent =  ((uint8_t) (*(inbuffer + offset)));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	683a      	ldr	r2, [r7, #0]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781a      	ldrb	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	779a      	strb	r2, [r3, #30]
      offset += sizeof(this->sharpener_in_percent);
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
      this->integration_time =  ((uint16_t) (*(inbuffer + offset)));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	4413      	add	r3, r2
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	841a      	strh	r2, [r3, #32]
      this->integration_time |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8c1b      	ldrh	r3, [r3, #32]
 8002a6e:	b21a      	sxth	r2, r3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	3301      	adds	r3, #1
 8002a74:	6839      	ldr	r1, [r7, #0]
 8002a76:	440b      	add	r3, r1
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	021b      	lsls	r3, r3, #8
 8002a7c:	b21b      	sxth	r3, r3
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	841a      	strh	r2, [r3, #32]
      offset += sizeof(this->integration_time);
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	3302      	adds	r3, #2
 8002a8c:	61fb      	str	r3, [r7, #28]
     return offset;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
    }
 8002a90:	4618      	mov	r0, r3
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <_ZN21sensors_53l5a1_driver7control7getTypeEv>:

    virtual const char * getType() override { return "sensors_53l5a1_driver/control"; };
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <_ZN21sensors_53l5a1_driver7control7getTypeEv+0x18>)
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	0800bfc0 	.word	0x0800bfc0

08002ab4 <_ZN21sensors_53l5a1_driver7control6getMD5Ev>:
    virtual const char * getMD5() override { return "98b89d8dccdc25adb8f736b1958253c5"; };
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <_ZN21sensors_53l5a1_driver7control6getMD5Ev+0x18>)
 8002abe:	4618      	mov	r0, r3
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	0800bfe0 	.word	0x0800bfe0

08002ad0 <_Z10reset_msgsv>:
 * @details
 * e.g. distance -> max distance, reflectance -> 0
 **************************************************************************************************
 */
void reset_msgs(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	memset((uint8_t*)msg_ambient.ambient_per_spad, 0,
 8002ad4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4812      	ldr	r0, [pc, #72]	; (8002b24 <_Z10reset_msgsv+0x54>)
 8002adc:	f008 ff8a 	bl	800b9f4 <memset>
			sizeof(msg_ambient.ambient_per_spad));
	memset((uint8_t*)msg_n_spads.number_spads_enabled, 0,
 8002ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4810      	ldr	r0, [pc, #64]	; (8002b28 <_Z10reset_msgsv+0x58>)
 8002ae8:	f008 ff84 	bl	800b9f4 <memset>
			sizeof(msg_n_spads.number_spads_enabled));
	memset((uint8_t*)msg_s_spad.signal_per_spad, 0,
 8002aec:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002af0:	2100      	movs	r1, #0
 8002af2:	480e      	ldr	r0, [pc, #56]	; (8002b2c <_Z10reset_msgsv+0x5c>)
 8002af4:	f008 ff7e 	bl	800b9f4 <memset>
			sizeof(msg_s_spad.signal_per_spad));
	memset((uint8_t*)msg_distance.distance_mm, 0xFF,
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	21ff      	movs	r1, #255	; 0xff
 8002afc:	480c      	ldr	r0, [pc, #48]	; (8002b30 <_Z10reset_msgsv+0x60>)
 8002afe:	f008 ff79 	bl	800b9f4 <memset>
			sizeof(msg_distance.distance_mm));
	memset((uint8_t*)msg_sigma.sigma_mm, 0xFF,
 8002b02:	2280      	movs	r2, #128	; 0x80
 8002b04:	21ff      	movs	r1, #255	; 0xff
 8002b06:	480b      	ldr	r0, [pc, #44]	; (8002b34 <_Z10reset_msgsv+0x64>)
 8002b08:	f008 ff74 	bl	800b9f4 <memset>
			sizeof(msg_distance.distance_mm));
	memset((uint8_t*)msg_reflect.reflectance_in_percent, 0,
 8002b0c:	2240      	movs	r2, #64	; 0x40
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4809      	ldr	r0, [pc, #36]	; (8002b38 <_Z10reset_msgsv+0x68>)
 8002b12:	f008 ff6f 	bl	800b9f4 <memset>
			sizeof(msg_reflect.reflectance_in_percent));
	memset((uint8_t*)msg_t_status.target_status, 0xFF,
 8002b16:	2240      	movs	r2, #64	; 0x40
 8002b18:	21ff      	movs	r1, #255	; 0xff
 8002b1a:	4808      	ldr	r0, [pc, #32]	; (8002b3c <_Z10reset_msgsv+0x6c>)
 8002b1c:	f008 ff6a 	bl	800b9f4 <memset>
			sizeof(msg_t_status.target_status));
}
 8002b20:	bf00      	nop
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000af0 	.word	0x20000af0
 8002b28:	20000c08 	.word	0x20000c08
 8002b2c:	20000d24 	.word	0x20000d24
 8002b30:	20000e3e 	.word	0x20000e3e
 8002b34:	20000eda 	.word	0x20000eda
 8002b38:	20000f75 	.word	0x20000f75
 8002b3c:	20000fd1 	.word	0x20000fd1

08002b40 <_Z9messageCbRKN8std_msgs5EmptyE>:
/**
 **************************************************************************************************
 * @biref messageCb(): Toggle green LED -> Debug: See if device is still alive
 **************************************************************************************************
 */
void messageCb( const std_msgs::Empty& toggle_msg){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002b48:	2120      	movs	r1, #32
 8002b4a:	4803      	ldr	r0, [pc, #12]	; (8002b58 <_Z9messageCbRKN8std_msgs5EmptyE+0x18>)
 8002b4c:	f006 f8e1 	bl	8008d12 <HAL_GPIO_TogglePin>
}
 8002b50:	bf00      	nop
 8002b52:	3708      	adds	r7, #8
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40020000 	.word	0x40020000

08002b5c <_Z10control_cbRKN21sensors_53l5a1_driver7controlE>:
/**
 **************************************************************************************************
 * @brief control_cb(): Receive commands from ROS and change sensor settings
 **************************************************************************************************
 */
void control_cb (const sensors_53l5a1_driver::control& msg){
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
	uint8_t valid_param = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	73fb      	strb	r3, [r7, #15]

	/* Ignore any messages in initialization */
	if (init)
 8002b68:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x180>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f040 80ab 	bne.w	8002cd4 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x178>
		return;

	/* Needed due to driver, always stays enabled */
	Profile.EnableAmbient = 1; /* Enable: 1, Disable: 0 */
 8002b7e:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	60da      	str	r2, [r3, #12]
	Profile.EnableSignal = 1; /* Enable: 1, Disable: 0 */
 8002b84:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	611a      	str	r2, [r3, #16]

	/* Stop sensor before applying settings */
	VL53L5A1_RANGING_SENSOR_Stop(VL53L5A1_DEV_CENTER);
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f002 f818 	bl	8004bc0 <VL53L5A1_RANGING_SENSOR_Stop>

	/* Change resolution and mode (parameters are dependent on each other)*/
	if (msg.resolution_4x4 && msg.mode_continuous)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	7edb      	ldrb	r3, [r3, #27]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x4c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7e1b      	ldrb	r3, [r3, #24]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x4c>
		Profile.RangingProfile = RS_PROFILE_4x4_CONTINUOUS;
 8002ba0:	4b4f      	ldr	r3, [pc, #316]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e01a      	b.n	8002bde <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x82>
	else if (msg.resolution_4x4 && (msg.mode_continuous == 0) )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	7edb      	ldrb	r3, [r3, #27]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d007      	beq.n	8002bc0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x64>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	7e1b      	ldrb	r3, [r3, #24]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d103      	bne.n	8002bc0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x64>
		Profile.RangingProfile = RS_PROFILE_4x4_AUTONOMOUS;
 8002bb8:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002bba:	2202      	movs	r2, #2
 8002bbc:	601a      	str	r2, [r3, #0]
 8002bbe:	e00e      	b.n	8002bde <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x82>
	else if ( (msg.resolution_4x4 == 0) && msg.mode_continuous)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	7edb      	ldrb	r3, [r3, #27]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d107      	bne.n	8002bd8 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x7c>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	7e1b      	ldrb	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x7c>
		Profile.RangingProfile = RS_PROFILE_8x8_CONTINUOUS;
 8002bd0:	4b43      	ldr	r3, [pc, #268]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e002      	b.n	8002bde <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x82>
	else
		Profile.RangingProfile = RS_PROFILE_8x8_AUTONOMOUS;
 8002bd8:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002bda:	2204      	movs	r2, #4
 8002bdc:	601a      	str	r2, [r3, #0]

	/* check if frequency input is valid */
	if (msg.ranging_frequency > 0 && msg.ranging_frequency <= 60) {
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	7f5b      	ldrb	r3, [r3, #29]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d018      	beq.n	8002c18 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xbc>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7f5b      	ldrb	r3, [r3, #29]
 8002bea:	2b3c      	cmp	r3, #60	; 0x3c
 8002bec:	d814      	bhi.n	8002c18 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xbc>
		if (msg.resolution_4x4 == 0 && msg.ranging_frequency <= 15)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7edb      	ldrb	r3, [r3, #27]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xa8>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7f5b      	ldrb	r3, [r3, #29]
 8002bfa:	2b0f      	cmp	r3, #15
 8002bfc:	d802      	bhi.n	8002c04 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xa8>
			valid_param = 1;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
		if (msg.resolution_4x4 == 0 && msg.ranging_frequency <= 15)
 8002c02:	e00b      	b.n	8002c1c <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xc0>
		else if (msg.resolution_4x4)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7edb      	ldrb	r3, [r3, #27]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xb6>
			valid_param = 1;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
		if (msg.resolution_4x4 == 0 && msg.ranging_frequency <= 15)
 8002c10:	e004      	b.n	8002c1c <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xc0>
		else
			valid_param = 0;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
		if (msg.resolution_4x4 == 0 && msg.ranging_frequency <= 15)
 8002c16:	e001      	b.n	8002c1c <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xc0>
	} else
		valid_param = 0;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]

	/* Apply frequency input or set default */
	if (valid_param)
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d005      	beq.n	8002c2e <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xd2>
		Profile.Frequency = msg.ranging_frequency;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	7f5b      	ldrb	r3, [r3, #29]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b2d      	ldr	r3, [pc, #180]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e002      	b.n	8002c34 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xd8>
	else
		Profile.Frequency = 15;
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002c30:	220f      	movs	r2, #15
 8002c32:	609a      	str	r2, [r3, #8]

	/* Check if integration time is valid and apply or set default */
	if (msg.mode_continuous == 0 && msg.integration_time > 1 && msg.integration_time >= 1000)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7e1b      	ldrb	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10e      	bne.n	8002c5a <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xfe>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	8c1b      	ldrh	r3, [r3, #32]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d90a      	bls.n	8002c5a <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xfe>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	8c1b      	ldrh	r3, [r3, #32]
 8002c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4c:	d305      	bcc.n	8002c5a <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0xfe>
		Profile.TimingBudget = msg.integration_time;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	8c1b      	ldrh	r3, [r3, #32]
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b22      	ldr	r3, [pc, #136]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	e002      	b.n	8002c60 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x104>
	else
		Profile.TimingBudget = 5;
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	605a      	str	r2, [r3, #4]

	/* Set target order (low level api accessed) */
	if (msg.order_by_strongest)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7f1b      	ldrb	r3, [r3, #28]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x11a>
		vl53l5cx_set_target_order(ll_sensor_dev, VL53L5CX_TARGET_ORDER_STRONGEST);
 8002c68:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x188>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f003 fe82 	bl	8006978 <vl53l5cx_set_target_order>
 8002c74:	e005      	b.n	8002c82 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x126>
	else
		vl53l5cx_set_target_order(ll_sensor_dev, VL53L5CX_TARGET_ORDER_CLOSEST);
 8002c76:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x188>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 fe7b 	bl	8006978 <vl53l5cx_set_target_order>

	/* Set sharpener (low level api accessed) */
	if (msg.sharpener_in_percent >= 0 && msg.sharpener_in_percent < 100)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7f9b      	ldrb	r3, [r3, #30]
 8002c86:	2b63      	cmp	r3, #99	; 0x63
 8002c88:	d808      	bhi.n	8002c9c <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x140>
		vl53l5cx_set_sharpener_percent(ll_sensor_dev, msg.sharpener_in_percent);
 8002c8a:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x188>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	7f9b      	ldrb	r3, [r3, #30]
 8002c92:	4619      	mov	r1, r3
 8002c94:	4610      	mov	r0, r2
 8002c96:	f003 fe37 	bl	8006908 <vl53l5cx_set_sharpener_percent>
 8002c9a:	e005      	b.n	8002ca8 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x14c>
	else
		vl53l5cx_set_sharpener_percent(ll_sensor_dev, (uint8_t)5);
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x188>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2105      	movs	r1, #5
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f003 fe30 	bl	8006908 <vl53l5cx_set_sharpener_percent>

	/* Put sensor to deep sleep */
	if (msg.sensor_to_sleep)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	7e9b      	ldrb	r3, [r3, #26]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x15e>
		VL53L5A1_RANGING_SENSOR_SetPowerMode(VL53L5A1_DEV_CENTER, RANGING_SENSOR_POWERMODE_SLEEP);
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f001 ffaa 	bl	8004c0c <VL53L5A1_RANGING_SENSOR_SetPowerMode>
 8002cb8:	e00d      	b.n	8002cd6 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x17a>
	else {
		VL53L5A1_RANGING_SENSOR_SetPowerMode(VL53L5A1_DEV_CENTER, RANGING_SENSOR_POWERMODE_WAKEUP);
 8002cba:	2101      	movs	r1, #1
 8002cbc:	2001      	movs	r0, #1
 8002cbe:	f001 ffa5 	bl	8004c0c <VL53L5A1_RANGING_SENSOR_SetPowerMode>
		/* Apply settings and restart ranging */
		VL53L5A1_RANGING_SENSOR_ConfigProfile(VL53L5A1_DEV_CENTER, &Profile);
 8002cc2:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x184>)
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f001 ff2b 	bl	8004b20 <VL53L5A1_RANGING_SENSOR_ConfigProfile>
		VL53L5A1_RANGING_SENSOR_Start(VL53L5A1_DEV_CENTER, RS_MODE_BLOCKING_CONTINUOUS);
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f001 ff4f 	bl	8004b70 <VL53L5A1_RANGING_SENSOR_Start>
 8002cd2:	e000      	b.n	8002cd6 <_Z10control_cbRKN21sensors_53l5a1_driver7controlE+0x17a>
		return;
 8002cd4:	bf00      	nop
	}
}
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20005364 	.word	0x20005364
 8002ce4:	2000537c 	.word	0x2000537c

08002ce8 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr
 8002d04:	0800c2fc 	.word	0x0800c2fc

08002d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff ffe8 	bl	8002ce8 <_ZN3ros15NodeHandleBase_C1Ev>
 8002d18:	4a47      	ldr	r2, [pc, #284]	; (8002e38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x130>)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	3304      	adds	r3, #4
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fc4a 	bl	80015bc <_ZN13STM32HardwareC1Ev>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002d2e:	3314      	adds	r3, #20
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002d3a:	3318      	adds	r3, #24
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002d46:	331c      	adds	r3, #28
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d64:	461a      	mov	r2, r3
 8002d66:	2100      	movs	r1, #0
 8002d68:	f008 fe44 	bl	800b9f4 <memset>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8002d72:	3304      	adds	r3, #4
 8002d74:	4618      	mov	r0, r3
 8002d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	f008 fe39 	bl	800b9f4 <memset>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f503 53b1 	add.w	r3, r3, #5664	; 0x1620
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	2364      	movs	r3, #100	; 0x64
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2100      	movs	r1, #0
 8002d92:	f008 fe2f 	bl	800b9f4 <memset>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f503 53b4 	add.w	r3, r3, #5760	; 0x1680
 8002d9c:	3308      	adds	r3, #8
 8002d9e:	4618      	mov	r0, r3
 8002da0:	2364      	movs	r3, #100	; 0x64
 8002da2:	461a      	mov	r2, r3
 8002da4:	2100      	movs	r1, #0
 8002da6:	f008 fe25 	bl	800b9f4 <memset>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8002db0:	330c      	adds	r3, #12
 8002db2:	2200      	movs	r2, #0
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8002dc8:	3314      	adds	r3, #20
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8002dd4:	3318      	adds	r3, #24
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8002de0:	331c      	adds	r3, #28
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002df6:	3304      	adds	r3, #4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002e02:	3308      	adds	r3, #8
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002e0e:	330c      	adds	r3, #12
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002e1a:	3310      	adds	r3, #16
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8002e26:	3314      	adds	r3, #20
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe f8b1 	bl	8000f90 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	0800c1e0 	.word	0x0800c1e0

08002e3c <HAL_UART_TxCpltCallback>:
ros::Publisher pub_t_status	(topic_t_status, 	&msg_t_status);
ros::Subscriber<std_msgs::Empty> sub("toggle_led", messageCb );
ros::Subscriber<sensors_53l5a1_driver::control>  sub_control (topic_control,  control_cb);

/* rosserial communication */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	nh.getHardware()->flush();
 8002e44:	4805      	ldr	r0, [pc, #20]	; (8002e5c <HAL_UART_TxCpltCallback+0x20>)
 8002e46:	f000 fa83 	bl	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7fe fc1f 	bl	8001690 <_ZN13STM32Hardware5flushEv>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20001018 	.word	0x20001018

08002e60 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	nh.getHardware()->reset_rbuf();
 8002e68:	4805      	ldr	r0, [pc, #20]	; (8002e80 <HAL_UART_RxCpltCallback+0x20>)
 8002e6a:	f000 fa71 	bl	8003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fe fbce 	bl	8001612 <_ZN13STM32Hardware10reset_rbufEv>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20001018 	.word	0x20001018

08002e84 <setup>:
 **************************************************************************************************
 * @brief setup(): Setup rosserial for communication
 **************************************************************************************************
 */
void setup(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
	nh.initNode();
 8002e88:	4814      	ldr	r0, [pc, #80]	; (8002edc <setup+0x58>)
 8002e8a:	f000 fa6d 	bl	8003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.subscribe(sub);
 8002e8e:	4914      	ldr	r1, [pc, #80]	; (8002ee0 <setup+0x5c>)
 8002e90:	4812      	ldr	r0, [pc, #72]	; (8002edc <setup+0x58>)
 8002e92:	f000 fa8e 	bl	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.subscribe(sub_control);
 8002e96:	4913      	ldr	r1, [pc, #76]	; (8002ee4 <setup+0x60>)
 8002e98:	4810      	ldr	r0, [pc, #64]	; (8002edc <setup+0x58>)
 8002e9a:	f000 fa8a 	bl	80033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
	nh.advertise(pub_ambient);
 8002e9e:	4912      	ldr	r1, [pc, #72]	; (8002ee8 <setup+0x64>)
 8002ea0:	480e      	ldr	r0, [pc, #56]	; (8002edc <setup+0x58>)
 8002ea2:	f000 fab1 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_n_spads);
 8002ea6:	4911      	ldr	r1, [pc, #68]	; (8002eec <setup+0x68>)
 8002ea8:	480c      	ldr	r0, [pc, #48]	; (8002edc <setup+0x58>)
 8002eaa:	f000 faad 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_s_spad);
 8002eae:	4910      	ldr	r1, [pc, #64]	; (8002ef0 <setup+0x6c>)
 8002eb0:	480a      	ldr	r0, [pc, #40]	; (8002edc <setup+0x58>)
 8002eb2:	f000 faa9 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_distance);
 8002eb6:	490f      	ldr	r1, [pc, #60]	; (8002ef4 <setup+0x70>)
 8002eb8:	4808      	ldr	r0, [pc, #32]	; (8002edc <setup+0x58>)
 8002eba:	f000 faa5 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_sigma);
 8002ebe:	490e      	ldr	r1, [pc, #56]	; (8002ef8 <setup+0x74>)
 8002ec0:	4806      	ldr	r0, [pc, #24]	; (8002edc <setup+0x58>)
 8002ec2:	f000 faa1 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_reflect);
 8002ec6:	490d      	ldr	r1, [pc, #52]	; (8002efc <setup+0x78>)
 8002ec8:	4804      	ldr	r0, [pc, #16]	; (8002edc <setup+0x58>)
 8002eca:	f000 fa9d 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
	nh.advertise(pub_t_status);
 8002ece:	490c      	ldr	r1, [pc, #48]	; (8002f00 <setup+0x7c>)
 8002ed0:	4802      	ldr	r0, [pc, #8]	; (8002edc <setup+0x58>)
 8002ed2:	f000 fa99 	bl	8003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20001018 	.word	0x20001018
 8002ee0:	200027e0 	.word	0x200027e0
 8002ee4:	200027f8 	.word	0x200027f8
 8002ee8:	20002754 	.word	0x20002754
 8002eec:	20002768 	.word	0x20002768
 8002ef0:	2000277c 	.word	0x2000277c
 8002ef4:	20002790 	.word	0x20002790
 8002ef8:	200027a4 	.word	0x200027a4
 8002efc:	200027b8 	.word	0x200027b8
 8002f00:	200027cc 	.word	0x200027cc

08002f04 <loop>:
 **************************************************************************************************
 * @brief loop(): Rosserial main program -> receive sensor data, convert, publish
 **************************************************************************************************
 */
void loop(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
	if (new_data) {
 8002f08:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <loop+0x2c>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d004      	beq.n	8002f26 <loop+0x22>
		new_data = 0;
 8002f1c:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <loop+0x2c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	701a      	strb	r2, [r3, #0]
		publish_msgs();
 8002f22:	f000 f809 	bl	8002f38 <_Z12publish_msgsv>
	}
	nh.spinOnce();
 8002f26:	4803      	ldr	r0, [pc, #12]	; (8002f34 <loop+0x30>)
 8002f28:	f000 fa9e 	bl	8003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
//	HAL_Delay(1);
}
 8002f2c:	bf00      	nop
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	200000d0 	.word	0x200000d0
 8002f34:	20001018 	.word	0x20001018

08002f38 <_Z12publish_msgsv>:
 **************************************************************************************************
 * @brief publish_msgs(): convert sensor data to message format and publish messages
 **************************************************************************************************
 */
void publish_msgs(void)
{
 8002f38:	b590      	push	{r4, r7, lr}
 8002f3a:	b089      	sub	sp, #36	; 0x24
 8002f3c:	af00      	add	r7, sp, #0
	uint8_t z = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	77fb      	strb	r3, [r7, #31]
	vl53l5cx_get_result_user(ll_sensor_obj, &Result_User);
 8002f42:	4ba2      	ldr	r3, [pc, #648]	; (80031cc <_Z12publish_msgsv+0x294>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	49a2      	ldr	r1, [pc, #648]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 fbd5 	bl	80046f8 <vl53l5cx_get_result_user>
	const char fid[] = "VL53L5CX_Sensor";
 8002f4e:	4ba1      	ldr	r3, [pc, #644]	; (80031d4 <_Z12publish_msgsv+0x29c>)
 8002f50:	1d3c      	adds	r4, r7, #4
 8002f52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/* clear previous contents of messages */
	reset_msgs();
 8002f58:	f7ff fdba 	bl	8002ad0 <_Z10reset_msgsv>
	/* turn on LED if object is closer than 50 mm */
	for (uint32_t i = 0; i < Result_User.NumberOfZones; ++i) {
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61bb      	str	r3, [r7, #24]
 8002f60:	4b9b      	ldr	r3, [pc, #620]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d219      	bcs.n	8002f9e <_Z12publish_msgsv+0x66>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2120      	movs	r1, #32
 8002f6e:	489a      	ldr	r0, [pc, #616]	; (80031d8 <_Z12publish_msgsv+0x2a0>)
 8002f70:	f005 feb6 	bl	8008ce0 <HAL_GPIO_WritePin>
		if (Result_User.ZoneResult[i].Distance[0] < 50) {
 8002f74:	4996      	ldr	r1, [pc, #600]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	440b      	add	r3, r1
 8002f82:	3306      	adds	r3, #6
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	2b31      	cmp	r3, #49	; 0x31
 8002f88:	d805      	bhi.n	8002f96 <_Z12publish_msgsv+0x5e>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	4892      	ldr	r0, [pc, #584]	; (80031d8 <_Z12publish_msgsv+0x2a0>)
 8002f90:	f005 fea6 	bl	8008ce0 <HAL_GPIO_WritePin>
			break;
 8002f94:	e003      	b.n	8002f9e <_Z12publish_msgsv+0x66>
	for (uint32_t i = 0; i < Result_User.NumberOfZones; ++i) {
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e7e0      	b.n	8002f60 <_Z12publish_msgsv+0x28>
		}
	}
	/* convert sensor data to message format */
	for (uint8_t l = 0; l < VL53L5CX_NB_TARGET_PER_ZONE; l++) {
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	75fb      	strb	r3, [r7, #23]
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	f200 80eb 	bhi.w	8003180 <_Z12publish_msgsv+0x248>
		for (uint8_t c = 0; c < VL53L5CX_RESOLUTION_8X8;) {
 8002faa:	2300      	movs	r3, #0
 8002fac:	75bb      	strb	r3, [r7, #22]
 8002fae:	7dbb      	ldrb	r3, [r7, #22]
 8002fb0:	2b3f      	cmp	r3, #63	; 0x3f
 8002fb2:	f200 8087 	bhi.w	80030c4 <_Z12publish_msgsv+0x18c>
			if (l == 0) {
 8002fb6:	7dfb      	ldrb	r3, [r7, #23]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d11b      	bne.n	8002ff4 <_Z12publish_msgsv+0xbc>
				msg_ambient.ambient_per_spad[c] = Result_User.ZoneResult[z].Ambient[0];
 8002fbc:	7ffa      	ldrb	r2, [r7, #31]
 8002fbe:	7db9      	ldrb	r1, [r7, #22]
 8002fc0:	4883      	ldr	r0, [pc, #524]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4403      	add	r3, r0
 8002fcc:	330c      	adds	r3, #12
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	4882      	ldr	r0, [pc, #520]	; (80031dc <_Z12publish_msgsv+0x2a4>)
 8002fd2:	1d8b      	adds	r3, r1, #6
 8002fd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
				msg_n_spads.number_spads_enabled[c] = Result_User.ZoneResult[z].Spads[0];
 8002fd8:	7ffa      	ldrb	r2, [r7, #31]
 8002fda:	7db9      	ldrb	r1, [r7, #22]
 8002fdc:	487c      	ldr	r0, [pc, #496]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8002fde:	4613      	mov	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4403      	add	r3, r0
 8002fe8:	331c      	adds	r3, #28
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	487c      	ldr	r0, [pc, #496]	; (80031e0 <_Z12publish_msgsv+0x2a8>)
 8002fee:	1d8b      	adds	r3, r1, #6
 8002ff0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
			}
			msg_s_spad.signal_per_spad[c] = Result_User.ZoneResult[z].Signal[l];
 8002ff4:	7ffa      	ldrb	r2, [r7, #31]
 8002ff6:	7df8      	ldrb	r0, [r7, #23]
 8002ff8:	7db9      	ldrb	r1, [r7, #22]
 8002ffa:	4c75      	ldr	r4, [pc, #468]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4403      	add	r3, r0
 8003006:	3304      	adds	r3, #4
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	4423      	add	r3, r4
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	4875      	ldr	r0, [pc, #468]	; (80031e4 <_Z12publish_msgsv+0x2ac>)
 8003010:	1d8b      	adds	r3, r1, #6
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4403      	add	r3, r0
 8003016:	605a      	str	r2, [r3, #4]
			msg_distance.distance_mm[c] = Result_User.ZoneResult[z].Distance[l];
 8003018:	7ffa      	ldrb	r2, [r7, #31]
 800301a:	7df8      	ldrb	r0, [r7, #23]
 800301c:	7db9      	ldrb	r1, [r7, #22]
 800301e:	4c6c      	ldr	r4, [pc, #432]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4403      	add	r3, r0
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	4423      	add	r3, r4
 800302e:	88d8      	ldrh	r0, [r3, #6]
 8003030:	4a6d      	ldr	r2, [pc, #436]	; (80031e8 <_Z12publish_msgsv+0x2b0>)
 8003032:	f101 030c 	add.w	r3, r1, #12
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	4413      	add	r3, r2
 800303a:	4602      	mov	r2, r0
 800303c:	805a      	strh	r2, [r3, #2]
			msg_sigma.sigma_mm[c] = Result_User.ZoneResult[z].Sigma[l];
 800303e:	7ffa      	ldrb	r2, [r7, #31]
 8003040:	7df8      	ldrb	r0, [r7, #23]
 8003042:	7db9      	ldrb	r1, [r7, #22]
 8003044:	4c62      	ldr	r4, [pc, #392]	; (80031d0 <_Z12publish_msgsv+0x298>)
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4403      	add	r3, r0
 8003050:	3310      	adds	r3, #16
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4423      	add	r3, r4
 8003056:	8898      	ldrh	r0, [r3, #4]
 8003058:	4a64      	ldr	r2, [pc, #400]	; (80031ec <_Z12publish_msgsv+0x2b4>)
 800305a:	f101 030c 	add.w	r3, r1, #12
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4413      	add	r3, r2
 8003062:	4602      	mov	r2, r0
 8003064:	805a      	strh	r2, [r3, #2]
			msg_reflect.reflectance_in_percent[c] = Result_User.ZoneResult[z].Reflectance[l];
 8003066:	7ffa      	ldrb	r2, [r7, #31]
 8003068:	7df8      	ldrb	r0, [r7, #23]
 800306a:	7db9      	ldrb	r1, [r7, #22]
 800306c:	4c58      	ldr	r4, [pc, #352]	; (80031d0 <_Z12publish_msgsv+0x298>)
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4423      	add	r3, r4
 8003078:	4403      	add	r3, r0
 800307a:	3328      	adds	r3, #40	; 0x28
 800307c:	781a      	ldrb	r2, [r3, #0]
 800307e:	4b5c      	ldr	r3, [pc, #368]	; (80031f0 <_Z12publish_msgsv+0x2b8>)
 8003080:	440b      	add	r3, r1
 8003082:	765a      	strb	r2, [r3, #25]
			msg_t_status.target_status[c] = Result_User.ZoneResult[z].Status[l];
 8003084:	7ffa      	ldrb	r2, [r7, #31]
 8003086:	7df8      	ldrb	r0, [r7, #23]
 8003088:	7db9      	ldrb	r1, [r7, #22]
 800308a:	4c51      	ldr	r4, [pc, #324]	; (80031d0 <_Z12publish_msgsv+0x298>)
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	00db      	lsls	r3, r3, #3
 8003094:	4423      	add	r3, r4
 8003096:	4403      	add	r3, r0
 8003098:	330a      	adds	r3, #10
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <_Z12publish_msgsv+0x2bc>)
 800309e:	440b      	add	r3, r1
 80030a0:	765a      	strb	r2, [r3, #25]

			/* msg size is static 64, but resolution can be 16 or 64
			 * if it is 16, leave 3 fields empty (reset value) inbetween values
			 * makes a lot more sense to keep it that way
			 */
			if (Result_User.NumberOfZones == VL53L5CX_RESOLUTION_4X4) {
 80030a2:	4b4b      	ldr	r3, [pc, #300]	; (80031d0 <_Z12publish_msgsv+0x298>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d106      	bne.n	80030b8 <_Z12publish_msgsv+0x180>
				c += 4;
 80030aa:	7dbb      	ldrb	r3, [r7, #22]
 80030ac:	3304      	adds	r3, #4
 80030ae:	75bb      	strb	r3, [r7, #22]
				z = c / 4;
 80030b0:	7dbb      	ldrb	r3, [r7, #22]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	77fb      	strb	r3, [r7, #31]
 80030b6:	e77a      	b.n	8002fae <_Z12publish_msgsv+0x76>
			} else {
				++c;
 80030b8:	7dbb      	ldrb	r3, [r7, #22]
 80030ba:	3301      	adds	r3, #1
 80030bc:	75bb      	strb	r3, [r7, #22]
				z = c;
 80030be:	7dbb      	ldrb	r3, [r7, #22]
 80030c0:	77fb      	strb	r3, [r7, #31]
		for (uint8_t c = 0; c < VL53L5CX_RESOLUTION_8X8;) {
 80030c2:	e774      	b.n	8002fae <_Z12publish_msgsv+0x76>
			}
		}
		/* prepare message headers */
		msg_s_spad.header.frame_id 	= fid;
 80030c4:	4a47      	ldr	r2, [pc, #284]	; (80031e4 <_Z12publish_msgsv+0x2ac>)
 80030c6:	1d3b      	adds	r3, r7, #4
 80030c8:	6153      	str	r3, [r2, #20]
		msg_s_spad.header.seq		= seq;
 80030ca:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a45      	ldr	r2, [pc, #276]	; (80031e4 <_Z12publish_msgsv+0x2ac>)
 80030d0:	6093      	str	r3, [r2, #8]
		msg_s_spad.layer			= l;
 80030d2:	4a44      	ldr	r2, [pc, #272]	; (80031e4 <_Z12publish_msgsv+0x2ac>)
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	7613      	strb	r3, [r2, #24]

		msg_distance.header.frame_id = fid;
 80030d8:	4a43      	ldr	r2, [pc, #268]	; (80031e8 <_Z12publish_msgsv+0x2b0>)
 80030da:	1d3b      	adds	r3, r7, #4
 80030dc:	6153      	str	r3, [r2, #20]
		msg_distance.header.seq		= seq;
 80030de:	4b46      	ldr	r3, [pc, #280]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a41      	ldr	r2, [pc, #260]	; (80031e8 <_Z12publish_msgsv+0x2b0>)
 80030e4:	6093      	str	r3, [r2, #8]
		msg_distance.layer			= l;
 80030e6:	4a40      	ldr	r2, [pc, #256]	; (80031e8 <_Z12publish_msgsv+0x2b0>)
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	7613      	strb	r3, [r2, #24]
		msg_distance.resolution		= Result_User.NumberOfZones;
 80030ec:	4b38      	ldr	r3, [pc, #224]	; (80031d0 <_Z12publish_msgsv+0x298>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <_Z12publish_msgsv+0x2b0>)
 80030f4:	765a      	strb	r2, [r3, #25]

		msg_sigma.header.frame_id 	= fid;
 80030f6:	4a3d      	ldr	r2, [pc, #244]	; (80031ec <_Z12publish_msgsv+0x2b4>)
 80030f8:	1d3b      	adds	r3, r7, #4
 80030fa:	6153      	str	r3, [r2, #20]
		msg_sigma.header.seq		= seq;
 80030fc:	4b3e      	ldr	r3, [pc, #248]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a3a      	ldr	r2, [pc, #232]	; (80031ec <_Z12publish_msgsv+0x2b4>)
 8003102:	6093      	str	r3, [r2, #8]
		msg_sigma.layer				= l;
 8003104:	4a39      	ldr	r2, [pc, #228]	; (80031ec <_Z12publish_msgsv+0x2b4>)
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	7613      	strb	r3, [r2, #24]

		msg_reflect.header.frame_id = fid;
 800310a:	4a39      	ldr	r2, [pc, #228]	; (80031f0 <_Z12publish_msgsv+0x2b8>)
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	6153      	str	r3, [r2, #20]
		msg_reflect.header.seq		= seq;
 8003110:	4b39      	ldr	r3, [pc, #228]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a36      	ldr	r2, [pc, #216]	; (80031f0 <_Z12publish_msgsv+0x2b8>)
 8003116:	6093      	str	r3, [r2, #8]
		msg_reflect.layer			= l;
 8003118:	4a35      	ldr	r2, [pc, #212]	; (80031f0 <_Z12publish_msgsv+0x2b8>)
 800311a:	7dfb      	ldrb	r3, [r7, #23]
 800311c:	7613      	strb	r3, [r2, #24]

		msg_t_status.header.frame_id = fid;
 800311e:	4a35      	ldr	r2, [pc, #212]	; (80031f4 <_Z12publish_msgsv+0x2bc>)
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	6153      	str	r3, [r2, #20]
		msg_t_status.header.seq		= seq;
 8003124:	4b34      	ldr	r3, [pc, #208]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a32      	ldr	r2, [pc, #200]	; (80031f4 <_Z12publish_msgsv+0x2bc>)
 800312a:	6093      	str	r3, [r2, #8]
		msg_t_status.layer			= l;
 800312c:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <_Z12publish_msgsv+0x2bc>)
 800312e:	7dfb      	ldrb	r3, [r7, #23]
 8003130:	7613      	strb	r3, [r2, #24]

		/* publish and wait inbetween transmission */
		pub_s_spad.publish(&msg_s_spad);
 8003132:	492c      	ldr	r1, [pc, #176]	; (80031e4 <_Z12publish_msgsv+0x2ac>)
 8003134:	4831      	ldr	r0, [pc, #196]	; (80031fc <_Z12publish_msgsv+0x2c4>)
 8003136:	f7fe fa0e 	bl	8001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		HAL_Delay(2);
 800313a:	2002      	movs	r0, #2
 800313c:	f004 fe18 	bl	8007d70 <HAL_Delay>
		pub_distance.publish(&msg_distance);
 8003140:	4929      	ldr	r1, [pc, #164]	; (80031e8 <_Z12publish_msgsv+0x2b0>)
 8003142:	482f      	ldr	r0, [pc, #188]	; (8003200 <_Z12publish_msgsv+0x2c8>)
 8003144:	f7fe fa07 	bl	8001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		HAL_Delay(2);
 8003148:	2002      	movs	r0, #2
 800314a:	f004 fe11 	bl	8007d70 <HAL_Delay>
		pub_sigma.publish(&msg_sigma);
 800314e:	4927      	ldr	r1, [pc, #156]	; (80031ec <_Z12publish_msgsv+0x2b4>)
 8003150:	482c      	ldr	r0, [pc, #176]	; (8003204 <_Z12publish_msgsv+0x2cc>)
 8003152:	f7fe fa00 	bl	8001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		HAL_Delay(2);
 8003156:	2002      	movs	r0, #2
 8003158:	f004 fe0a 	bl	8007d70 <HAL_Delay>
		pub_reflect.publish(&msg_reflect);
 800315c:	4924      	ldr	r1, [pc, #144]	; (80031f0 <_Z12publish_msgsv+0x2b8>)
 800315e:	482a      	ldr	r0, [pc, #168]	; (8003208 <_Z12publish_msgsv+0x2d0>)
 8003160:	f7fe f9f9 	bl	8001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		HAL_Delay(2);
 8003164:	2002      	movs	r0, #2
 8003166:	f004 fe03 	bl	8007d70 <HAL_Delay>
		pub_t_status.publish(&msg_t_status);
 800316a:	4922      	ldr	r1, [pc, #136]	; (80031f4 <_Z12publish_msgsv+0x2bc>)
 800316c:	4827      	ldr	r0, [pc, #156]	; (800320c <_Z12publish_msgsv+0x2d4>)
 800316e:	f7fe f9f2 	bl	8001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
		HAL_Delay(2);
 8003172:	2002      	movs	r0, #2
 8003174:	f004 fdfc 	bl	8007d70 <HAL_Delay>
	for (uint8_t l = 0; l < VL53L5CX_NB_TARGET_PER_ZONE; l++) {
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	3301      	adds	r3, #1
 800317c:	75fb      	strb	r3, [r7, #23]
 800317e:	e710      	b.n	8002fa2 <_Z12publish_msgsv+0x6a>
	}
	msg_n_spads.header.frame_id = fid;
 8003180:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <_Z12publish_msgsv+0x2a8>)
 8003182:	1d3b      	adds	r3, r7, #4
 8003184:	6153      	str	r3, [r2, #20]
	msg_n_spads.header.seq		= seq;
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <_Z12publish_msgsv+0x2a8>)
 800318c:	6093      	str	r3, [r2, #8]

	msg_ambient.header.frame_id = fid;
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <_Z12publish_msgsv+0x2a4>)
 8003190:	1d3b      	adds	r3, r7, #4
 8003192:	6153      	str	r3, [r2, #20]
	msg_ambient.header.seq		= seq;
 8003194:	4b18      	ldr	r3, [pc, #96]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a10      	ldr	r2, [pc, #64]	; (80031dc <_Z12publish_msgsv+0x2a4>)
 800319a:	6093      	str	r3, [r2, #8]

	pub_ambient.publish(&msg_ambient);
 800319c:	490f      	ldr	r1, [pc, #60]	; (80031dc <_Z12publish_msgsv+0x2a4>)
 800319e:	481c      	ldr	r0, [pc, #112]	; (8003210 <_Z12publish_msgsv+0x2d8>)
 80031a0:	f7fe f9d9 	bl	8001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	HAL_Delay(2);
 80031a4:	2002      	movs	r0, #2
 80031a6:	f004 fde3 	bl	8007d70 <HAL_Delay>
	pub_n_spads.publish(&msg_n_spads);
 80031aa:	490d      	ldr	r1, [pc, #52]	; (80031e0 <_Z12publish_msgsv+0x2a8>)
 80031ac:	4819      	ldr	r0, [pc, #100]	; (8003214 <_Z12publish_msgsv+0x2dc>)
 80031ae:	f7fe f9d2 	bl	8001556 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	HAL_Delay(2);
 80031b2:	2002      	movs	r0, #2
 80031b4:	f004 fddc 	bl	8007d70 <HAL_Delay>
	seq++;
 80031b8:	4b0f      	ldr	r3, [pc, #60]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	3301      	adds	r3, #1
 80031be:	4a0e      	ldr	r2, [pc, #56]	; (80031f8 <_Z12publish_msgsv+0x2c0>)
 80031c0:	6013      	str	r3, [r2, #0]
}
 80031c2:	bf00      	nop
 80031c4:	3724      	adds	r7, #36	; 0x24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd90      	pop	{r4, r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20005378 	.word	0x20005378
 80031d0:	200000d4 	.word	0x200000d4
 80031d4:	0800c004 	.word	0x0800c004
 80031d8:	40020000 	.word	0x40020000
 80031dc:	20000ad8 	.word	0x20000ad8
 80031e0:	20000bf0 	.word	0x20000bf0
 80031e4:	20000d08 	.word	0x20000d08
 80031e8:	20000e24 	.word	0x20000e24
 80031ec:	20000ec0 	.word	0x20000ec0
 80031f0:	20000f5c 	.word	0x20000f5c
 80031f4:	20000fb8 	.word	0x20000fb8
 80031f8:	20001014 	.word	0x20001014
 80031fc:	2000277c 	.word	0x2000277c
 8003200:	20002790 	.word	0x20002790
 8003204:	200027a4 	.word	0x200027a4
 8003208:	200027b8 	.word	0x200027b8
 800320c:	200027cc 	.word	0x200027cc
 8003210:	20002754 	.word	0x20002754
 8003214:	20002768 	.word	0x20002768

08003218 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d80d      	bhi.n	8003248 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	fa22 f103 	lsr.w	r1, r2, r3
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4413      	add	r3, r2
 800323c:	b2ca      	uxtb	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3301      	adds	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e7ee      	b.n	8003226 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2b03      	cmp	r3, #3
 800326c:	d811      	bhi.n	8003292 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6839      	ldr	r1, [r7, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	440a      	add	r2, r1
 8003278:	7812      	ldrb	r2, [r2, #0]
 800327a:	4611      	mov	r1, r2
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	00d2      	lsls	r2, r2, #3
 8003280:	fa01 f202 	lsl.w	r2, r1, r2
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	3301      	adds	r3, #1
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e7ea      	b.n	8003268 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
	...

080032a0 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	4a04      	ldr	r2, [pc, #16]	; (80032bc <_ZN3ros11Subscriber_C1Ev+0x1c>)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	0800c2e4 	.word	0x0800c2e4

080032c0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ffe5 	bl	80032a0 <_ZN3ros11Subscriber_C1Ev>
 80032d6:	4a0b      	ldr	r2, [pc, #44]	; (8003304 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei+0x44>)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	330c      	adds	r3, #12
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7fe faa1 	bl	8001828 <_ZN8std_msgs5EmptyC1Ev>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	611a      	str	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	615a      	str	r2, [r3, #20]
  {
    topic_ = topic_name;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	609a      	str	r2, [r3, #8]
  };
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	0800c1c8 	.word	0x0800c1c8

08003308 <_ZN3ros10SubscriberIN21sensors_53l5a1_driver7controlEvEC1EPKcPFvRKS2_Ei>:
  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
    endpoint_(endpoint)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ffc1 	bl	80032a0 <_ZN3ros11Subscriber_C1Ev>
 800331e:	4a0b      	ldr	r2, [pc, #44]	; (800334c <_ZN3ros10SubscriberIN21sensors_53l5a1_driver7controlEvEC1EPKcPFvRKS2_Ei+0x44>)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	330c      	adds	r3, #12
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fa7d 	bl	8002828 <_ZN21sensors_53l5a1_driver7controlC1Ev>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	635a      	str	r2, [r3, #52]	; 0x34
    topic_ = topic_name;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]
  };
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	0800c1b0 	.word	0x0800c1b0

08003350 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3304      	adds	r3, #4
  }
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f7fe f941 	bl	80015fc <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003380:	330c      	adds	r3, #12
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
    bytes_ = 0;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800338c:	3310      	adds	r3, #16
 800338e:	2200      	movs	r2, #0
 8003390:	601a      	str	r2, [r3, #0]
    index_ = 0;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003398:	3318      	adds	r3, #24
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
    topic_ = 0;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80033a4:	3314      	adds	r3, #20
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
  };
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:
    }
    return false;
  }

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b18      	cmp	r3, #24
 80033c4:	dc19      	bgt.n	80033fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
    {
      if (subscribers[i] == 0) // empty slot
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 80033ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10d      	bne.n	80033f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x40>
      {
        subscribers[i] = &s;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 80033de:	6839      	ldr	r1, [r7, #0]
 80033e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        s.id_ = i + 100;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	605a      	str	r2, [r3, #4]
        return true;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e004      	b.n	80033fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4a>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	3301      	adds	r3, #1
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	e7e2      	b.n	80033c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0xe>
      }
    }
    return false;
 80033fa:	2300      	movs	r3, #0
  }
 80033fc:	4618      	mov	r0, r3
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  bool advertise(Publisher & p)
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2b18      	cmp	r3, #24
 800341a:	dc1e      	bgt.n	800345a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
      if (publishers[i] == 0) // empty slot
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d111      	bne.n	8003452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
        publishers[i] = &p;
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	4413      	add	r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	60da      	str	r2, [r3, #12]
        return true;
 800344e:	2301      	movs	r3, #1
 8003450:	e004      	b.n	800345c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	3301      	adds	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e7dd      	b.n	8003416 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
    return false;
 800345a:	2300      	movs	r3, #0
  }
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	4618      	mov	r0, r3
 8003476:	f7fe f9cb 	bl	8001810 <_ZN13STM32Hardware4timeEv>
 800347a:	6138      	str	r0, [r7, #16]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003482:	3308      	adds	r3, #8
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	f642 22f8 	movw	r2, #11000	; 0x2af8
 800348e:	4293      	cmp	r3, r2
 8003490:	d904      	bls.n	800349c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x34>
      configured_ = false;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
    if (mode_ != MODE_FIRST_FF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80034a2:	330c      	adds	r3, #12
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00d      	beq.n	80034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
      if (c_time > last_msg_timeout_time)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80034b0:	330c      	adds	r3, #12
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d905      	bls.n	80034c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x5e>
        mode_ = MODE_FIRST_FF;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80034c0:	330c      	adds	r3, #12
 80034c2:	2200      	movs	r2, #0
 80034c4:	601a      	str	r2, [r3, #0]
    bool tx_stop_requested = false;
 80034c6:	2300      	movs	r3, #0
 80034c8:	75fb      	strb	r3, [r7, #23]
    bool saw_time_msg = false;
 80034ca:	2300      	movs	r3, #0
 80034cc:	75bb      	strb	r3, [r7, #22]
      if (spin_timeout_ > 0)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d015      	beq.n	8003506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9e>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe f996 	bl	8001810 <_ZN13STM32Hardware4timeEv>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad2      	subs	r2, r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf8c      	ite	hi
 80034f6:	2301      	movhi	r3, #1
 80034f8:	2300      	movls	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9e>
          return SPIN_TIMEOUT;
 8003500:	f06f 0301 	mvn.w	r3, #1
 8003504:	e225      	b.n	8003952 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ea>
      int data = hardware_.read();
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe f892 	bl	8001634 <_ZN13STM32Hardware4readEv>
 8003510:	60f8      	str	r0, [r7, #12]
      if (data < 0)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f2c0 81f4 	blt.w	8003902 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x49a>
      checksum_ += data;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003520:	331c      	adds	r3, #28
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	441a      	add	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800352e:	331c      	adds	r3, #28
 8003530:	601a      	str	r2, [r3, #0]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003538:	330c      	adds	r3, #12
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2b07      	cmp	r3, #7
 800353e:	d12c      	bne.n	800359a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x132>
        message_in[index_++] = data;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003546:	3318      	adds	r3, #24
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	1c51      	adds	r1, r2, #1
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003552:	3318      	adds	r3, #24
 8003554:	6019      	str	r1, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	b2d9      	uxtb	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8003562:	3304      	adds	r3, #4
 8003564:	460a      	mov	r2, r1
 8003566:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800356e:	3310      	adds	r3, #16
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1e5a      	subs	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800357a:	3310      	adds	r3, #16
 800357c:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003584:	3310      	adds	r3, #16
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1a0      	bne.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          mode_ = MODE_MSG_CHECKSUM;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003592:	330c      	adds	r3, #12
 8003594:	2208      	movs	r2, #8
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e799      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
      else if (mode_ == MODE_FIRST_FF)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80035a0:	330c      	adds	r3, #12
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d130      	bne.n	800360a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a2>
        if (data == 0xff)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2bff      	cmp	r3, #255	; 0xff
 80035ac:	d113      	bne.n	80035d6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x16e>
          mode_++;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80035b4:	330c      	adds	r3, #12
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80035c0:	330c      	adds	r3, #12
 80035c2:	601a      	str	r2, [r3, #0]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f103 0214 	add.w	r2, r3, #20
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 80035d0:	330c      	adds	r3, #12
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	e77b      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3304      	adds	r3, #4
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe f918 	bl	8001810 <_ZN13STM32Hardware4timeEv>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ea:	4293      	cmp	r3, r2
 80035ec:	bf8c      	ite	hi
 80035ee:	2301      	movhi	r3, #1
 80035f0:	2300      	movls	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f43f af6a 	beq.w	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          configured_ = false;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
          return SPIN_TIMEOUT;
 8003604:	f06f 0301 	mvn.w	r3, #1
 8003608:	e1a3      	b.n	8003952 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ea>
      else if (mode_ == MODE_PROTOCOL_VER)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003610:	330c      	adds	r3, #12
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d11f      	bne.n	8003658 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1f0>
        if (data == PROTOCOL_VER)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2bfe      	cmp	r3, #254	; 0xfe
 800361c:	d10b      	bne.n	8003636 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1ce>
          mode_++;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003624:	330c      	adds	r3, #12
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003630:	330c      	adds	r3, #12
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e74b      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          mode_ = MODE_FIRST_FF;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800363c:	330c      	adds	r3, #12
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
          if (configured_ == false)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f47f af3f 	bne.w	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f982 	bl	800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8003656:	e73a      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800365e:	330c      	adds	r3, #12
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11d      	bne.n	80036a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x23a>
        bytes_ = data;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800366c:	3310      	adds	r3, #16
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]
        index_ = 0;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003678:	3318      	adds	r3, #24
 800367a:	2200      	movs	r2, #0
 800367c:	601a      	str	r2, [r3, #0]
        mode_++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003684:	330c      	adds	r3, #12
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003690:	330c      	adds	r3, #12
 8003692:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte for calculating size checksum */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800369a:	331c      	adds	r3, #28
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	e715      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80036a8:	330c      	adds	r3, #12
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d118      	bne.n	80036e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80036b6:	3310      	adds	r3, #16
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	441a      	add	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80036c6:	3310      	adds	r3, #16
 80036c8:	601a      	str	r2, [r3, #0]
        mode_++;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80036d0:	330c      	adds	r3, #12
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80036dc:	330c      	adds	r3, #12
 80036de:	601a      	str	r2, [r3, #0]
 80036e0:	e6f5      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80036e8:	330c      	adds	r3, #12
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d11e      	bne.n	800372e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c6>
        if ((checksum_ % 256) == 255)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80036f6:	331c      	adds	r3, #28
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	425a      	negs	r2, r3
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	bf58      	it	pl
 8003702:	4253      	negpl	r3, r2
 8003704:	2bff      	cmp	r3, #255	; 0xff
 8003706:	d10b      	bne.n	8003720 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2b8>
          mode_++;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800370e:	330c      	adds	r3, #12
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800371a:	330c      	adds	r3, #12
 800371c:	601a      	str	r2, [r3, #0]
 800371e:	e6d6      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003726:	330c      	adds	r3, #12
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	e6cf      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003734:	330c      	adds	r3, #12
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2b05      	cmp	r3, #5
 800373a:	d117      	bne.n	800376c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x304>
        topic_ = data;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003742:	3314      	adds	r3, #20
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]
        mode_++;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800374e:	330c      	adds	r3, #12
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	1c5a      	adds	r2, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800375a:	330c      	adds	r3, #12
 800375c:	601a      	str	r2, [r3, #0]
        checksum_ = data;               /* first byte included in checksum */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003764:	331c      	adds	r3, #28
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	e6b0      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003772:	330c      	adds	r3, #12
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2b06      	cmp	r3, #6
 8003778:	d121      	bne.n	80037be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x356>
        topic_ += data << 8;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003780:	3314      	adds	r3, #20
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	021b      	lsls	r3, r3, #8
 8003788:	441a      	add	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003790:	3314      	adds	r3, #20
 8003792:	601a      	str	r2, [r3, #0]
        mode_ = MODE_MESSAGE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800379a:	330c      	adds	r3, #12
 800379c:	2207      	movs	r2, #7
 800379e:	601a      	str	r2, [r3, #0]
        if (bytes_ == 0)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80037a6:	3310      	adds	r3, #16
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f47f ae8f 	bne.w	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          mode_ = MODE_MSG_CHECKSUM;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80037b6:	330c      	adds	r3, #12
 80037b8:	2208      	movs	r2, #8
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	e687      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80037c4:	330c      	adds	r3, #12
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	f47f ae80 	bne.w	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
        mode_ = MODE_FIRST_FF;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80037d4:	330c      	adds	r3, #12
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
        if ((checksum_ % 256) == 255)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80037e0:	331c      	adds	r3, #28
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	425a      	negs	r2, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	bf58      	it	pl
 80037ec:	4253      	negpl	r3, r2
 80037ee:	2bff      	cmp	r3, #255	; 0xff
 80037f0:	f47f ae6d 	bne.w	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80037fa:	3314      	adds	r3, #20
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d114      	bne.n	800382c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c4>
            requestSyncTime();
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f8a9 	bl	800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f8c6 	bl	800399a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003814:	3304      	adds	r3, #4
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	601a      	str	r2, [r3, #0]
            last_sync_receive_time = c_time;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003820:	3308      	adds	r3, #8
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	601a      	str	r2, [r3, #0]
            return SPIN_ERR;
 8003826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800382a:	e092      	b.n	8003952 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ea>
          else if (topic_ == TopicInfo::ID_TIME)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003832:	3314      	adds	r3, #20
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b0a      	cmp	r3, #10
 8003838:	d10a      	bne.n	8003850 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3e8>
            saw_time_msg = true;
 800383a:	2301      	movs	r3, #1
 800383c:	75bb      	strb	r3, [r7, #22]
            syncTime(message_in);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f000 f987 	bl	8003b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 800384e:	e63e      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 8003856:	3314      	adds	r3, #20
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b06      	cmp	r3, #6
 800385c:	d112      	bne.n	8003884 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x41c>
            req_param_resp.deserialize(message_in);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003864:	3314      	adds	r3, #20
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	f502 5291 	add.w	r2, r2, #4640	; 0x1220
 800386c:	3204      	adds	r2, #4
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f7fd fccc 	bl	800120e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 800387c:	3310      	adds	r3, #16
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e624      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 800388a:	3314      	adds	r3, #20
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b0b      	cmp	r3, #11
 8003890:	d107      	bne.n	80038a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x43a>
            configured_ = false;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003898:	2200      	movs	r2, #0
 800389a:	701a      	strb	r2, [r3, #0]
            tx_stop_requested = true;
 800389c:	2301      	movs	r3, #1
 800389e:	75fb      	strb	r3, [r7, #23]
 80038a0:	e615      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
            if (subscribers[topic_ - 100])
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80038a8:	3314      	adds	r3, #20
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 80038b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	f43f ae07 	beq.w	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
              subscribers[topic_ - 100]->callback(message_in);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80038c6:	3314      	adds	r3, #20
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 80038d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f503 53b7 	add.w	r3, r3, #5856	; 0x16e0
 80038de:	3314      	adds	r3, #20
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 80038ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f503 5391 	add.w	r3, r3, #4640	; 0x1220
 80038fa:	3304      	adds	r3, #4
 80038fc:	4619      	mov	r1, r3
 80038fe:	4790      	blx	r2
    while (true)
 8003900:	e5e5      	b.n	80034ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x66>
        break;
 8003902:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d013      	beq.n	8003938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4d0>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003916:	3304      	adds	r3, #4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003922:	4293      	cmp	r3, r2
 8003924:	d908      	bls.n	8003938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4d0>
      requestSyncTime();
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f817 	bl	800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003932:	3304      	adds	r3, #4
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	601a      	str	r2, [r3, #0]
    return saw_time_msg ? SPIN_TIME_RECV : (tx_stop_requested ? SPIN_TX_STOP_REQUESTED : SPIN_OK);
 8003938:	7dbb      	ldrb	r3, [r7, #22]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4dc>
 800393e:	f06f 0303 	mvn.w	r3, #3
 8003942:	e006      	b.n	8003952 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ea>
 8003944:	7dfb      	ldrb	r3, [r7, #23]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4e8>
 800394a:	f06f 0302 	mvn.w	r3, #2
 800394e:	e000      	b.n	8003952 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4ea>
 8003950:	2300      	movs	r3, #0
  }
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8003962:	f107 030c 	add.w	r3, r7, #12
 8003966:	4618      	mov	r0, r3
 8003968:	f7fc ffae 	bl	80008c8 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f107 020c 	add.w	r2, r7, #12
 8003976:	210a      	movs	r1, #10
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	4798      	blx	r3
    rt_time = hardware_.time();
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fd ff45 	bl	8001810 <_ZN13STM32Hardware4timeEv>
 8003986:	4602      	mov	r2, r0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800398e:	3314      	adds	r3, #20
 8003990:	601a      	str	r2, [r3, #0]
  }
 8003992:	bf00      	nop
 8003994:	3718      	adds	r7, #24
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 800399a:	b590      	push	{r4, r7, lr}
 800399c:	b08b      	sub	sp, #44	; 0x2c
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 80039a2:	f107 030c 	add.w	r3, r7, #12
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7fd f87e 	bl	8000aa8 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 80039ac:	2300      	movs	r3, #0
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	2b18      	cmp	r3, #24
 80039b4:	dc63      	bgt.n	8003a7e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d056      	beq.n	8003a76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039cc:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	b29b      	uxth	r3, r3
 80039da:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	6859      	ldr	r1, [r3, #4]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a02:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4798      	blx	r3
 8003a18:	4603      	mov	r3, r0
 8003a1a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a20:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	6859      	ldr	r1, [r3, #4]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4413      	add	r3, r2
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4608      	mov	r0, r1
 8003a44:	4798      	blx	r3
 8003a46:	4603      	mov	r3, r0
 8003a48:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8003a4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4e:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681c      	ldr	r4, [r3, #0]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4413      	add	r3, r2
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7fd fd8a 	bl	800157e <_ZN3ros9Publisher15getEndpointTypeEv>
 8003a6a:	4601      	mov	r1, r0
 8003a6c:	f107 030c 	add.w	r3, r7, #12
 8003a70:	461a      	mov	r2, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a78:	3301      	adds	r3, #1
 8003a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a7c:	e798      	b.n	80039b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	2b18      	cmp	r3, #24
 8003a86:	dc5f      	bgt.n	8003b48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a8c:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d053      	beq.n	8003b40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9c:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aae:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abe:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aca:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4608      	mov	r0, r1
 8003ada:	4798      	blx	r3
 8003adc:	4603      	mov	r3, r0
 8003ade:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003ae8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af0:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	330c      	adds	r3, #12
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4608      	mov	r0, r1
 8003b00:	4798      	blx	r3
 8003b02:	4603      	mov	r3, r0
 8003b04:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8003b06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681c      	ldr	r4, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b16:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003b1a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	f202 52a2 	addw	r2, r2, #1442	; 0x5a2
 8003b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4608      	mov	r0, r1
 8003b32:	4798      	blx	r3
 8003b34:	4601      	mov	r1, r0
 8003b36:	f107 030c 	add.w	r3, r7, #12
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	3301      	adds	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
 8003b46:	e79c      	b.n	8003a82 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
  }
 8003b52:	bf00      	nop
 8003b54:	372c      	adds	r7, #44	; 0x2c
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd90      	pop	{r4, r7, pc}
	...

08003b5c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fc feac 	bl	80008c8 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fd fe4b 	bl	8001810 <_ZN13STM32Hardware4timeEv>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003b82:	3314      	adds	r3, #20
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8003b8a:	f107 0308 	add.w	r3, r7, #8
 8003b8e:	6839      	ldr	r1, [r7, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc ff09 	bl	80009a8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	4916      	ldr	r1, [pc, #88]	; (8003bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003b9c:	fba1 1303 	umull	r1, r3, r1, r3
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8003ba6:	6939      	ldr	r1, [r7, #16]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4b12      	ldr	r3, [pc, #72]	; (8003bf4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x98>)
 8003bac:	fba3 0302 	umull	r0, r3, r3, r2
 8003bb0:	099b      	lsrs	r3, r3, #6
 8003bb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bb6:	fb00 f303 	mul.w	r3, r0, r3
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x9c>)
 8003bbe:	fb02 f303 	mul.w	r3, r2, r3
 8003bc2:	440b      	add	r3, r1
 8003bc4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4619      	mov	r1, r3
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f8be 	bl	8003d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fd fe19 	bl	8001810 <_ZN13STM32Hardware4timeEv>
 8003bde:	4602      	mov	r2, r0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003be6:	3308      	adds	r3, #8
 8003be8:	601a      	str	r2, [r3, #0]
  }
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	10624dd3 	.word	0x10624dd3
 8003bf8:	000f4240 	.word	0x000f4240

08003bfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b63      	cmp	r3, #99	; 0x63
 8003c0c:	dd0a      	ble.n	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x28>
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	f083 0301 	eor.w	r3, r3, #1
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x28>
      return 0;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e08e      	b.n	8003d42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x146>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c30:	3304      	adds	r3, #4
 8003c32:	3307      	adds	r3, #7
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4790      	blx	r2
 8003c3a:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c42:	3304      	adds	r3, #4
 8003c44:	22ff      	movs	r2, #255	; 0xff
 8003c46:	701a      	strb	r2, [r3, #0]
    message_out[1] = PROTOCOL_VER;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c4e:	3305      	adds	r3, #5
 8003c50:	22fe      	movs	r2, #254	; 0xfe
 8003c52:	701a      	strb	r2, [r3, #0]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c5e:	3306      	adds	r3, #6
 8003c60:	701a      	strb	r2, [r3, #0]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	121b      	asrs	r3, r3, #8
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c70:	3307      	adds	r3, #7
 8003c72:	701a      	strb	r2, [r3, #0]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c7a:	3306      	adds	r3, #6
 8003c7c:	781a      	ldrb	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c84:	3307      	adds	r3, #7
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4413      	add	r3, r2
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	43db      	mvns	r3, r3
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003c96:	3308      	adds	r3, #8
 8003c98:	701a      	strb	r2, [r3, #0]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003ca4:	3309      	adds	r3, #9
 8003ca6:	701a      	strb	r2, [r3, #0]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	b21b      	sxth	r3, r3
 8003cac:	121b      	asrs	r3, r3, #8
 8003cae:	b2da      	uxtb	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003cb6:	330a      	adds	r3, #10
 8003cb8:	701a      	strb	r2, [r3, #0]

    /* calculate checksum */
    int chk = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	3306      	adds	r3, #6
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	dc0e      	bgt.n	8003cea <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xee>
      chk += message_out[i];
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	e7eb      	b.n	8003cc2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc6>
    l += 7;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	3307      	adds	r3, #7
 8003cee:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	425a      	negs	r2, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	b2d2      	uxtb	r2, r2
 8003cf8:	bf58      	it	pl
 8003cfa:	4253      	negpl	r3, r2
 8003cfc:	b2da      	uxtb	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	1c59      	adds	r1, r3, #1
 8003d02:	6179      	str	r1, [r7, #20]
 8003d04:	43d2      	mvns	r2, r2
 8003d06:	b2d1      	uxtb	r1, r2
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003d10:	3304      	adds	r3, #4
 8003d12:	460a      	mov	r2, r1
 8003d14:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	dc0b      	bgt.n	8003d36 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x13a>
    {
      hardware_.write(message_out, l);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	1d18      	adds	r0, r3, #4
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003d28:	3304      	adds	r3, #4
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	f7fd fd21 	bl	8001774 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	e005      	b.n	8003d42 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x146>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8003d36:	4905      	ldr	r1, [pc, #20]	; (8003d4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x150>)
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f84f 	bl	8003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8003d42:	4618      	mov	r0, r3
 8003d44:	3720      	adds	r7, #32
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	0800c014 	.word	0x0800c014

08003d50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fd fd56 	bl	8001810 <_ZN13STM32Hardware4timeEv>
 8003d64:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4918      	ldr	r1, [pc, #96]	; (8003dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x80>)
 8003d6e:	fba1 1303 	umull	r1, r3, r1, r3
 8003d72:	099b      	lsrs	r3, r3, #6
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	1e5a      	subs	r2, r3, #1
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003d7e:	3318      	adds	r3, #24
 8003d80:	601a      	str	r2, [r3, #0]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x80>)
 8003d8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003d8e:	099b      	lsrs	r3, r3, #6
 8003d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d94:	fb00 f303 	mul.w	r3, r0, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x84>)
 8003d9c:	fb02 f303 	mul.w	r3, r2, r3
 8003da0:	1acb      	subs	r3, r1, r3
 8003da2:	4a0d      	ldr	r2, [pc, #52]	; (8003dd8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x88>)
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003dac:	331c      	adds	r3, #28
 8003dae:	601a      	str	r2, [r3, #0]
    normalizeSecNSec(sec_offset, nsec_offset);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003db6:	3318      	adds	r3, #24
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	f502 5290 	add.w	r2, r2, #4608	; 0x1200
 8003dbe:	321c      	adds	r2, #28
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f007 fd96 	bl	800b8f4 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	10624dd3 	.word	0x10624dd3
 8003dd4:	000f4240 	.word	0x000f4240
 8003dd8:	3b9aca00 	.word	0x3b9aca00

08003ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	2103      	movs	r1, #3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f000 f804 	bl	8003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8003df0:	bf00      	nop
 8003df2:	3708      	adds	r7, #8
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	460b      	mov	r3, r1
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8003e06:	f107 0314 	add.w	r3, r7, #20
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7fd f810 	bl	8000e30 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8003e10:	7afb      	ldrb	r3, [r7, #11]
 8003e12:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f107 0214 	add.w	r2, r7, #20
 8003e22:	2107      	movs	r1, #7
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	4798      	blx	r3
  }
 8003e28:	bf00      	nop
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <_Z41__static_initialization_and_destruction_0ii>:
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d152      	bne.n	8003ee6 <_Z41__static_initialization_and_destruction_0ii+0xb6>
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d14d      	bne.n	8003ee6 <_Z41__static_initialization_and_destruction_0ii+0xb6>
sensors_53l5a1_driver::am_per_spad 	msg_ambient;
 8003e4a:	4829      	ldr	r0, [pc, #164]	; (8003ef0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003e4c:	f7fd ffbe 	bl	8001dcc <_ZN21sensors_53l5a1_driver11am_per_spadC1Ev>
sensors_53l5a1_driver::nb_spads 	msg_n_spads;
 8003e50:	4828      	ldr	r0, [pc, #160]	; (8003ef4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8003e52:	f7fd fec7 	bl	8001be4 <_ZN21sensors_53l5a1_driver8nb_spadsC1Ev>
sensors_53l5a1_driver::sig_per_spad	msg_s_spad;
 8003e56:	4828      	ldr	r0, [pc, #160]	; (8003ef8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8003e58:	f7fe f8ac 	bl	8001fb4 <_ZN21sensors_53l5a1_driver12sig_per_spadC1Ev>
sensors_53l5a1_driver::distance 	msg_distance;
 8003e5c:	4827      	ldr	r0, [pc, #156]	; (8003efc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8003e5e:	f7fe f9bb 	bl	80021d8 <_ZN21sensors_53l5a1_driver8distanceC1Ev>
sensors_53l5a1_driver::sigma	 	msg_sigma;
 8003e62:	4827      	ldr	r0, [pc, #156]	; (8003f00 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8003e64:	f7fe faa6 	bl	80023b4 <_ZN21sensors_53l5a1_driver5sigmaC1Ev>
sensors_53l5a1_driver::reflectance 	msg_reflect;
 8003e68:	4826      	ldr	r0, [pc, #152]	; (8003f04 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8003e6a:	f7fe fc2d 	bl	80026c8 <_ZN21sensors_53l5a1_driver11reflectanceC1Ev>
sensors_53l5a1_driver::status 		msg_t_status;
 8003e6e:	4826      	ldr	r0, [pc, #152]	; (8003f08 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8003e70:	f7fe fb7a 	bl	8002568 <_ZN21sensors_53l5a1_driver6statusC1Ev>
ros::NodeHandle nh;
 8003e74:	4825      	ldr	r0, [pc, #148]	; (8003f0c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8003e76:	f7fe ff47 	bl	8002d08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
ros::Publisher pub_ambient	(topic_ambient, 	&msg_ambient);
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	4a1c      	ldr	r2, [pc, #112]	; (8003ef0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8003e7e:	4924      	ldr	r1, [pc, #144]	; (8003f10 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8003e80:	4824      	ldr	r0, [pc, #144]	; (8003f14 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8003e82:	f7fd fb51 	bl	8001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_n_spads	(topic_n_spads,  	&msg_n_spads);
 8003e86:	2300      	movs	r3, #0
 8003e88:	4a1a      	ldr	r2, [pc, #104]	; (8003ef4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8003e8a:	4923      	ldr	r1, [pc, #140]	; (8003f18 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8003e8c:	4823      	ldr	r0, [pc, #140]	; (8003f1c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8003e8e:	f7fd fb4b 	bl	8001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_s_spad 	(topic_s_spad, 		&msg_s_spad);
 8003e92:	2300      	movs	r3, #0
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8003e96:	4922      	ldr	r1, [pc, #136]	; (8003f20 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 8003e98:	4822      	ldr	r0, [pc, #136]	; (8003f24 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8003e9a:	f7fd fb45 	bl	8001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_distance	(topic_distance, 	&msg_distance);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	4a16      	ldr	r2, [pc, #88]	; (8003efc <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8003ea2:	4921      	ldr	r1, [pc, #132]	; (8003f28 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8003ea4:	4821      	ldr	r0, [pc, #132]	; (8003f2c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003ea6:	f7fd fb3f 	bl	8001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_sigma	(topic_sigma, 		&msg_sigma);
 8003eaa:	2300      	movs	r3, #0
 8003eac:	4a14      	ldr	r2, [pc, #80]	; (8003f00 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8003eae:	4920      	ldr	r1, [pc, #128]	; (8003f30 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 8003eb0:	4820      	ldr	r0, [pc, #128]	; (8003f34 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8003eb2:	f7fd fb39 	bl	8001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_reflect	(topic_reflect, 	&msg_reflect);
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	4a12      	ldr	r2, [pc, #72]	; (8003f04 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8003eba:	491f      	ldr	r1, [pc, #124]	; (8003f38 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8003ebc:	481f      	ldr	r0, [pc, #124]	; (8003f3c <_Z41__static_initialization_and_destruction_0ii+0x10c>)
 8003ebe:	f7fd fb33 	bl	8001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher pub_t_status	(topic_t_status, 	&msg_t_status);
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4a10      	ldr	r2, [pc, #64]	; (8003f08 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8003ec6:	491e      	ldr	r1, [pc, #120]	; (8003f40 <_Z41__static_initialization_and_destruction_0ii+0x110>)
 8003ec8:	481e      	ldr	r0, [pc, #120]	; (8003f44 <_Z41__static_initialization_and_destruction_0ii+0x114>)
 8003eca:	f7fd fb2d 	bl	8001528 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::Empty> sub("toggle_led", messageCb );
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4a1d      	ldr	r2, [pc, #116]	; (8003f48 <_Z41__static_initialization_and_destruction_0ii+0x118>)
 8003ed2:	491e      	ldr	r1, [pc, #120]	; (8003f4c <_Z41__static_initialization_and_destruction_0ii+0x11c>)
 8003ed4:	481e      	ldr	r0, [pc, #120]	; (8003f50 <_Z41__static_initialization_and_destruction_0ii+0x120>)
 8003ed6:	f7ff f9f3 	bl	80032c0 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvEC1EPKcPFvRKS2_Ei>
ros::Subscriber<sensors_53l5a1_driver::control>  sub_control (topic_control,  control_cb);
 8003eda:	2301      	movs	r3, #1
 8003edc:	4a1d      	ldr	r2, [pc, #116]	; (8003f54 <_Z41__static_initialization_and_destruction_0ii+0x124>)
 8003ede:	491e      	ldr	r1, [pc, #120]	; (8003f58 <_Z41__static_initialization_and_destruction_0ii+0x128>)
 8003ee0:	481e      	ldr	r0, [pc, #120]	; (8003f5c <_Z41__static_initialization_and_destruction_0ii+0x12c>)
 8003ee2:	f7ff fa11 	bl	8003308 <_ZN3ros10SubscriberIN21sensors_53l5a1_driver7controlEvEC1EPKcPFvRKS2_Ei>
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000ad8 	.word	0x20000ad8
 8003ef4:	20000bf0 	.word	0x20000bf0
 8003ef8:	20000d08 	.word	0x20000d08
 8003efc:	20000e24 	.word	0x20000e24
 8003f00:	20000ec0 	.word	0x20000ec0
 8003f04:	20000f5c 	.word	0x20000f5c
 8003f08:	20000fb8 	.word	0x20000fb8
 8003f0c:	20001018 	.word	0x20001018
 8003f10:	0800c100 	.word	0x0800c100
 8003f14:	20002754 	.word	0x20002754
 8003f18:	0800c118 	.word	0x0800c118
 8003f1c:	20002768 	.word	0x20002768
 8003f20:	0800c134 	.word	0x0800c134
 8003f24:	2000277c 	.word	0x2000277c
 8003f28:	0800c14c 	.word	0x0800c14c
 8003f2c:	20002790 	.word	0x20002790
 8003f30:	0800c160 	.word	0x0800c160
 8003f34:	200027a4 	.word	0x200027a4
 8003f38:	0800c170 	.word	0x0800c170
 8003f3c:	200027b8 	.word	0x200027b8
 8003f40:	0800c190 	.word	0x0800c190
 8003f44:	200027cc 	.word	0x200027cc
 8003f48:	08002b41 	.word	0x08002b41
 8003f4c:	0800c050 	.word	0x0800c050
 8003f50:	200027e0 	.word	0x200027e0
 8003f54:	08002b5d 	.word	0x08002b5d
 8003f58:	0800c0ec 	.word	0x0800c0ec
 8003f5c:	200027f8 	.word	0x200027f8

08003f60 <_ZN3ros10SubscriberIN21sensors_53l5a1_driver7controlEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	330c      	adds	r3, #12
 8003f6e:	6839      	ldr	r1, [r7, #0]
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fe fcfe 	bl	8002972 <_ZN21sensors_53l5a1_driver7control11deserializeEPh>
    this->cb_(msg);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	320c      	adds	r2, #12
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4798      	blx	r3
  }
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <_ZN3ros10SubscriberIN21sensors_53l5a1_driver7controlEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  }
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <_ZN3ros10SubscriberIN21sensors_53l5a1_driver7controlEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	330c      	adds	r3, #12
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fe fd72 	bl	8002a98 <_ZN21sensors_53l5a1_driver7control7getTypeEv>
 8003fb4:	4603      	mov	r3, r0
  }
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <_ZN3ros10SubscriberIN21sensors_53l5a1_driver7controlEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fd72 	bl	8002ab4 <_ZN21sensors_53l5a1_driver7control6getMD5Ev>
 8003fd0:	4603      	mov	r3, r0
  }
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE8callbackEPh>:
  virtual void callback(unsigned char* data) override
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
 8003fe2:	6039      	str	r1, [r7, #0]
    msg.deserialize(data);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	6839      	ldr	r1, [r7, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fc3c 	bl	8001868 <_ZN8std_msgs5Empty11deserializeEPh>
    this->cb_(msg);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	320c      	adds	r2, #12
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4798      	blx	r3
  }
 8003ffc:	bf00      	nop
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE15getEndpointTypeEv>:
  virtual int getEndpointType() override
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
    return endpoint_;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
  }
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	330c      	adds	r3, #12
 8004028:	4618      	mov	r0, r3
 800402a:	f7fd fc2b 	bl	8001884 <_ZN8std_msgs5Empty7getTypeEv>
 800402e:	4603      	mov	r3, r0
  }
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <_ZN3ros10SubscriberIN8std_msgs5EmptyEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	330c      	adds	r3, #12
 8004044:	4618      	mov	r0, r3
 8004046:	f7fd fc2b 	bl	80018a0 <_ZN8std_msgs5Empty6getMD5Ev>
 800404a:	4603      	mov	r3, r0
  }
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
    return configured_;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 53b8 	add.w	r3, r3, #5888	; 0x1700
 8004062:	781b      	ldrb	r3, [r3, #0]
  };
 8004064:	4618      	mov	r0, r3
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <_GLOBAL__sub_I_Result_User>:
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
 8004074:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004078:	2001      	movs	r0, #1
 800407a:	f7ff fed9 	bl	8003e30 <_Z41__static_initialization_and_destruction_0ii>
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <HAL_MspInit+0x4c>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	4a0f      	ldr	r2, [pc, #60]	; (80040cc <HAL_MspInit+0x4c>)
 8004090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004094:	6453      	str	r3, [r2, #68]	; 0x44
 8004096:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <HAL_MspInit+0x4c>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	2300      	movs	r3, #0
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_MspInit+0x4c>)
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	4a08      	ldr	r2, [pc, #32]	; (80040cc <HAL_MspInit+0x4c>)
 80040ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6413      	str	r3, [r2, #64]	; 0x40
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_MspInit+0x4c>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80040be:	2007      	movs	r0, #7
 80040c0:	f003 ff4a 	bl	8007f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040c4:	bf00      	nop
 80040c6:	3708      	adds	r7, #8
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	40023800 	.word	0x40023800

080040d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040d4:	e7fe      	b.n	80040d4 <NMI_Handler+0x4>
	...

080040d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80040dc:	2120      	movs	r1, #32
 80040de:	4807      	ldr	r0, [pc, #28]	; (80040fc <HardFault_Handler+0x24>)
 80040e0:	f004 fe17 	bl	8008d12 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 80040e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040e8:	f003 fe42 	bl	8007d70 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80040ec:	2120      	movs	r1, #32
 80040ee:	4803      	ldr	r0, [pc, #12]	; (80040fc <HardFault_Handler+0x24>)
 80040f0:	f004 fe0f 	bl	8008d12 <HAL_GPIO_TogglePin>
	HAL_Delay(200);
 80040f4:	20c8      	movs	r0, #200	; 0xc8
 80040f6:	f003 fe3b 	bl	8007d70 <HAL_Delay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80040fa:	e7ef      	b.n	80040dc <HardFault_Handler+0x4>
 80040fc:	40020000 	.word	0x40020000

08004100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004104:	e7fe      	b.n	8004104 <MemManage_Handler+0x4>

08004106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004106:	b480      	push	{r7}
 8004108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800410a:	e7fe      	b.n	800410a <BusFault_Handler+0x4>

0800410c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004110:	e7fe      	b.n	8004110 <UsageFault_Handler+0x4>

08004112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004112:	b480      	push	{r7}
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800412e:	b480      	push	{r7}
 8004130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004140:	f003 fdf6 	bl	8007d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}

08004148 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800414c:	2010      	movs	r0, #16
 800414e:	f004 fdfb 	bl	8008d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <DMA1_Stream5_IRQHandler+0x10>)
 800415e:	f004 f8d5 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	200053d4 	.word	0x200053d4

0800416c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <DMA1_Stream6_IRQHandler+0x10>)
 8004172:	f004 f8cb 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20005434 	.word	0x20005434

08004180 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <USART2_IRQHandler+0x10>)
 8004186:	f006 fb85 	bl	800a894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20005494 	.word	0x20005494

08004194 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004198:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800419c:	f004 fdd4 	bl	8008d48 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80041a0:	bf00      	nop
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80041aa:	2300      	movs	r3, #0
 80041ac:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80041ae:	4b13      	ldr	r3, [pc, #76]	; (80041fc <BSP_I2C1_Init+0x58>)
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <BSP_I2C1_Init+0x5c>)
 80041b2:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80041b4:	4b13      	ldr	r3, [pc, #76]	; (8004204 <BSP_I2C1_Init+0x60>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	4912      	ldr	r1, [pc, #72]	; (8004204 <BSP_I2C1_Init+0x60>)
 80041bc:	600a      	str	r2, [r1, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d117      	bne.n	80041f2 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80041c2:	480e      	ldr	r0, [pc, #56]	; (80041fc <BSP_I2C1_Init+0x58>)
 80041c4:	f005 fa80 	bl	80096c8 <HAL_I2C_GetState>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d111      	bne.n	80041f2 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80041ce:	480b      	ldr	r0, [pc, #44]	; (80041fc <BSP_I2C1_Init+0x58>)
 80041d0:	f000 f8e2 	bl	8004398 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10b      	bne.n	80041f2 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80041da:	4808      	ldr	r0, [pc, #32]	; (80041fc <BSP_I2C1_Init+0x58>)
 80041dc:	f000 f8a8 	bl	8004330 <MX_I2C1_Init>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80041e6:	f06f 0307 	mvn.w	r3, #7
 80041ea:	607b      	str	r3, [r7, #4]
 80041ec:	e001      	b.n	80041f2 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80041f2:	687b      	ldr	r3, [r7, #4]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	20005380 	.word	0x20005380
 8004200:	40005400 	.word	0x40005400
 8004204:	20002830 	.word	0x20002830

08004208 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800420e:	2300      	movs	r3, #0
 8004210:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8004212:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <BSP_I2C1_DeInit+0x48>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d014      	beq.n	8004244 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <BSP_I2C1_DeInit+0x48>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3b01      	subs	r3, #1
 8004220:	4a0b      	ldr	r2, [pc, #44]	; (8004250 <BSP_I2C1_DeInit+0x48>)
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b0a      	ldr	r3, [pc, #40]	; (8004250 <BSP_I2C1_DeInit+0x48>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800422c:	4809      	ldr	r0, [pc, #36]	; (8004254 <BSP_I2C1_DeInit+0x4c>)
 800422e:	f000 f8fd 	bl	800442c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8004232:	4808      	ldr	r0, [pc, #32]	; (8004254 <BSP_I2C1_DeInit+0x4c>)
 8004234:	f004 fee4 	bl	8009000 <HAL_I2C_DeInit>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800423e:	f06f 0307 	mvn.w	r3, #7
 8004242:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8004244:	687b      	ldr	r3, [r7, #4]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20002830 	.word	0x20002830
 8004254:	20005380 	.word	0x20005380

08004258 <BSP_I2C1_WriteReg16>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af04      	add	r7, sp, #16
 800425e:	60ba      	str	r2, [r7, #8]
 8004260:	461a      	mov	r2, r3
 8004262:	4603      	mov	r3, r0
 8004264:	81fb      	strh	r3, [r7, #14]
 8004266:	460b      	mov	r3, r1
 8004268:	81bb      	strh	r3, [r7, #12]
 800426a:	4613      	mov	r3, r2
 800426c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004272:	89ba      	ldrh	r2, [r7, #12]
 8004274:	89f9      	ldrh	r1, [r7, #14]
 8004276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800427a:	9302      	str	r3, [sp, #8]
 800427c:	88fb      	ldrh	r3, [r7, #6]
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	9300      	str	r3, [sp, #0]
 8004284:	2310      	movs	r3, #16
 8004286:	480c      	ldr	r0, [pc, #48]	; (80042b8 <BSP_I2C1_WriteReg16+0x60>)
 8004288:	f004 fefe 	bl	8009088 <HAL_I2C_Mem_Write>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00c      	beq.n	80042ac <BSP_I2C1_WriteReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8004292:	4809      	ldr	r0, [pc, #36]	; (80042b8 <BSP_I2C1_WriteReg16+0x60>)
 8004294:	f005 fa26 	bl	80096e4 <HAL_I2C_GetError>
 8004298:	4603      	mov	r3, r0
 800429a:	2b04      	cmp	r3, #4
 800429c:	d103      	bne.n	80042a6 <BSP_I2C1_WriteReg16+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800429e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	e002      	b.n	80042ac <BSP_I2C1_WriteReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80042a6:	f06f 0303 	mvn.w	r3, #3
 80042aa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80042ac:	697b      	ldr	r3, [r7, #20]
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20005380 	.word	0x20005380

080042bc <BSP_I2C1_ReadReg16>:
  * @param  Reg: The target register address to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b08a      	sub	sp, #40	; 0x28
 80042c0:	af04      	add	r7, sp, #16
 80042c2:	60ba      	str	r2, [r7, #8]
 80042c4:	461a      	mov	r2, r3
 80042c6:	4603      	mov	r3, r0
 80042c8:	81fb      	strh	r3, [r7, #14]
 80042ca:	460b      	mov	r3, r1
 80042cc:	81bb      	strh	r3, [r7, #12]
 80042ce:	4613      	mov	r3, r2
 80042d0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80042d6:	89ba      	ldrh	r2, [r7, #12]
 80042d8:	89f9      	ldrh	r1, [r7, #14]
 80042da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042de:	9302      	str	r3, [sp, #8]
 80042e0:	88fb      	ldrh	r3, [r7, #6]
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	2310      	movs	r3, #16
 80042ea:	480c      	ldr	r0, [pc, #48]	; (800431c <BSP_I2C1_ReadReg16+0x60>)
 80042ec:	f004 ffc6 	bl	800927c <HAL_I2C_Mem_Read>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00c      	beq.n	8004310 <BSP_I2C1_ReadReg16+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 80042f6:	4809      	ldr	r0, [pc, #36]	; (800431c <BSP_I2C1_ReadReg16+0x60>)
 80042f8:	f005 f9f4 	bl	80096e4 <HAL_I2C_GetError>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d003      	beq.n	800430a <BSP_I2C1_ReadReg16+0x4e>
    {
      ret =  BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004302:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8004306:	617b      	str	r3, [r7, #20]
 8004308:	e002      	b.n	8004310 <BSP_I2C1_ReadReg16+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800430a:	f06f 0303 	mvn.w	r3, #3
 800430e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8004310:	697b      	ldr	r3, [r7, #20]
}
 8004312:	4618      	mov	r0, r3
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20005380 	.word	0x20005380

08004320 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004324:	f003 fd18 	bl	8007d58 <HAL_GetTick>
 8004328:	4603      	mov	r3, r0
}
 800432a:	4618      	mov	r0, r3
 800432c:	bd80      	pop	{r7, pc}
	...

08004330 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a14      	ldr	r2, [pc, #80]	; (8004390 <MX_I2C1_Init+0x60>)
 8004340:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 400000;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <MX_I2C1_Init+0x64>)
 8004346:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800435a:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f004 fcff 	bl	8008d78 <HAL_I2C_Init>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004384:	7bfb      	ldrb	r3, [r7, #15]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3710      	adds	r7, #16
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40005400 	.word	0x40005400
 8004394:	00061a80 	.word	0x00061a80

08004398 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b08a      	sub	sp, #40	; 0x28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	4b1f      	ldr	r3, [pc, #124]	; (8004424 <I2C1_MspInit+0x8c>)
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	4a1e      	ldr	r2, [pc, #120]	; (8004424 <I2C1_MspInit+0x8c>)
 80043aa:	f043 0302 	orr.w	r3, r3, #2
 80043ae:	6313      	str	r3, [r2, #48]	; 0x30
 80043b0:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <I2C1_MspInit+0x8c>)
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	f003 0302 	and.w	r3, r3, #2
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80043bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043c2:	2312      	movs	r3, #18
 80043c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ca:	2303      	movs	r3, #3
 80043cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80043ce:	2304      	movs	r3, #4
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80043d2:	f107 0314 	add.w	r3, r7, #20
 80043d6:	4619      	mov	r1, r3
 80043d8:	4813      	ldr	r0, [pc, #76]	; (8004428 <I2C1_MspInit+0x90>)
 80043da:	f004 fa01 	bl	80087e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80043de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80043e4:	2312      	movs	r3, #18
 80043e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e8:	2300      	movs	r3, #0
 80043ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043ec:	2303      	movs	r3, #3
 80043ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80043f0:	2304      	movs	r3, #4
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80043f4:	f107 0314 	add.w	r3, r7, #20
 80043f8:	4619      	mov	r1, r3
 80043fa:	480b      	ldr	r0, [pc, #44]	; (8004428 <I2C1_MspInit+0x90>)
 80043fc:	f004 f9f0 	bl	80087e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004400:	2300      	movs	r3, #0
 8004402:	60fb      	str	r3, [r7, #12]
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <I2C1_MspInit+0x8c>)
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	4a06      	ldr	r2, [pc, #24]	; (8004424 <I2C1_MspInit+0x8c>)
 800440a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800440e:	6413      	str	r3, [r2, #64]	; 0x40
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <I2C1_MspInit+0x8c>)
 8004412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004418:	60fb      	str	r3, [r7, #12]
 800441a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 800441c:	bf00      	nop
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	40023800 	.word	0x40023800
 8004428:	40020400 	.word	0x40020400

0800442c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8004434:	4b09      	ldr	r3, [pc, #36]	; (800445c <I2C1_MspDeInit+0x30>)
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	4a08      	ldr	r2, [pc, #32]	; (800445c <I2C1_MspDeInit+0x30>)
 800443a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800443e:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8004440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004444:	4806      	ldr	r0, [pc, #24]	; (8004460 <I2C1_MspDeInit+0x34>)
 8004446:	f004 fb4f 	bl	8008ae8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 800444a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800444e:	4804      	ldr	r0, [pc, #16]	; (8004460 <I2C1_MspDeInit+0x34>)
 8004450:	f004 fb4a 	bl	8008ae8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8004454:	bf00      	nop
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40023800 	.word	0x40023800
 8004460:	40020400 	.word	0x40020400

08004464 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
	return 1;
 8004468:	2301      	movs	r3, #1
}
 800446a:	4618      	mov	r0, r3
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <_kill>:

int _kill(int pid, int sig)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800447e:	f007 fa81 	bl	800b984 <__errno>
 8004482:	4603      	mov	r3, r0
 8004484:	2216      	movs	r2, #22
 8004486:	601a      	str	r2, [r3, #0]
	return -1;
 8004488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800448c:	4618      	mov	r0, r3
 800448e:	3708      	adds	r7, #8
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_exit>:

void _exit (int status)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800449c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ffe7 	bl	8004474 <_kill>
	while (1) {}		/* Make sure we hang here */
 80044a6:	e7fe      	b.n	80044a6 <_exit+0x12>

080044a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044b0:	4a14      	ldr	r2, [pc, #80]	; (8004504 <_sbrk+0x5c>)
 80044b2:	4b15      	ldr	r3, [pc, #84]	; (8004508 <_sbrk+0x60>)
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044bc:	4b13      	ldr	r3, [pc, #76]	; (800450c <_sbrk+0x64>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d102      	bne.n	80044ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044c4:	4b11      	ldr	r3, [pc, #68]	; (800450c <_sbrk+0x64>)
 80044c6:	4a12      	ldr	r2, [pc, #72]	; (8004510 <_sbrk+0x68>)
 80044c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044ca:	4b10      	ldr	r3, [pc, #64]	; (800450c <_sbrk+0x64>)
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4413      	add	r3, r2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d207      	bcs.n	80044e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044d8:	f007 fa54 	bl	800b984 <__errno>
 80044dc:	4603      	mov	r3, r0
 80044de:	220c      	movs	r2, #12
 80044e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044e6:	e009      	b.n	80044fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044e8:	4b08      	ldr	r3, [pc, #32]	; (800450c <_sbrk+0x64>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044ee:	4b07      	ldr	r3, [pc, #28]	; (800450c <_sbrk+0x64>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4413      	add	r3, r2
 80044f6:	4a05      	ldr	r2, [pc, #20]	; (800450c <_sbrk+0x64>)
 80044f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044fa:	68fb      	ldr	r3, [r7, #12]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	20018000 	.word	0x20018000
 8004508:	00000400 	.word	0x00000400
 800450c:	20002834 	.word	0x20002834
 8004510:	200054f0 	.word	0x200054f0

08004514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <SystemInit+0x20>)
 800451a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451e:	4a05      	ldr	r2, [pc, #20]	; (8004534 <SystemInit+0x20>)
 8004520:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004524:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 800453e:	4a12      	ldr	r2, [pc, #72]	; (8004588 <MX_USART2_UART_Init+0x50>)
 8004540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004542:	4b10      	ldr	r3, [pc, #64]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 8004544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 800454c:	2200      	movs	r2, #0
 800454e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004550:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 8004552:	2200      	movs	r2, #0
 8004554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004556:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 8004558:	2200      	movs	r2, #0
 800455a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800455c:	4b09      	ldr	r3, [pc, #36]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 800455e:	220c      	movs	r2, #12
 8004560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004562:	4b08      	ldr	r3, [pc, #32]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 8004564:	2200      	movs	r2, #0
 8004566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 800456a:	2200      	movs	r2, #0
 800456c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800456e:	4805      	ldr	r0, [pc, #20]	; (8004584 <MX_USART2_UART_Init+0x4c>)
 8004570:	f006 f894 	bl	800a69c <HAL_UART_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800457a:	f7fc f973 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800457e:	bf00      	nop
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	20005494 	.word	0x20005494
 8004588:	40004400 	.word	0x40004400

0800458c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08a      	sub	sp, #40	; 0x28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4c      	ldr	r2, [pc, #304]	; (80046dc <HAL_UART_MspInit+0x150>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	f040 8092 	bne.w	80046d4 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80045b0:	2300      	movs	r3, #0
 80045b2:	613b      	str	r3, [r7, #16]
 80045b4:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_UART_MspInit+0x154>)
 80045b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b8:	4a49      	ldr	r2, [pc, #292]	; (80046e0 <HAL_UART_MspInit+0x154>)
 80045ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045be:	6413      	str	r3, [r2, #64]	; 0x40
 80045c0:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_UART_MspInit+0x154>)
 80045c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]
 80045d0:	4b43      	ldr	r3, [pc, #268]	; (80046e0 <HAL_UART_MspInit+0x154>)
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	4a42      	ldr	r2, [pc, #264]	; (80046e0 <HAL_UART_MspInit+0x154>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	6313      	str	r3, [r2, #48]	; 0x30
 80045dc:	4b40      	ldr	r3, [pc, #256]	; (80046e0 <HAL_UART_MspInit+0x154>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	60fb      	str	r3, [r7, #12]
 80045e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80045e8:	230c      	movs	r3, #12
 80045ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ec:	2302      	movs	r3, #2
 80045ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f4:	2300      	movs	r3, #0
 80045f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80045f8:	2307      	movs	r3, #7
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	4619      	mov	r1, r3
 8004602:	4838      	ldr	r0, [pc, #224]	; (80046e4 <HAL_UART_MspInit+0x158>)
 8004604:	f004 f8ec 	bl	80087e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8004608:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 800460a:	4a38      	ldr	r2, [pc, #224]	; (80046ec <HAL_UART_MspInit+0x160>)
 800460c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800460e:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 8004610:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004614:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004616:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 8004618:	2200      	movs	r2, #0
 800461a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800461c:	4b32      	ldr	r3, [pc, #200]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 800461e:	2200      	movs	r2, #0
 8004620:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004622:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 8004624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004628:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 800462c:	2200      	movs	r2, #0
 800462e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004630:	4b2d      	ldr	r3, [pc, #180]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 8004632:	2200      	movs	r2, #0
 8004634:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004636:	4b2c      	ldr	r3, [pc, #176]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 8004638:	2200      	movs	r2, #0
 800463a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800463c:	4b2a      	ldr	r3, [pc, #168]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 800463e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004642:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004644:	4b28      	ldr	r3, [pc, #160]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 8004646:	2200      	movs	r2, #0
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800464a:	4827      	ldr	r0, [pc, #156]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 800464c:	f003 fcc6 	bl	8007fdc <HAL_DMA_Init>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8004656:	f7fc f905 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a22      	ldr	r2, [pc, #136]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
 8004660:	4a21      	ldr	r2, [pc, #132]	; (80046e8 <HAL_UART_MspInit+0x15c>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <HAL_UART_MspInit+0x164>)
 8004668:	4a22      	ldr	r2, [pc, #136]	; (80046f4 <HAL_UART_MspInit+0x168>)
 800466a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800466c:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_UART_MspInit+0x164>)
 800466e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004672:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004674:	4b1e      	ldr	r3, [pc, #120]	; (80046f0 <HAL_UART_MspInit+0x164>)
 8004676:	2240      	movs	r2, #64	; 0x40
 8004678:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_UART_MspInit+0x164>)
 800467c:	2200      	movs	r2, #0
 800467e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <HAL_UART_MspInit+0x164>)
 8004682:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004686:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004688:	4b19      	ldr	r3, [pc, #100]	; (80046f0 <HAL_UART_MspInit+0x164>)
 800468a:	2200      	movs	r2, #0
 800468c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <HAL_UART_MspInit+0x164>)
 8004690:	2200      	movs	r2, #0
 8004692:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004694:	4b16      	ldr	r3, [pc, #88]	; (80046f0 <HAL_UART_MspInit+0x164>)
 8004696:	2200      	movs	r2, #0
 8004698:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800469a:	4b15      	ldr	r3, [pc, #84]	; (80046f0 <HAL_UART_MspInit+0x164>)
 800469c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046a0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046a2:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_UART_MspInit+0x164>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80046a8:	4811      	ldr	r0, [pc, #68]	; (80046f0 <HAL_UART_MspInit+0x164>)
 80046aa:	f003 fc97 	bl	8007fdc <HAL_DMA_Init>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 80046b4:	f7fc f8d6 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a0d      	ldr	r2, [pc, #52]	; (80046f0 <HAL_UART_MspInit+0x164>)
 80046bc:	635a      	str	r2, [r3, #52]	; 0x34
 80046be:	4a0c      	ldr	r2, [pc, #48]	; (80046f0 <HAL_UART_MspInit+0x164>)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80046c4:	2200      	movs	r2, #0
 80046c6:	2100      	movs	r1, #0
 80046c8:	2026      	movs	r0, #38	; 0x26
 80046ca:	f003 fc50 	bl	8007f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80046ce:	2026      	movs	r0, #38	; 0x26
 80046d0:	f003 fc69 	bl	8007fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80046d4:	bf00      	nop
 80046d6:	3728      	adds	r7, #40	; 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40004400 	.word	0x40004400
 80046e0:	40023800 	.word	0x40023800
 80046e4:	40020000 	.word	0x40020000
 80046e8:	200053d4 	.word	0x200053d4
 80046ec:	40026088 	.word	0x40026088
 80046f0:	20005434 	.word	0x20005434
 80046f4:	400260a0 	.word	0x400260a0

080046f8 <vl53l5cx_get_result_user>:
 * vl53l5cx_get_result_user) in Drivers/BSP/Components/vl53l5cx/vl53l5cx.c
 * @details
 * Added additional diagnostic data at the end of the function
 */
int32_t vl53l5cx_get_result_user(VL53L5CX_Object_t *pObj, VL53L5CX_Result_User_t *pResult)
{
 80046f8:	b5b0      	push	{r4, r5, r7, lr}
 80046fa:	f5ad 6dfc 	sub.w	sp, sp, #2016	; 0x7e0
 80046fe:	af00      	add	r7, sp, #0
 8004700:	1d3b      	adds	r3, r7, #4
 8004702:	6018      	str	r0, [r3, #0]
 8004704:	463b      	mov	r3, r7
 8004706:	6019      	str	r1, [r3, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  VL53L5CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <vl53l5cx_get_result_user+0x20>
 8004710:	463b      	mov	r3, r7
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <vl53l5cx_get_result_user+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8004718:	f06f 0301 	mvn.w	r3, #1
 800471c:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8004720:	e14a      	b.n	80049b8 <vl53l5cx_get_result_user+0x2c0>
  }
  else if (vl53l5cx_get_resolution(&pObj->Dev, &resolution) != VL53L5CX_STATUS_OK)
 8004722:	1d3b      	adds	r3, r7, #4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3318      	adds	r3, #24
 8004728:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 800472c:	4611      	mov	r1, r2
 800472e:	4618      	mov	r0, r3
 8004730:	f001 ff9a 	bl	8006668 <vl53l5cx_get_resolution>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d004      	beq.n	8004744 <vl53l5cx_get_result_user+0x4c>
  {
    ret = VL53L5CX_ERROR;
 800473a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800473e:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8004742:	e139      	b.n	80049b8 <vl53l5cx_get_result_user+0x2c0>
  }
  else if (vl53l5cx_get_ranging_data(&pObj->Dev, &data) != VL53L5CX_STATUS_OK)
 8004744:	1d3b      	adds	r3, r7, #4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3318      	adds	r3, #24
 800474a:	f107 020c 	add.w	r2, r7, #12
 800474e:	4611      	mov	r1, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f001 fdbb 	bl	80062cc <vl53l5cx_get_ranging_data>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d004      	beq.n	8004766 <vl53l5cx_get_result_user+0x6e>
  {
    ret = VL53L5CX_ERROR;
 800475c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004760:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8004764:	e128      	b.n	80049b8 <vl53l5cx_get_result_user+0x2c0>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8004766:	f897 37d8 	ldrb.w	r3, [r7, #2008]	; 0x7d8
 800476a:	461a      	mov	r2, r3
 800476c:	463b      	mov	r3, r7
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8004772:	2300      	movs	r3, #0
 8004774:	f887 37db 	strb.w	r3, [r7, #2011]	; 0x7db
 8004778:	e114      	b.n	80049a4 <vl53l5cx_get_result_user+0x2ac>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 800477a:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 800477e:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8004782:	f107 010c 	add.w	r1, r7, #12
 8004786:	440b      	add	r3, r1
 8004788:	f893 0100 	ldrb.w	r0, [r3, #256]	; 0x100
 800478c:	463b      	mov	r3, r7
 800478e:	6819      	ldr	r1, [r3, #0]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	440b      	add	r3, r1
 800479a:	3304      	adds	r3, #4
 800479c:	4602      	mov	r2, r0
 800479e:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 80047a0:	2300      	movs	r3, #0
 80047a2:	f887 37da 	strb.w	r3, [r7, #2010]	; 0x7da
 80047a6:	e0ec      	b.n	8004982 <vl53l5cx_get_result_user+0x28a>
      {
        pResult->ZoneResult[i].Distance[j] = data.distance_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 80047a8:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 80047ac:	005a      	lsls	r2, r3, #1
 80047ae:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 80047b2:	441a      	add	r2, r3
 80047b4:	f107 030c 	add.w	r3, r7, #12
 80047b8:	f502 7228 	add.w	r2, r2, #672	; 0x2a0
 80047bc:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80047c0:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 80047c4:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 80047c8:	b29c      	uxth	r4, r3
 80047ca:	463b      	mov	r3, r7
 80047cc:	6819      	ldr	r1, [r3, #0]
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4403      	add	r3, r0
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	440b      	add	r3, r1
 80047dc:	4622      	mov	r2, r4
 80047de:	80da      	strh	r2, [r3, #6]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 80047e0:	1d3b      	adds	r3, r7, #4
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f893 3d4c 	ldrb.w	r3, [r3, #3404]	; 0xd4c
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d115      	bne.n	8004818 <vl53l5cx_get_result_user+0x120>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = data.ambient_per_spad[i];
 80047ec:	f897 17db 	ldrb.w	r1, [r7, #2011]	; 0x7db
 80047f0:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 80047f4:	f897 47da 	ldrb.w	r4, [r7, #2010]	; 0x7da
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004800:	463b      	mov	r3, r7
 8004802:	6818      	ldr	r0, [r3, #0]
 8004804:	4613      	mov	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	4413      	add	r3, r2
 800480a:	005b      	lsls	r3, r3, #1
 800480c:	4423      	add	r3, r4
 800480e:	3302      	adds	r3, #2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4403      	add	r3, r0
 8004814:	6059      	str	r1, [r3, #4]
 8004816:	e00f      	b.n	8004838 <vl53l5cx_get_result_user+0x140>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0;
 8004818:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 800481c:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8004820:	463b      	mov	r3, r7
 8004822:	6819      	ldr	r1, [r3, #0]
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4403      	add	r3, r0
 800482e:	3302      	adds	r3, #2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	2200      	movs	r2, #0
 8004836:	605a      	str	r2, [r3, #4]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8004838:	1d3b      	adds	r3, r7, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f893 3d4d 	ldrb.w	r3, [r3, #3405]	; 0xd4d
 8004840:	2b01      	cmp	r3, #1
 8004842:	d11a      	bne.n	800487a <vl53l5cx_get_result_user+0x182>
        {
          pResult->ZoneResult[i].Signal[j] =
            data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8004844:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8004848:	005a      	lsls	r2, r3, #1
 800484a:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 800484e:	18d1      	adds	r1, r2, r3
          pResult->ZoneResult[i].Signal[j] =
 8004850:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8004854:	f897 47da 	ldrb.w	r4, [r7, #2010]	; 0x7da
            data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8004858:	f107 030c 	add.w	r3, r7, #12
 800485c:	3190      	adds	r1, #144	; 0x90
 800485e:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
          pResult->ZoneResult[i].Signal[j] =
 8004862:	463b      	mov	r3, r7
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	005b      	lsls	r3, r3, #1
 800486e:	4423      	add	r3, r4
 8004870:	3304      	adds	r3, #4
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4403      	add	r3, r0
 8004876:	6059      	str	r1, [r3, #4]
 8004878:	e00f      	b.n	800489a <vl53l5cx_get_result_user+0x1a2>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0;
 800487a:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 800487e:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8004882:	463b      	mov	r3, r7
 8004884:	6819      	ldr	r1, [r3, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	4403      	add	r3, r0
 8004890:	3304      	adds	r3, #4
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	440b      	add	r3, r1
 8004896:	2200      	movs	r2, #0
 8004898:	605a      	str	r2, [r3, #4]
        }

        target_status = data.target_status[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800489a:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 800489e:	005a      	lsls	r2, r3, #1
 80048a0:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 80048a4:	4413      	add	r3, r2
 80048a6:	f107 020c 	add.w	r2, r7, #12
 80048aa:	4413      	add	r3, r2
 80048ac:	f893 36c0 	ldrb.w	r3, [r3, #1728]	; 0x6c0
 80048b0:	f887 37d9 	strb.w	r3, [r7, #2009]	; 0x7d9
        pResult->ZoneResult[i].Status[j] = vl53l5cx_map_target_status_user(target_status);
 80048b4:	f897 47db 	ldrb.w	r4, [r7, #2011]	; 0x7db
 80048b8:	f897 57da 	ldrb.w	r5, [r7, #2010]	; 0x7da
 80048bc:	f897 37d9 	ldrb.w	r3, [r7, #2009]	; 0x7d9
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 f880 	bl	80049c6 <vl53l5cx_map_target_status_user>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4619      	mov	r1, r3
 80048ca:	463b      	mov	r3, r7
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	4623      	mov	r3, r4
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4423      	add	r3, r4
 80048d4:	00db      	lsls	r3, r3, #3
 80048d6:	4413      	add	r3, r2
 80048d8:	442b      	add	r3, r5
 80048da:	330a      	adds	r3, #10
 80048dc:	460a      	mov	r2, r1
 80048de:	701a      	strb	r2, [r3, #0]
        pResult->ZoneResult[i].Spads[j] = data.nb_spads_enabled[i];
 80048e0:	f897 17db 	ldrb.w	r1, [r7, #2011]	; 0x7db
 80048e4:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 80048e8:	f897 47da 	ldrb.w	r4, [r7, #2010]	; 0x7da
 80048ec:	f107 030c 	add.w	r3, r7, #12
 80048f0:	3150      	adds	r1, #80	; 0x50
 80048f2:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80048f6:	463b      	mov	r3, r7
 80048f8:	6818      	ldr	r0, [r3, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	4423      	add	r3, r4
 8004904:	3306      	adds	r3, #6
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4403      	add	r3, r0
 800490a:	6059      	str	r1, [r3, #4]
        pResult->ZoneResult[i].Sigma[j] = data.range_sigma_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 800490c:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8004910:	005a      	lsls	r2, r3, #1
 8004912:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 8004916:	18d1      	adds	r1, r2, r3
 8004918:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 800491c:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	f501 7108 	add.w	r1, r1, #544	; 0x220
 8004928:	f833 4011 	ldrh.w	r4, [r3, r1, lsl #1]
 800492c:	463b      	mov	r3, r7
 800492e:	6819      	ldr	r1, [r3, #0]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4403      	add	r3, r0
 800493a:	3310      	adds	r3, #16
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	440b      	add	r3, r1
 8004940:	4622      	mov	r2, r4
 8004942:	809a      	strh	r2, [r3, #4]
        pResult->ZoneResult[i].Reflectance[j] = data.reflectance[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8004944:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8004948:	005a      	lsls	r2, r3, #1
 800494a:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 800494e:	4413      	add	r3, r2
 8004950:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8004954:	f897 17da 	ldrb.w	r1, [r7, #2010]	; 0x7da
 8004958:	f107 000c 	add.w	r0, r7, #12
 800495c:	4403      	add	r3, r0
 800495e:	f893 4640 	ldrb.w	r4, [r3, #1600]	; 0x640
 8004962:	463b      	mov	r3, r7
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4403      	add	r3, r0
 8004970:	440b      	add	r3, r1
 8004972:	3328      	adds	r3, #40	; 0x28
 8004974:	4622      	mov	r2, r4
 8004976:	701a      	strb	r2, [r3, #0]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8004978:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 800497c:	3301      	adds	r3, #1
 800497e:	f887 37da 	strb.w	r3, [r7, #2010]	; 0x7da
 8004982:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8004986:	f107 020c 	add.w	r2, r7, #12
 800498a:	4413      	add	r3, r2
 800498c:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8004990:	f897 27da 	ldrb.w	r2, [r7, #2010]	; 0x7da
 8004994:	429a      	cmp	r2, r3
 8004996:	f4ff af07 	bcc.w	80047a8 <vl53l5cx_get_result_user+0xb0>
    for (i = 0; i < resolution; i++)
 800499a:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 800499e:	3301      	adds	r3, #1
 80049a0:	f887 37db 	strb.w	r3, [r7, #2011]	; 0x7db
 80049a4:	f897 37d8 	ldrb.w	r3, [r7, #2008]	; 0x7d8
 80049a8:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 80049ac:	429a      	cmp	r2, r3
 80049ae:	f4ff aee4 	bcc.w	800477a <vl53l5cx_get_result_user+0x82>
      }
    }

    ret = VL53L5CX_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
  }

  return ret;
 80049b8:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
}
 80049bc:	4618      	mov	r0, r3
 80049be:	f507 67fc 	add.w	r7, r7, #2016	; 0x7e0
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bdb0      	pop	{r4, r5, r7, pc}

080049c6 <vl53l5cx_map_target_status_user>:
 * vl53l5cx_map_target_status_user() in Drivers/BSP/Components/vl53l5cx/vl53l5cx.c
 * @details
 * Had to be copied since it is not accessible in the driver
 */
uint8_t vl53l5cx_map_target_status_user(uint8_t status)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	4603      	mov	r3, r0
 80049ce:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	2b05      	cmp	r3, #5
 80049d4:	d002      	beq.n	80049dc <vl53l5cx_map_target_status_user+0x16>
 80049d6:	79fb      	ldrb	r3, [r7, #7]
 80049d8:	2b09      	cmp	r3, #9
 80049da:	d102      	bne.n	80049e2 <vl53l5cx_map_target_status_user+0x1c>
  {
    ret = 0U; /* ranging is OK */
 80049dc:	2300      	movs	r3, #0
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	e007      	b.n	80049f2 <vl53l5cx_map_target_status_user+0x2c>
  }
  else if (status == 0U)
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <vl53l5cx_map_target_status_user+0x28>
  {
    ret = 255U; /* no update */
 80049e8:	23ff      	movs	r3, #255	; 0xff
 80049ea:	73fb      	strb	r3, [r7, #15]
 80049ec:	e001      	b.n	80049f2 <vl53l5cx_map_target_status_user+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004a38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004a04:	480d      	ldr	r0, [pc, #52]	; (8004a3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004a06:	490e      	ldr	r1, [pc, #56]	; (8004a40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004a08:	4a0e      	ldr	r2, [pc, #56]	; (8004a44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a0c:	e002      	b.n	8004a14 <LoopCopyDataInit>

08004a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a12:	3304      	adds	r3, #4

08004a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a18:	d3f9      	bcc.n	8004a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a1a:	4a0b      	ldr	r2, [pc, #44]	; (8004a48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004a1c:	4c0b      	ldr	r4, [pc, #44]	; (8004a4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a20:	e001      	b.n	8004a26 <LoopFillZerobss>

08004a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a24:	3204      	adds	r2, #4

08004a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a28:	d3fb      	bcc.n	8004a22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004a2a:	f7ff fd73 	bl	8004514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004a2e:	f006 ffaf 	bl	800b990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a32:	f7fb fe2f 	bl	8000694 <main>
  bx  lr    
 8004a36:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004a38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004a3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a40:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8004a44:	08021ab0 	.word	0x08021ab0
  ldr r2, =_sbss
 8004a48:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8004a4c:	200054ec 	.word	0x200054ec

08004a50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a50:	e7fe      	b.n	8004a50 <ADC_IRQHandler>

08004a52 <VL53L5A1_RANGING_SENSOR_Init>:
  * @brief Initializes the ranging sensor.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Init(uint32_t Instance)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d903      	bls.n	8004a68 <VL53L5A1_RANGING_SENSOR_Init+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a60:	f06f 0301 	mvn.w	r3, #1
 8004a64:	60fb      	str	r3, [r7, #12]
 8004a66:	e005      	b.n	8004a74 <VL53L5A1_RANGING_SENSOR_Init+0x22>
  }
  else
  {
    /* run i2c recovery before probing the device */
    (void)vl53l5cx_i2c_recover();
 8004a68:	f000 f990 	bl	8004d8c <vl53l5cx_i2c_recover>
    ret = VL53L5CX_Probe(Instance);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f901 	bl	8004c74 <VL53L5CX_Probe>
 8004a72:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a74:	68fb      	ldr	r3, [r7, #12]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <VL53L5A1_RANGING_SENSOR_ReadID>:
  * @param Instance    Ranging sensor instance.
  * @param pId    Pointer to the device ID.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_ReadID(uint32_t Instance, uint32_t *pId)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d903      	bls.n	8004a98 <VL53L5A1_RANGING_SENSOR_ReadID+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004a90:	f06f 0301 	mvn.w	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	e012      	b.n	8004abe <VL53L5A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ReadID(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pId) < 0)
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <VL53L5A1_RANGING_SENSOR_ReadID+0x48>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	490b      	ldr	r1, [pc, #44]	; (8004acc <VL53L5A1_RANGING_SENSOR_ReadID+0x4c>)
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004aa6:	6839      	ldr	r1, [r7, #0]
 8004aa8:	4610      	mov	r0, r2
 8004aaa:	4798      	blx	r3
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	da03      	bge.n	8004aba <VL53L5A1_RANGING_SENSOR_ReadID+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ab2:	f06f 0304 	mvn.w	r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
 8004ab8:	e001      	b.n	8004abe <VL53L5A1_RANGING_SENSOR_ReadID+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004abe:	68fb      	ldr	r3, [r7, #12]
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	20002844 	.word	0x20002844
 8004acc:	20002838 	.word	0x20002838

08004ad0 <VL53L5A1_RANGING_SENSOR_GetCapabilities>:
  * @param Instance    Ranging sensor instance.
  * @param pCapabilities    Pointer to the ranging sensor capabilities.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_GetCapabilities(uint32_t Instance, RANGING_SENSOR_Capabilities_t *pCapabilities)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d903      	bls.n	8004ae8 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004ae0:	f06f 0301 	mvn.w	r3, #1
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e012      	b.n	8004b0e <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pCapabilities) < 0)
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x48>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	490b      	ldr	r1, [pc, #44]	; (8004b1c <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x4c>)
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004af6:	6839      	ldr	r1, [r7, #0]
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	da03      	bge.n	8004b0a <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b02:	f06f 0304 	mvn.w	r3, #4
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	e001      	b.n	8004b0e <VL53L5A1_RANGING_SENSOR_GetCapabilities+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20002844 	.word	0x20002844
 8004b1c:	20002838 	.word	0x20002838

08004b20 <VL53L5A1_RANGING_SENSOR_ConfigProfile>:
  * @param Instance    Ranging sensor instance.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_ConfigProfile(uint32_t Instance, RANGING_SENSOR_ProfileConfig_t *pConfig)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d903      	bls.n	8004b38 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b30:	f06f 0301 	mvn.w	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	e012      	b.n	8004b5e <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->ConfigProfile(VL53L5A1_RANGING_SENSOR_CompObj[Instance], pConfig) < 0)
 8004b38:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x48>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	490b      	ldr	r1, [pc, #44]	; (8004b6c <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x4c>)
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	4610      	mov	r0, r2
 8004b4a:	4798      	blx	r3
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	da03      	bge.n	8004b5a <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004b52:	f06f 0304 	mvn.w	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e001      	b.n	8004b5e <VL53L5A1_RANGING_SENSOR_ConfigProfile+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3710      	adds	r7, #16
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	20002844 	.word	0x20002844
 8004b6c:	20002838 	.word	0x20002838

08004b70 <VL53L5A1_RANGING_SENSOR_Start>:
  * @param Instance    Ranging sensor instance.
  * @param Mode        The desired ranging mode
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Start(uint32_t Instance, uint32_t Mode)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d903      	bls.n	8004b88 <VL53L5A1_RANGING_SENSOR_Start+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b80:	f06f 0301 	mvn.w	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e012      	b.n	8004bae <VL53L5A1_RANGING_SENSOR_Start+0x3e>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Start(VL53L5A1_RANGING_SENSOR_CompObj[Instance], Mode) < 0)
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <VL53L5A1_RANGING_SENSOR_Start+0x48>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6a1b      	ldr	r3, [r3, #32]
 8004b8e:	490b      	ldr	r1, [pc, #44]	; (8004bbc <VL53L5A1_RANGING_SENSOR_Start+0x4c>)
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	4610      	mov	r0, r2
 8004b9a:	4798      	blx	r3
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	da03      	bge.n	8004baa <VL53L5A1_RANGING_SENSOR_Start+0x3a>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004ba2:	f06f 0304 	mvn.w	r3, #4
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	e001      	b.n	8004bae <VL53L5A1_RANGING_SENSOR_Start+0x3e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	20002844 	.word	0x20002844
 8004bbc:	20002838 	.word	0x20002838

08004bc0 <VL53L5A1_RANGING_SENSOR_Stop>:
  * @brief Stop ranging.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_Stop(uint32_t Instance)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d903      	bls.n	8004bd6 <VL53L5A1_RANGING_SENSOR_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004bce:	f06f 0301 	mvn.w	r3, #1
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e011      	b.n	8004bfa <VL53L5A1_RANGING_SENSOR_Stop+0x3a>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->Stop(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) < 0)
 8004bd6:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <VL53L5A1_RANGING_SENSOR_Stop+0x44>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	490a      	ldr	r1, [pc, #40]	; (8004c08 <VL53L5A1_RANGING_SENSOR_Stop+0x48>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004be4:	4610      	mov	r0, r2
 8004be6:	4798      	blx	r3
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da03      	bge.n	8004bf6 <VL53L5A1_RANGING_SENSOR_Stop+0x36>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004bee:	f06f 0304 	mvn.w	r3, #4
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	e001      	b.n	8004bfa <VL53L5A1_RANGING_SENSOR_Stop+0x3a>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3710      	adds	r7, #16
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	20002844 	.word	0x20002844
 8004c08:	20002838 	.word	0x20002838

08004c0c <VL53L5A1_RANGING_SENSOR_SetPowerMode>:
  * @param Instance    Ranging sensor instance.
  * @param PowerMode    New power mode to be entered.
  * @retval BSP status
  */
int32_t VL53L5A1_RANGING_SENSOR_SetPowerMode(uint32_t Instance, uint32_t PowerMode)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= RANGING_SENSOR_INSTANCES_NBR)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d903      	bls.n	8004c24 <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004c1c:	f06f 0301 	mvn.w	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
 8004c22:	e01d      	b.n	8004c60 <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x54>
  }
  else if ((PowerMode != RANGING_SENSOR_POWERMODE_SLEEP) &&
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d006      	beq.n	8004c38 <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x2c>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d003      	beq.n	8004c38 <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x2c>
           (PowerMode != RANGING_SENSOR_POWERMODE_WAKEUP))
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004c30:	f06f 0301 	mvn.w	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e013      	b.n	8004c60 <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x54>
  }
  else if (VL53L5A1_RANGING_SENSOR_Drv->SetPowerMode(VL53L5A1_RANGING_SENSOR_CompObj[Instance], (uint8_t)PowerMode) < 0)
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x60>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3e:	490c      	ldr	r1, [pc, #48]	; (8004c70 <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x64>)
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004c46:	6839      	ldr	r1, [r7, #0]
 8004c48:	b2c9      	uxtb	r1, r1
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	4798      	blx	r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	da03      	bge.n	8004c5c <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x50>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004c54:	f06f 0304 	mvn.w	r3, #4
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e001      	b.n	8004c60 <VL53L5A1_RANGING_SENSOR_SetPowerMode+0x54>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004c60:	68fb      	ldr	r3, [r7, #12]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20002844 	.word	0x20002844
 8004c70:	20002838 	.word	0x20002838

08004c74 <VL53L5CX_Probe>:
  * @brief Register Bus IOs if component ID is OK.
  * @param Instance    Ranging sensor instance.
  * @retval BSP status
  */
static int32_t VL53L5CX_Probe(uint32_t Instance)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  VL53L5CX_IO_t              IOCtx;
  uint32_t                   id;
  static VL53L5CX_Object_t   VL53L5CXObj[RANGING_SENSOR_INSTANCES_NBR];

  /* Configure the ranging sensor driver */
  IOCtx.Address     = RANGING_SENSOR_VL53L5CX_ADDRESS;
 8004c7c:	2352      	movs	r3, #82	; 0x52
 8004c7e:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = VL53L5A1_I2C_Init;
 8004c80:	4b38      	ldr	r3, [pc, #224]	; (8004d64 <VL53L5CX_Probe+0xf0>)
 8004c82:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = VL53L5A1_I2C_DeInit;
 8004c84:	4b38      	ldr	r3, [pc, #224]	; (8004d68 <VL53L5CX_Probe+0xf4>)
 8004c86:	613b      	str	r3, [r7, #16]
  IOCtx.WriteReg    = VL53L5A1_I2C_WriteReg;
 8004c88:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <VL53L5CX_Probe+0xf8>)
 8004c8a:	61bb      	str	r3, [r7, #24]
  IOCtx.ReadReg     = VL53L5A1_I2C_ReadReg;
 8004c8c:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <VL53L5CX_Probe+0xfc>)
 8004c8e:	61fb      	str	r3, [r7, #28]
  IOCtx.GetTick     = VL53L5A1_GetTick;
 8004c90:	4b38      	ldr	r3, [pc, #224]	; (8004d74 <VL53L5CX_Probe+0x100>)
 8004c92:	623b      	str	r3, [r7, #32]

  if (VL53L5CX_RegisterBusIO(&(VL53L5CXObj[Instance]), &IOCtx) != VL53L5CX_OK)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f44f 6255 	mov.w	r2, #3408	; 0xd50
 8004c9a:	fb02 f303 	mul.w	r3, r2, r3
 8004c9e:	4a36      	ldr	r2, [pc, #216]	; (8004d78 <VL53L5CX_Probe+0x104>)
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f107 020c 	add.w	r2, r7, #12
 8004ca6:	4611      	mov	r1, r2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f002 fa86 	bl	80071ba <VL53L5CX_RegisterBusIO>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <VL53L5CX_Probe+0x48>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cb4:	f06f 0304 	mvn.w	r3, #4
 8004cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8004cba:	e04d      	b.n	8004d58 <VL53L5CX_Probe+0xe4>
  }
  else
  {
    VL53L5A1_RANGING_SENSOR_Drv = (RANGING_SENSOR_Drv_t *) &VL53L5CX_RANGING_SENSOR_Driver;
 8004cbc:	4b2f      	ldr	r3, [pc, #188]	; (8004d7c <VL53L5CX_Probe+0x108>)
 8004cbe:	4a30      	ldr	r2, [pc, #192]	; (8004d80 <VL53L5CX_Probe+0x10c>)
 8004cc0:	601a      	str	r2, [r3, #0]
    VL53L5A1_RANGING_SENSOR_CompObj[Instance] = &(VL53L5CXObj[Instance]);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f44f 6255 	mov.w	r2, #3408	; 0xd50
 8004cc8:	fb02 f303 	mul.w	r3, r2, r3
 8004ccc:	4a2a      	ldr	r2, [pc, #168]	; (8004d78 <VL53L5CX_Probe+0x104>)
 8004cce:	441a      	add	r2, r3
 8004cd0:	492c      	ldr	r1, [pc, #176]	; (8004d84 <VL53L5CX_Probe+0x110>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    if (VL53L5CX_ReadID(&(VL53L5CXObj[Instance]), &id) != VL53L5CX_OK)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f44f 6255 	mov.w	r2, #3408	; 0xd50
 8004cde:	fb02 f303 	mul.w	r3, r2, r3
 8004ce2:	4a25      	ldr	r2, [pc, #148]	; (8004d78 <VL53L5CX_Probe+0x104>)
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f107 0208 	add.w	r2, r7, #8
 8004cea:	4611      	mov	r1, r2
 8004cec:	4618      	mov	r0, r3
 8004cee:	f002 fb14 	bl	800731a <VL53L5CX_ReadID>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <VL53L5CX_Probe+0x8c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004cf8:	f06f 0304 	mvn.w	r3, #4
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cfe:	e02b      	b.n	8004d58 <VL53L5CX_Probe+0xe4>
    }
    else if (id != VL53L5CX_ID)
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f24f 0202 	movw	r2, #61442	; 0xf002
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <VL53L5CX_Probe+0x9e>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004d0a:	f06f 0306 	mvn.w	r3, #6
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d10:	e022      	b.n	8004d58 <VL53L5CX_Probe+0xe4>
    }
    else if (VL53L5A1_RANGING_SENSOR_Drv->Init(VL53L5A1_RANGING_SENSOR_CompObj[Instance]) != VL53L5CX_OK)
 8004d12:	4b1a      	ldr	r3, [pc, #104]	; (8004d7c <VL53L5CX_Probe+0x108>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	491a      	ldr	r1, [pc, #104]	; (8004d84 <VL53L5CX_Probe+0x110>)
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <VL53L5CX_Probe+0xbe>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d2a:	f06f 0304 	mvn.w	r3, #4
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d30:	e012      	b.n	8004d58 <VL53L5CX_Probe+0xe4>
    }
    else if (VL53L5A1_RANGING_SENSOR_Drv->GetCapabilities(VL53L5A1_RANGING_SENSOR_CompObj[Instance],
 8004d32:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <VL53L5CX_Probe+0x108>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	4912      	ldr	r1, [pc, #72]	; (8004d84 <VL53L5CX_Probe+0x110>)
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004d40:	4911      	ldr	r1, [pc, #68]	; (8004d88 <VL53L5CX_Probe+0x114>)
 8004d42:	4610      	mov	r0, r2
 8004d44:	4798      	blx	r3
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d003      	beq.n	8004d54 <VL53L5CX_Probe+0xe0>
                                                          &VL53L5A1_RANGING_SENSOR_Cap) != VL53L5CX_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004d4c:	f06f 0304 	mvn.w	r3, #4
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
 8004d52:	e001      	b.n	8004d58 <VL53L5CX_Probe+0xe4>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3728      	adds	r7, #40	; 0x28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	080041a5 	.word	0x080041a5
 8004d68:	08004209 	.word	0x08004209
 8004d6c:	08004259 	.word	0x08004259
 8004d70:	080042bd 	.word	0x080042bd
 8004d74:	08004321 	.word	0x08004321
 8004d78:	20002858 	.word	0x20002858
 8004d7c:	20002844 	.word	0x20002844
 8004d80:	20000008 	.word	0x20000008
 8004d84:	20002838 	.word	0x20002838
 8004d88:	20002848 	.word	0x20002848

08004d8c <vl53l5cx_i2c_recover>:

/**
  * @brief This functions permits to avoid HW reset due to an I2C bug on the device.
  */
static int32_t vl53l5cx_i2c_recover(void)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b088      	sub	sp, #32
 8004d90:	af00      	add	r7, sp, #0
  /* We can't assume bus state based on SDA and SCL state (we may be in a data or NAK bit so SCL=SDA=1)
  * by setting SDA high and toggling SCL at least 10 time we ensure whatever agent and state
  * all agent should end up seeing a "stop" and bus get back to an known idle i2c  bus state */

  uint8_t i;
  uint8_t retry_cnt = 0;
 8004d92:	2300      	movs	r3, #0
 8004d94:	77bb      	strb	r3, [r7, #30]
  static uint8_t is_already_init = 0U;
  GPIO_InitTypeDef GPIO_InitStruct;

  if (is_already_init == 1U)
 8004d96:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <vl53l5cx_i2c_recover+0xf8>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <vl53l5cx_i2c_recover+0x16>
  {
    return BSP_ERROR_NONE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	e06b      	b.n	8004e7a <vl53l5cx_i2c_recover+0xee>
  }

  /* Enable I/O */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	607b      	str	r3, [r7, #4]
 8004da6:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <vl53l5cx_i2c_recover+0xfc>)
 8004da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004daa:	4a37      	ldr	r2, [pc, #220]	; (8004e88 <vl53l5cx_i2c_recover+0xfc>)
 8004dac:	f043 0302 	orr.w	r3, r3, #2
 8004db0:	6313      	str	r3, [r2, #48]	; 0x30
 8004db2:	4b35      	ldr	r3, [pc, #212]	; (8004e88 <vl53l5cx_i2c_recover+0xfc>)
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	687b      	ldr	r3, [r7, #4]

  GPIO_InitStruct.Pin = VL53L5A1_I2C_SCL_GPIO_PIN;
 8004dbe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004dc4:	2311      	movs	r3, #17
 8004dc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L5A1_I2C_SCL_GPIO_PORT, &GPIO_InitStruct);
 8004dcc:	f107 0308 	add.w	r3, r7, #8
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	482e      	ldr	r0, [pc, #184]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004dd4:	f003 fd04 	bl	80087e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = VL53L5A1_I2C_SDA_GPIO_PIN;
 8004dd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ddc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8004dde:	2311      	movs	r3, #17
 8004de0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004de2:	2301      	movs	r3, #1
 8004de4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(VL53L5A1_I2C_SDA_GPIO_PORT, &GPIO_InitStruct);
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4619      	mov	r1, r3
 8004dec:	4827      	ldr	r0, [pc, #156]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004dee:	f003 fcf7 	bl	80087e0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(VL53L5A1_I2C_SCL_GPIO_PORT, VL53L5A1_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8004df2:	2201      	movs	r2, #1
 8004df4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004df8:	4824      	ldr	r0, [pc, #144]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004dfa:	f003 ff71 	bl	8008ce0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VL53L5A1_I2C_SDA_GPIO_PORT, VL53L5A1_I2C_SDA_GPIO_PIN, GPIO_PIN_SET);
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e04:	4821      	ldr	r0, [pc, #132]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004e06:	f003 ff6b 	bl	8008ce0 <HAL_GPIO_WritePin>

  do
  {
    for (i = 0; i < 10U; i++)
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e014      	b.n	8004e3a <vl53l5cx_i2c_recover+0xae>
    {
      HAL_GPIO_WritePin(VL53L5A1_I2C_SCL_GPIO_PORT, VL53L5A1_I2C_SCL_GPIO_PIN, GPIO_PIN_RESET);
 8004e10:	2200      	movs	r2, #0
 8004e12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e16:	481d      	ldr	r0, [pc, #116]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004e18:	f003 ff62 	bl	8008ce0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e1c:	2001      	movs	r0, #1
 8004e1e:	f002 ffa7 	bl	8007d70 <HAL_Delay>
      HAL_GPIO_WritePin(VL53L5A1_I2C_SCL_GPIO_PORT, VL53L5A1_I2C_SCL_GPIO_PIN, GPIO_PIN_SET);
 8004e22:	2201      	movs	r2, #1
 8004e24:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e28:	4818      	ldr	r0, [pc, #96]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004e2a:	f003 ff59 	bl	8008ce0 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 8004e2e:	2001      	movs	r0, #1
 8004e30:	f002 ff9e 	bl	8007d70 <HAL_Delay>
    for (i = 0; i < 10U; i++)
 8004e34:	7ffb      	ldrb	r3, [r7, #31]
 8004e36:	3301      	adds	r3, #1
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	7ffb      	ldrb	r3, [r7, #31]
 8004e3c:	2b09      	cmp	r3, #9
 8004e3e:	d9e7      	bls.n	8004e10 <vl53l5cx_i2c_recover+0x84>
    }
    retry_cnt++;
 8004e40:	7fbb      	ldrb	r3, [r7, #30]
 8004e42:	3301      	adds	r3, #1
 8004e44:	77bb      	strb	r3, [r7, #30]
  } while ((HAL_GPIO_ReadPin(VL53L5A1_I2C_SDA_GPIO_PORT, VL53L5A1_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET) && (retry_cnt < 7U));
 8004e46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e4a:	4810      	ldr	r0, [pc, #64]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004e4c:	f003 ff30 	bl	8008cb0 <HAL_GPIO_ReadPin>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <vl53l5cx_i2c_recover+0xd0>
 8004e56:	7fbb      	ldrb	r3, [r7, #30]
 8004e58:	2b06      	cmp	r3, #6
 8004e5a:	d9d6      	bls.n	8004e0a <vl53l5cx_i2c_recover+0x7e>

  if (HAL_GPIO_ReadPin(VL53L5A1_I2C_SCL_GPIO_PORT, VL53L5A1_I2C_SDA_GPIO_PIN) == GPIO_PIN_RESET)
 8004e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004e60:	480a      	ldr	r0, [pc, #40]	; (8004e8c <vl53l5cx_i2c_recover+0x100>)
 8004e62:	f003 ff25 	bl	8008cb0 <HAL_GPIO_ReadPin>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <vl53l5cx_i2c_recover+0xe6>
  {
    /* We are still in a bad i2c state, return error */
    return BSP_ERROR_COMPONENT_FAILURE;
 8004e6c:	f06f 0304 	mvn.w	r3, #4
 8004e70:	e003      	b.n	8004e7a <vl53l5cx_i2c_recover+0xee>
  }

  is_already_init = 1U;
 8004e72:	4b04      	ldr	r3, [pc, #16]	; (8004e84 <vl53l5cx_i2c_recover+0xf8>)
 8004e74:	2201      	movs	r2, #1
 8004e76:	701a      	strb	r2, [r3, #0]

  return BSP_ERROR_NONE;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20005048 	.word	0x20005048
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	40020400 	.word	0x40020400

08004e90 <_vl53l5cx_poll_for_answer>:
		uint8_t					size,
		uint8_t					pos,
		uint16_t				address,
		uint8_t					mask,
		uint8_t					expected_value)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	4608      	mov	r0, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	70fb      	strb	r3, [r7, #3]
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	70bb      	strb	r3, [r7, #2]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	803b      	strh	r3, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	73fb      	strb	r3, [r7, #15]
	uint8_t timeout = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	73bb      	strb	r3, [r7, #14]

	do {
		status |= RdMulti(&(p_dev->platform), address,
 8004eb2:	6878      	ldr	r0, [r7, #4]
				p_dev->temp_buffer, size);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), address,
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	8839      	ldrh	r1, [r7, #0]
 8004ebe:	f002 f915 	bl	80070ec <RdMulti>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	7bfb      	ldrb	r3, [r7, #15]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	73fb      	strb	r3, [r7, #15]
		status |= WaitMs(&(p_dev->platform), 10);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	210a      	movs	r1, #10
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f002 f958 	bl	8007186 <WaitMs>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	461a      	mov	r2, r3
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	73fb      	strb	r3, [r7, #15]

		if(timeout >= (uint8_t)200)	/* 2s timeout */
 8004ee0:	7bbb      	ldrb	r3, [r7, #14]
 8004ee2:	2bc7      	cmp	r3, #199	; 0xc7
 8004ee4:	d906      	bls.n	8004ef4 <_vl53l5cx_poll_for_answer+0x64>
		{
			status |= p_dev->temp_buffer[2];
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 2512 	ldrb.w	r2, [r3, #1298]	; 0x512
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	73fb      	strb	r3, [r7, #15]
 8004ef2:	e00f      	b.n	8004f14 <_vl53l5cx_poll_for_answer+0x84>
		}else if((size >= (uint8_t)4) 
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d909      	bls.n	8004f0e <_vl53l5cx_poll_for_answer+0x7e>
                         && (p_dev->temp_buffer[2] >= (uint8_t)0x7f))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8004f00:	2b7e      	cmp	r3, #126	; 0x7e
 8004f02:	d904      	bls.n	8004f0e <_vl53l5cx_poll_for_answer+0x7e>
		{
			status |= VL53L5CX_MCU_ERROR;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
 8004f06:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004f0a:	73fb      	strb	r3, [r7, #15]
 8004f0c:	e002      	b.n	8004f14 <_vl53l5cx_poll_for_answer+0x84>
		}
		else
		{
			timeout++;
 8004f0e:	7bbb      	ldrb	r3, [r7, #14]
 8004f10:	3301      	adds	r3, #1
 8004f12:	73bb      	strb	r3, [r7, #14]
		}
	}while ((p_dev->temp_buffer[pos] & mask) != expected_value);
 8004f14:	78bb      	ldrb	r3, [r7, #2]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8004f1e:	7e3b      	ldrb	r3, [r7, #24]
 8004f20:	4013      	ands	r3, r2
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	7f3a      	ldrb	r2, [r7, #28]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d1c3      	bne.n	8004eb2 <_vl53l5cx_poll_for_answer+0x22>

	return status;
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <_vl53l5cx_send_offset_data>:
 */

static uint8_t _vl53l5cx_send_offset_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t						resolution)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b0ea      	sub	sp, #424	; 0x1a8
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	1d3b      	adds	r3, r7, #4
 8004f3c:	6018      	str	r0, [r3, #0]
 8004f3e:	460a      	mov	r2, r1
 8004f40:	1cfb      	adds	r3, r7, #3
 8004f42:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8004f44:	2300      	movs	r3, #0
 8004f46:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
	uint32_t signal_grid[64];
	int16_t range_grid[64];
	uint8_t dss_4x4[] = {0x0F, 0x04, 0x04, 0x00, 0x08, 0x10, 0x10, 0x07};
 8004f4a:	f107 0314 	add.w	r3, r7, #20
 8004f4e:	4aab      	ldr	r2, [pc, #684]	; (80051fc <_vl53l5cx_send_offset_data+0x2c8>)
 8004f50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f54:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0F, 0x03, 0x01, 0x01, 0xE4};
 8004f58:	f107 030c 	add.w	r3, r7, #12
 8004f5c:	4aa8      	ldr	r2, [pc, #672]	; (8005200 <_vl53l5cx_send_offset_data+0x2cc>)
 8004f5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f62:	e883 0003 	stmia.w	r3, {r0, r1}
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer,
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
               p_dev->offset_data, VL53L5CX_OFFSET_BUFFER_SIZE);
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3320      	adds	r3, #32
	(void)memcpy(p_dev->temp_buffer,
 8004f74:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8004f78:	4619      	mov	r1, r3
 8004f7a:	f006 fd2d 	bl	800b9d8 <memcpy>

	/* Data extrapolation is required for 4X4 offset */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4){
 8004f7e:	1cfb      	adds	r3, r7, #3
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b10      	cmp	r3, #16
 8004f84:	f040 80f7 	bne.w	8005176 <_vl53l5cx_send_offset_data+0x242>
		(void)memcpy(&(p_dev->temp_buffer[0x10]), dss_4x4, sizeof(dss_4x4));
 8004f88:	1d3b      	adds	r3, r7, #4
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f503 62a4 	add.w	r2, r3, #1312	; 0x520
 8004f90:	f107 0314 	add.w	r3, r7, #20
 8004f94:	cb03      	ldmia	r3!, {r0, r1}
 8004f96:	6010      	str	r0, [r2, #0]
 8004f98:	6051      	str	r1, [r2, #4]
		SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8004f9a:	1d3b      	adds	r3, r7, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8004fa2:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f002 f8b7 	bl	800711a <SwapBuffer>
		(void)memcpy(signal_grid,&(p_dev->temp_buffer[0x3C]),
 8004fac:	1d3b      	adds	r3, r7, #4
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f203 514c 	addw	r1, r3, #1356	; 0x54c
 8004fb4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f006 fd0b 	bl	800b9d8 <memcpy>
			sizeof(signal_grid));
		(void)memcpy(range_grid,&(p_dev->temp_buffer[0x140]),
 8004fc2:	1d3b      	adds	r3, r7, #4
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f503 61ca 	add.w	r1, r3, #1616	; 0x650
 8004fca:	f107 031c 	add.w	r3, r7, #28
 8004fce:	2280      	movs	r2, #128	; 0x80
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f006 fd01 	bl	800b9d8 <memcpy>
			sizeof(range_grid));

		for (j = 0; j < (int8_t)4; j++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8004fdc:	e098      	b.n	8005110 <_vl53l5cx_send_offset_data+0x1dc>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 8004fe4:	e088      	b.n	80050f8 <_vl53l5cx_send_offset_data+0x1c4>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+ (int8_t)0]
 8004fe6:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8004fea:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	005a      	lsls	r2, r3, #1
 8004ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004ff8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+(int8_t)1]
 8004ffc:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005000:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	440b      	add	r3, r1
 8005008:	005b      	lsls	r3, r3, #1
 800500a:	1c59      	adds	r1, r3, #1
 800500c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005010:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005014:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)8]
 8005016:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 800501a:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	440b      	add	r3, r1
 8005022:	3304      	adds	r3, #4
 8005024:	0059      	lsls	r1, r3, #1
 8005026:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800502a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800502e:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+(int8_t)9])
 8005030:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005034:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	f103 0109 	add.w	r1, r3, #9
 8005042:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005046:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800504a:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 800504c:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005050:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 8005054:	0092      	lsls	r2, r2, #2
 8005056:	440a      	add	r2, r1
                                  /(uint32_t)4;
 8005058:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 800505a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800505e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				range_grid[i+(4*j)] =
				(range_grid[(2*i)+(16*j)]
 8005062:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 8005066:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	4413      	add	r3, r2
 800506e:	005a      	lsls	r2, r3, #1
 8005070:	f107 031c 	add.w	r3, r7, #28
 8005074:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005078:	4619      	mov	r1, r3
				+ range_grid[(2*i)+(16*j)+1]
 800507a:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 800507e:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	f107 031c 	add.w	r3, r7, #28
 800508e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005092:	440b      	add	r3, r1
				+ range_grid[(2*i)+(16*j)+8]
 8005094:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 8005098:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 800509c:	00d2      	lsls	r2, r2, #3
 800509e:	440a      	add	r2, r1
 80050a0:	3204      	adds	r2, #4
 80050a2:	0051      	lsls	r1, r2, #1
 80050a4:	f107 021c 	add.w	r2, r7, #28
 80050a8:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80050ac:	4413      	add	r3, r2
				+ range_grid[(2*i)+(16*j)+9])
 80050ae:	f997 119f 	ldrsb.w	r1, [r7, #415]	; 0x19f
 80050b2:	f997 219e 	ldrsb.w	r2, [r7, #414]	; 0x19e
 80050b6:	00d2      	lsls	r2, r2, #3
 80050b8:	440a      	add	r2, r1
 80050ba:	0052      	lsls	r2, r2, #1
 80050bc:	f102 0109 	add.w	r1, r2, #9
 80050c0:	f107 021c 	add.w	r2, r7, #28
 80050c4:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 80050c8:	4413      	add	r3, r2
                                  /(int16_t)4;
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	da00      	bge.n	80050d0 <_vl53l5cx_send_offset_data+0x19c>
 80050ce:	3303      	adds	r3, #3
 80050d0:	109b      	asrs	r3, r3, #2
 80050d2:	4619      	mov	r1, r3
				range_grid[i+(4*j)] =
 80050d4:	f997 219f 	ldrsb.w	r2, [r7, #415]	; 0x19f
 80050d8:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	441a      	add	r2, r3
 80050e0:	b209      	sxth	r1, r1
 80050e2:	f107 031c 	add.w	r3, r7, #28
 80050e6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (i = 0; i < (int8_t)4 ; i++)
 80050ea:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	3301      	adds	r3, #1
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f887 319f 	strb.w	r3, [r7, #415]	; 0x19f
 80050f8:	f997 319f 	ldrsb.w	r3, [r7, #415]	; 0x19f
 80050fc:	2b03      	cmp	r3, #3
 80050fe:	f77f af72 	ble.w	8004fe6 <_vl53l5cx_send_offset_data+0xb2>
		for (j = 0; j < (int8_t)4; j++)
 8005102:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005106:	b2db      	uxtb	r3, r3
 8005108:	3301      	adds	r3, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f887 319e 	strb.w	r3, [r7, #414]	; 0x19e
 8005110:	f997 319e 	ldrsb.w	r3, [r7, #414]	; 0x19e
 8005114:	2b03      	cmp	r3, #3
 8005116:	f77f af62 	ble.w	8004fde <_vl53l5cx_send_offset_data+0xaa>
			}
		}
	    (void)memset(&range_grid[0x10], 0, (uint16_t)96);
 800511a:	f107 031c 	add.w	r3, r7, #28
 800511e:	3320      	adds	r3, #32
 8005120:	2260      	movs	r2, #96	; 0x60
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f006 fc65 	bl	800b9f4 <memset>
	    (void)memset(&signal_grid[0x10], 0, (uint16_t)192);
 800512a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800512e:	3340      	adds	r3, #64	; 0x40
 8005130:	22c0      	movs	r2, #192	; 0xc0
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f006 fc5d 	bl	800b9f4 <memset>
            (void)memcpy(&(p_dev->temp_buffer[0x3C]),
 800513a:	1d3b      	adds	r3, r7, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f203 534c 	addw	r3, r3, #1356	; 0x54c
 8005142:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8005146:	f44f 7280 	mov.w	r2, #256	; 0x100
 800514a:	4618      	mov	r0, r3
 800514c:	f006 fc44 	bl	800b9d8 <memcpy>
		signal_grid, sizeof(signal_grid));
            (void)memcpy(&(p_dev->temp_buffer[0x140]),
 8005150:	1d3b      	adds	r3, r7, #4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8005158:	f107 011c 	add.w	r1, r7, #28
 800515c:	2280      	movs	r2, #128	; 0x80
 800515e:	4618      	mov	r0, r3
 8005160:	f006 fc3a 	bl	800b9d8 <memcpy>
		range_grid, sizeof(range_grid));
            SwapBuffer(p_dev->temp_buffer, VL53L5CX_OFFSET_BUFFER_SIZE);
 8005164:	1d3b      	adds	r3, r7, #4
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800516c:	f44f 71f4 	mov.w	r1, #488	; 0x1e8
 8005170:	4618      	mov	r0, r3
 8005172:	f001 ffd2 	bl	800711a <SwapBuffer>
	}

	(void)memcpy(p_dev->temp_buffer, &(p_dev->temp_buffer[8]),
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 800517e:	1d3b      	adds	r3, r7, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8005186:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800518a:	4619      	mov	r1, r3
 800518c:	f006 fc24 	bl	800b9d8 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE - (uint16_t)4);
	(void)memcpy(&(p_dev->temp_buffer[0x1E0]), footer, 8);
 8005190:	1d3b      	adds	r3, r7, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f503 62de 	add.w	r2, r3, #1776	; 0x6f0
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	cb03      	ldmia	r3!, {r0, r1}
 800519e:	6010      	str	r0, [r2, #0]
 80051a0:	6051      	str	r1, [r2, #4]
	status |= WrMulti(&(p_dev->platform), 0x2e18, p_dev->temp_buffer,
 80051a2:	1d3b      	adds	r3, r7, #4
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	1d3b      	adds	r3, r7, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80051ae:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
 80051b2:	f642 6118 	movw	r1, #11800	; 0x2e18
 80051b6:	f001 ff82 	bl	80070be <WrMulti>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80051c8:	1d38      	adds	r0, r7, #4
 80051ca:	2303      	movs	r3, #3
 80051cc:	9301      	str	r3, [sp, #4]
 80051ce:	23ff      	movs	r3, #255	; 0xff
 80051d0:	9300      	str	r3, [sp, #0]
 80051d2:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80051d6:	2201      	movs	r2, #1
 80051d8:	2104      	movs	r1, #4
 80051da:	6800      	ldr	r0, [r0, #0]
 80051dc:	f7ff fe58 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 80051e0:	4603      	mov	r3, r0
 80051e2:	461a      	mov	r2, r3
 80051e4:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f887 319d 	strb.w	r3, [r7, #413]	; 0x19d
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80051ee:	f897 319d 	ldrb.w	r3, [r7, #413]	; 0x19d
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	0800c05c 	.word	0x0800c05c
 8005200:	0800c064 	.word	0x0800c064

08005204 <_vl53l5cx_send_xtalk_data>:
 */

static uint8_t _vl53l5cx_send_xtalk_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				resolution)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b0ca      	sub	sp, #296	; 0x128
 8005208:	af02      	add	r7, sp, #8
 800520a:	1d3b      	adds	r3, r7, #4
 800520c:	6018      	str	r0, [r3, #0]
 800520e:	460a      	mov	r2, r1
 8005210:	1cfb      	adds	r3, r7, #3
 8005212:	701a      	strb	r2, [r3, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t res4x4[] = {0x0F, 0x04, 0x04, 0x17, 0x08, 0x10, 0x10, 0x07};
 800521a:	4a80      	ldr	r2, [pc, #512]	; (800541c <_vl53l5cx_send_xtalk_data+0x218>)
 800521c:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8005220:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005224:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dss_4x4[] = {0x00, 0x78, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08};
 8005228:	4a7d      	ldr	r2, [pc, #500]	; (8005420 <_vl53l5cx_send_xtalk_data+0x21c>)
 800522a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800522e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005232:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t profile_4x4[] = {0xA0, 0xFC, 0x01, 0x00};
 8005236:	4b7b      	ldr	r3, [pc, #492]	; (8005424 <_vl53l5cx_send_xtalk_data+0x220>)
 8005238:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t signal_grid[64];
	int8_t i, j;

	(void)memcpy(p_dev->temp_buffer, &(p_dev->xtalk_data[0]),
 800523c:	1d3b      	adds	r3, r7, #4
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f503 60a2 	add.w	r0, r3, #1296	; 0x510
 8005244:	1d3b      	adds	r3, r7, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800524c:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005250:	4619      	mov	r1, r3
 8005252:	f006 fbc1 	bl	800b9d8 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);

	/* Data extrapolation is required for 4X4 Xtalk */
	if(resolution == (uint8_t)VL53L5CX_RESOLUTION_4X4)
 8005256:	1cfb      	adds	r3, r7, #3
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b10      	cmp	r3, #16
 800525c:	f040 80b0 	bne.w	80053c0 <_vl53l5cx_send_xtalk_data+0x1bc>
	{
		(void)memcpy(&(p_dev->temp_buffer[0x8]),
 8005260:	1d3b      	adds	r3, r7, #4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f503 63a3 	add.w	r3, r3, #1304	; 0x518
 8005268:	461a      	mov	r2, r3
 800526a:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800526e:	cb03      	ldmia	r3!, {r0, r1}
 8005270:	6010      	str	r0, [r2, #0]
 8005272:	6051      	str	r1, [r2, #4]
			res4x4, sizeof(res4x4));
		(void)memcpy(&(p_dev->temp_buffer[0x020]),
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f503 63a6 	add.w	r3, r3, #1328	; 0x530
 800527c:	461a      	mov	r2, r3
 800527e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8005282:	cb03      	ldmia	r3!, {r0, r1}
 8005284:	6010      	str	r0, [r2, #0]
 8005286:	6051      	str	r1, [r2, #4]
			dss_4x4, sizeof(dss_4x4));

		SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 8005288:	1d3b      	adds	r3, r7, #4
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005290:	f44f 7142 	mov.w	r1, #776	; 0x308
 8005294:	4618      	mov	r0, r3
 8005296:	f001 ff40 	bl	800711a <SwapBuffer>
		(void)memcpy(signal_grid, &(p_dev->temp_buffer[0x34]),
 800529a:	1d3b      	adds	r3, r7, #4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f203 5144 	addw	r1, r3, #1348	; 0x544
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052aa:	4618      	mov	r0, r3
 80052ac:	f006 fb94 	bl	800b9d8 <memcpy>
			sizeof(signal_grid));

		for (j = 0; j < (int8_t)4; j++)
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80052b6:	e053      	b.n	8005360 <_vl53l5cx_send_xtalk_data+0x15c>
		{
			for (i = 0; i < (int8_t)4 ; i++)
 80052b8:	2300      	movs	r3, #0
 80052ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 80052be:	e044      	b.n	800534a <_vl53l5cx_send_xtalk_data+0x146>
			{
				signal_grid[i+(4*j)] =
				(signal_grid[(2*i)+(16*j)+0]
 80052c0:	f997 211f 	ldrsb.w	r2, [r7, #287]	; 0x11f
 80052c4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	005a      	lsls	r2, r3, #1
 80052ce:	f107 0308 	add.w	r3, r7, #8
 80052d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
				+ signal_grid[(2*i)+(16*j)+1]
 80052d6:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80052da:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	440b      	add	r3, r1
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	1c59      	adds	r1, r3, #1
 80052e6:	f107 0308 	add.w	r3, r7, #8
 80052ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052ee:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+8]
 80052f0:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 80052f4:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	440b      	add	r3, r1
 80052fc:	3304      	adds	r3, #4
 80052fe:	0059      	lsls	r1, r3, #1
 8005300:	f107 0308 	add.w	r3, r7, #8
 8005304:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005308:	441a      	add	r2, r3
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 800530a:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800530e:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	440b      	add	r3, r1
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	f103 0109 	add.w	r1, r3, #9
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005324:	4413      	add	r3, r2
				signal_grid[i+(4*j)] =
 8005326:	f997 111f 	ldrsb.w	r1, [r7, #287]	; 0x11f
 800532a:	f997 211e 	ldrsb.w	r2, [r7, #286]	; 0x11e
 800532e:	0092      	lsls	r2, r2, #2
 8005330:	440a      	add	r2, r1
				+ signal_grid[(2*i)+(16*j)+9])/(uint32_t)4;
 8005332:	0899      	lsrs	r1, r3, #2
				signal_grid[i+(4*j)] =
 8005334:	f107 0308 	add.w	r3, r7, #8
 8005338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for (i = 0; i < (int8_t)4 ; i++)
 800533c:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8005340:	b2db      	uxtb	r3, r3
 8005342:	3301      	adds	r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
 800534a:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800534e:	2b03      	cmp	r3, #3
 8005350:	ddb6      	ble.n	80052c0 <_vl53l5cx_send_xtalk_data+0xbc>
		for (j = 0; j < (int8_t)4; j++)
 8005352:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005356:	b2db      	uxtb	r3, r3
 8005358:	3301      	adds	r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8005360:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8005364:	2b03      	cmp	r3, #3
 8005366:	dda7      	ble.n	80052b8 <_vl53l5cx_send_xtalk_data+0xb4>
			}
		}
	    (void)memset(&signal_grid[0x10], 0, (uint32_t)192);
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	3340      	adds	r3, #64	; 0x40
 800536e:	22c0      	movs	r2, #192	; 0xc0
 8005370:	2100      	movs	r1, #0
 8005372:	4618      	mov	r0, r3
 8005374:	f006 fb3e 	bl	800b9f4 <memset>
	    (void)memcpy(&(p_dev->temp_buffer[0x34]),
 8005378:	1d3b      	adds	r3, r7, #4
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f203 5344 	addw	r3, r3, #1348	; 0x544
 8005380:	f107 0108 	add.w	r1, r7, #8
 8005384:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005388:	4618      	mov	r0, r3
 800538a:	f006 fb25 	bl	800b9d8 <memcpy>
                  signal_grid, sizeof(signal_grid));
	    SwapBuffer(p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 800538e:	1d3b      	adds	r3, r7, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005396:	f44f 7142 	mov.w	r1, #776	; 0x308
 800539a:	4618      	mov	r0, r3
 800539c:	f001 febd 	bl	800711a <SwapBuffer>
	    (void)memcpy(&(p_dev->temp_buffer[0x134]),
 80053a0:	1d3b      	adds	r3, r7, #4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f203 6344 	addw	r3, r3, #1604	; 0x644
 80053a8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80053ac:	601a      	str	r2, [r3, #0]
	    profile_4x4, sizeof(profile_4x4));
	    (void)memset(&(p_dev->temp_buffer[0x078]),0 , 
 80053ae:	1d3b      	adds	r3, r7, #4
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f503 63b1 	add.w	r3, r3, #1416	; 0x588
 80053b6:	2204      	movs	r2, #4
 80053b8:	2100      	movs	r1, #0
 80053ba:	4618      	mov	r0, r3
 80053bc:	f006 fb1a 	bl	800b9f4 <memset>
                         (uint32_t)4*sizeof(uint8_t));
	}

	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80053c0:	1d3b      	adds	r3, r7, #4
 80053c2:	6818      	ldr	r0, [r3, #0]
			p_dev->temp_buffer, VL53L5CX_XTALK_BUFFER_SIZE);
 80053c4:	1d3b      	adds	r3, r7, #4
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= WrMulti(&(p_dev->platform), 0x2cf8,
 80053cc:	f44f 7342 	mov.w	r3, #776	; 0x308
 80053d0:	f642 41f8 	movw	r1, #11512	; 0x2cf8
 80053d4:	f001 fe73 	bl	80070be <WrMulti>
 80053d8:	4603      	mov	r3, r0
 80053da:	461a      	mov	r2, r3
 80053dc:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	status |=_vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80053e6:	1d38      	adds	r0, r7, #4
 80053e8:	2303      	movs	r3, #3
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	23ff      	movs	r3, #255	; 0xff
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80053f4:	2201      	movs	r2, #1
 80053f6:	2104      	movs	r1, #4
 80053f8:	6800      	ldr	r0, [r0, #0]
 80053fa:	f7ff fd49 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 80053fe:	4603      	mov	r3, r0
 8005400:	461a      	mov	r2, r3
 8005402:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8005406:	4313      	orrs	r3, r2
 8005408:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 800540c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
}
 8005410:	4618      	mov	r0, r3
 8005412:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	0800c06c 	.word	0x0800c06c
 8005420:	0800c074 	.word	0x0800c074
 8005424:	0001fca0 	.word	0x0001fca0

08005428 <vl53l5cx_init>:
	return status;
}

uint8_t vl53l5cx_init(
		VL53L5CX_Configuration		*p_dev)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af04      	add	r7, sp, #16
 800542e:	6078      	str	r0, [r7, #4]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	75fb      	strb	r3, [r7, #23]
	uint8_t pipe_ctrl[] = {VL53L5CX_NB_TARGET_PER_ZONE, 0x00, 0x01, 0x00};
 8005434:	4be4      	ldr	r3, [pc, #912]	; (80057c8 <vl53l5cx_init+0x3a0>)
 8005436:	613b      	str	r3, [r7, #16]
	uint32_t single_range = 0x01;
 8005438:	2301      	movs	r3, #1
 800543a:	60fb      	str	r3, [r7, #12]

	p_dev->default_xtalk = (uint8_t*)VL53L5CX_DEFAULT_XTALK;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4ae3      	ldr	r2, [pc, #908]	; (80057cc <vl53l5cx_init+0x3a4>)
 8005440:	61da      	str	r2, [r3, #28]
	p_dev->default_configuration = (uint8_t*)VL53L5CX_DEFAULT_CONFIGURATION;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4ae2      	ldr	r2, [pc, #904]	; (80057d0 <vl53l5cx_init+0x3a8>)
 8005446:	619a      	str	r2, [r3, #24]
        
	/* SW reboot sequence */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fe1e 	bl	8007092 <WrByte>
 8005456:	4603      	mov	r3, r0
 8005458:	461a      	mov	r2, r3
 800545a:	7dfb      	ldrb	r3, [r7, #23]
 800545c:	4313      	orrs	r3, r2
 800545e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0009, 0x04);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2204      	movs	r2, #4
 8005464:	2109      	movs	r1, #9
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fe13 	bl	8007092 <WrByte>
 800546c:	4603      	mov	r3, r0
 800546e:	461a      	mov	r2, r3
 8005470:	7dfb      	ldrb	r3, [r7, #23]
 8005472:	4313      	orrs	r3, r2
 8005474:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2240      	movs	r2, #64	; 0x40
 800547a:	210f      	movs	r1, #15
 800547c:	4618      	mov	r0, r3
 800547e:	f001 fe08 	bl	8007092 <WrByte>
 8005482:	4603      	mov	r3, r0
 8005484:	461a      	mov	r2, r3
 8005486:	7dfb      	ldrb	r3, [r7, #23]
 8005488:	4313      	orrs	r3, r2
 800548a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x03);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2203      	movs	r2, #3
 8005490:	210a      	movs	r1, #10
 8005492:	4618      	mov	r0, r3
 8005494:	f001 fdfd 	bl	8007092 <WrByte>
 8005498:	4603      	mov	r3, r0
 800549a:	461a      	mov	r2, r3
 800549c:	7dfb      	ldrb	r3, [r7, #23]
 800549e:	4313      	orrs	r3, r2
 80054a0:	75fb      	strb	r3, [r7, #23]
	status |= RdByte(&(p_dev->platform), 0x7FFF, &tmp);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f107 0216 	add.w	r2, r7, #22
 80054a8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fddb 	bl	8007068 <RdByte>
 80054b2:	4603      	mov	r3, r0
 80054b4:	461a      	mov	r2, r3
 80054b6:	7dfb      	ldrb	r3, [r7, #23]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x01);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	210c      	movs	r1, #12
 80054c2:	4618      	mov	r0, r3
 80054c4:	f001 fde5 	bl	8007092 <WrByte>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461a      	mov	r2, r3
 80054cc:	7dfb      	ldrb	r3, [r7, #23]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x0101, 0x00);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f240 1101 	movw	r1, #257	; 0x101
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 fdd9 	bl	8007092 <WrByte>
 80054e0:	4603      	mov	r3, r0
 80054e2:	461a      	mov	r2, r3
 80054e4:	7dfb      	ldrb	r3, [r7, #23]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0102, 0x00);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f44f 7181 	mov.w	r1, #258	; 0x102
 80054f2:	4618      	mov	r0, r3
 80054f4:	f001 fdcd 	bl	8007092 <WrByte>
 80054f8:	4603      	mov	r3, r0
 80054fa:	461a      	mov	r2, r3
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
 80054fe:	4313      	orrs	r3, r2
 8005500:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800550a:	4618      	mov	r0, r3
 800550c:	f001 fdc1 	bl	8007092 <WrByte>
 8005510:	4603      	mov	r3, r0
 8005512:	461a      	mov	r2, r3
 8005514:	7dfb      	ldrb	r3, [r7, #23]
 8005516:	4313      	orrs	r3, r2
 8005518:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f244 0102 	movw	r1, #16386	; 0x4002
 8005522:	4618      	mov	r0, r3
 8005524:	f001 fdb5 	bl	8007092 <WrByte>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	7dfb      	ldrb	r3, [r7, #23]
 800552e:	4313      	orrs	r3, r2
 8005530:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	f244 0102 	movw	r1, #16386	; 0x4002
 800553a:	4618      	mov	r0, r3
 800553c:	f001 fda9 	bl	8007092 <WrByte>
 8005540:	4603      	mov	r3, r0
 8005542:	461a      	mov	r2, r3
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	4313      	orrs	r3, r2
 8005548:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2203      	movs	r2, #3
 800554e:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005552:	4618      	mov	r0, r3
 8005554:	f001 fd9d 	bl	8007092 <WrByte>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	7dfb      	ldrb	r3, [r7, #23]
 800555e:	4313      	orrs	r3, r2
 8005560:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0103, 0x01);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f240 1103 	movw	r1, #259	; 0x103
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fd91 	bl	8007092 <WrByte>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	7dfb      	ldrb	r3, [r7, #23]
 8005576:	4313      	orrs	r3, r2
 8005578:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000C, 0x00);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	210c      	movs	r1, #12
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fd86 	bl	8007092 <WrByte>
 8005586:	4603      	mov	r3, r0
 8005588:	461a      	mov	r2, r3
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	4313      	orrs	r3, r2
 800558e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000F, 0x43);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2243      	movs	r2, #67	; 0x43
 8005594:	210f      	movs	r1, #15
 8005596:	4618      	mov	r0, r3
 8005598:	f001 fd7b 	bl	8007092 <WrByte>
 800559c:	4603      	mov	r3, r0
 800559e:	461a      	mov	r2, r3
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 1);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2101      	movs	r1, #1
 80055aa:	4618      	mov	r0, r3
 80055ac:	f001 fdeb 	bl	8007186 <WaitMs>
 80055b0:	4603      	mov	r3, r0
 80055b2:	461a      	mov	r2, r3
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000F, 0x40);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2240      	movs	r2, #64	; 0x40
 80055be:	210f      	movs	r1, #15
 80055c0:	4618      	mov	r0, r3
 80055c2:	f001 fd66 	bl	8007092 <WrByte>
 80055c6:	4603      	mov	r3, r0
 80055c8:	461a      	mov	r2, r3
 80055ca:	7dfb      	ldrb	r3, [r7, #23]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x000A, 0x01);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	210a      	movs	r1, #10
 80055d6:	4618      	mov	r0, r3
 80055d8:	f001 fd5b 	bl	8007092 <WrByte>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	75fb      	strb	r3, [r7, #23]
	status |= WaitMs(&(p_dev->platform), 100);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2164      	movs	r1, #100	; 0x64
 80055ea:	4618      	mov	r0, r3
 80055ec:	f001 fdcb 	bl	8007186 <WaitMs>
 80055f0:	4603      	mov	r3, r0
 80055f2:	461a      	mov	r2, r3
 80055f4:	7dfb      	ldrb	r3, [r7, #23]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	75fb      	strb	r3, [r7, #23]

	/* Wait for sensor booted (several ms required to get sensor ready ) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005602:	4618      	mov	r0, r3
 8005604:	f001 fd45 	bl	8007092 <WrByte>
 8005608:	4603      	mov	r3, r0
 800560a:	461a      	mov	r2, r3
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	4313      	orrs	r3, r2
 8005610:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 1);
 8005612:	2301      	movs	r3, #1
 8005614:	9301      	str	r3, [sp, #4]
 8005616:	23ff      	movs	r3, #255	; 0xff
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	2306      	movs	r3, #6
 800561c:	2200      	movs	r2, #0
 800561e:	2101      	movs	r1, #1
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f7ff fc35 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8005626:	4603      	mov	r3, r0
 8005628:	461a      	mov	r2, r3
 800562a:	7dfb      	ldrb	r3, [r7, #23]
 800562c:	4313      	orrs	r3, r2
 800562e:	75fb      	strb	r3, [r7, #23]

	status |= WrByte(&(p_dev->platform), 0x000E, 0x01);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	210e      	movs	r1, #14
 8005636:	4618      	mov	r0, r3
 8005638:	f001 fd2b 	bl	8007092 <WrByte>
 800563c:	4603      	mov	r3, r0
 800563e:	461a      	mov	r2, r3
 8005640:	7dfb      	ldrb	r3, [r7, #23]
 8005642:	4313      	orrs	r3, r2
 8005644:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800564e:	4618      	mov	r0, r3
 8005650:	f001 fd1f 	bl	8007092 <WrByte>
 8005654:	4603      	mov	r3, r0
 8005656:	461a      	mov	r2, r3
 8005658:	7dfb      	ldrb	r3, [r7, #23]
 800565a:	4313      	orrs	r3, r2
 800565c:	75fb      	strb	r3, [r7, #23]

	/* Enable FW access */
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	220d      	movs	r2, #13
 8005662:	2103      	movs	r1, #3
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fd14 	bl	8007092 <WrByte>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	7dfb      	ldrb	r3, [r7, #23]
 8005670:	4313      	orrs	r3, r2
 8005672:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800567c:	4618      	mov	r0, r3
 800567e:	f001 fd08 	bl	8007092 <WrByte>
 8005682:	4603      	mov	r3, r0
 8005684:	461a      	mov	r2, r3
 8005686:	7dfb      	ldrb	r3, [r7, #23]
 8005688:	4313      	orrs	r3, r2
 800568a:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 800568c:	2310      	movs	r3, #16
 800568e:	9301      	str	r3, [sp, #4]
 8005690:	2310      	movs	r3, #16
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	2321      	movs	r3, #33	; 0x21
 8005696:	2200      	movs	r2, #0
 8005698:	2101      	movs	r1, #1
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fbf8 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80056b2:	4618      	mov	r0, r3
 80056b4:	f001 fced 	bl	8007092 <WrByte>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461a      	mov	r2, r3
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	4313      	orrs	r3, r2
 80056c0:	75fb      	strb	r3, [r7, #23]

	/* Enable host access to GO1 */
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	210c      	movs	r1, #12
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fce2 	bl	8007092 <WrByte>
 80056ce:	4603      	mov	r3, r0
 80056d0:	461a      	mov	r2, r3
 80056d2:	7dfb      	ldrb	r3, [r7, #23]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	75fb      	strb	r3, [r7, #23]

	/* Power ON status */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fcd6 	bl	8007092 <WrByte>
 80056e6:	4603      	mov	r3, r0
 80056e8:	461a      	mov	r2, r3
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x101, 0x00);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f240 1101 	movw	r1, #257	; 0x101
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fcca 	bl	8007092 <WrByte>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	4313      	orrs	r3, r2
 8005706:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x102, 0x00);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f44f 7181 	mov.w	r1, #258	; 0x102
 8005710:	4618      	mov	r0, r3
 8005712:	f001 fcbe 	bl	8007092 <WrByte>
 8005716:	4603      	mov	r3, r0
 8005718:	461a      	mov	r2, r3
 800571a:	7dfb      	ldrb	r3, [r7, #23]
 800571c:	4313      	orrs	r3, r2
 800571e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x01);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005728:	4618      	mov	r0, r3
 800572a:	f001 fcb2 	bl	8007092 <WrByte>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	7dfb      	ldrb	r3, [r7, #23]
 8005734:	4313      	orrs	r3, r2
 8005736:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x01);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	f244 0102 	movw	r1, #16386	; 0x4002
 8005740:	4618      	mov	r0, r3
 8005742:	f001 fca6 	bl	8007092 <WrByte>
 8005746:	4603      	mov	r3, r0
 8005748:	461a      	mov	r2, r3
 800574a:	7dfb      	ldrb	r3, [r7, #23]
 800574c:	4313      	orrs	r3, r2
 800574e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x4002, 0x00);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	f244 0102 	movw	r1, #16386	; 0x4002
 8005758:	4618      	mov	r0, r3
 800575a:	f001 fc9a 	bl	8007092 <WrByte>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	7dfb      	ldrb	r3, [r7, #23]
 8005764:	4313      	orrs	r3, r2
 8005766:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x010A, 0x03);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2203      	movs	r2, #3
 800576c:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005770:	4618      	mov	r0, r3
 8005772:	f001 fc8e 	bl	8007092 <WrByte>
 8005776:	4603      	mov	r3, r0
 8005778:	461a      	mov	r2, r3
 800577a:	7dfb      	ldrb	r3, [r7, #23]
 800577c:	4313      	orrs	r3, r2
 800577e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x103, 0x01);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f240 1103 	movw	r1, #259	; 0x103
 8005788:	4618      	mov	r0, r3
 800578a:	f001 fc82 	bl	8007092 <WrByte>
 800578e:	4603      	mov	r3, r0
 8005790:	461a      	mov	r2, r3
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	4313      	orrs	r3, r2
 8005796:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x400F, 0x00);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f244 010f 	movw	r1, #16399	; 0x400f
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fc76 	bl	8007092 <WrByte>
 80057a6:	4603      	mov	r3, r0
 80057a8:	461a      	mov	r2, r3
 80057aa:	7dfb      	ldrb	r3, [r7, #23]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x43);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2243      	movs	r2, #67	; 0x43
 80057b4:	f240 211a 	movw	r1, #538	; 0x21a
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fc6a 	bl	8007092 <WrByte>
 80057be:	4603      	mov	r3, r0
 80057c0:	461a      	mov	r2, r3
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	e005      	b.n	80057d4 <vl53l5cx_init+0x3ac>
 80057c8:	00010002 	.word	0x00010002
 80057cc:	08021764 	.word	0x08021764
 80057d0:	08021398 	.word	0x08021398
 80057d4:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x03);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2203      	movs	r2, #3
 80057da:	f240 211a 	movw	r1, #538	; 0x21a
 80057de:	4618      	mov	r0, r3
 80057e0:	f001 fc57 	bl	8007092 <WrByte>
 80057e4:	4603      	mov	r3, r0
 80057e6:	461a      	mov	r2, r3
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x01);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f240 211a 	movw	r1, #538	; 0x21a
 80057f6:	4618      	mov	r0, r3
 80057f8:	f001 fc4b 	bl	8007092 <WrByte>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	7dfb      	ldrb	r3, [r7, #23]
 8005802:	4313      	orrs	r3, r2
 8005804:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21A, 0x00);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	f240 211a 	movw	r1, #538	; 0x21a
 800580e:	4618      	mov	r0, r3
 8005810:	f001 fc3f 	bl	8007092 <WrByte>
 8005814:	4603      	mov	r3, r0
 8005816:	461a      	mov	r2, r3
 8005818:	7dfb      	ldrb	r3, [r7, #23]
 800581a:	4313      	orrs	r3, r2
 800581c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x219, 0x00);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f240 2119 	movw	r1, #537	; 0x219
 8005826:	4618      	mov	r0, r3
 8005828:	f001 fc33 	bl	8007092 <WrByte>
 800582c:	4603      	mov	r3, r0
 800582e:	461a      	mov	r2, r3
 8005830:	7dfb      	ldrb	r3, [r7, #23]
 8005832:	4313      	orrs	r3, r2
 8005834:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x21B, 0x00);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2200      	movs	r2, #0
 800583a:	f240 211b 	movw	r1, #539	; 0x21b
 800583e:	4618      	mov	r0, r3
 8005840:	f001 fc27 	bl	8007092 <WrByte>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	7dfb      	ldrb	r3, [r7, #23]
 800584a:	4313      	orrs	r3, r2
 800584c:	75fb      	strb	r3, [r7, #23]

	/* Wake up MCU */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005856:	4618      	mov	r0, r3
 8005858:	f001 fc1b 	bl	8007092 <WrByte>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	7dfb      	ldrb	r3, [r7, #23]
 8005862:	4313      	orrs	r3, r2
 8005864:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	210c      	movs	r1, #12
 800586c:	4618      	mov	r0, r3
 800586e:	f001 fc10 	bl	8007092 <WrByte>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	7dfb      	ldrb	r3, [r7, #23]
 8005878:	4313      	orrs	r3, r2
 800587a:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005884:	4618      	mov	r0, r3
 8005886:	f001 fc04 	bl	8007092 <WrByte>
 800588a:	4603      	mov	r3, r0
 800588c:	461a      	mov	r2, r3
 800588e:	7dfb      	ldrb	r3, [r7, #23]
 8005890:	4313      	orrs	r3, r2
 8005892:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x07);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2207      	movs	r2, #7
 8005898:	2120      	movs	r1, #32
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fbf9 	bl	8007092 <WrByte>
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x20, 0x06);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2206      	movs	r2, #6
 80058ae:	2120      	movs	r1, #32
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 fbee 	bl	8007092 <WrByte>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	7dfb      	ldrb	r3, [r7, #23]
 80058bc:	4313      	orrs	r3, r2
 80058be:	75fb      	strb	r3, [r7, #23]

	/* Download FW into VL53L5 */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x09);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2209      	movs	r2, #9
 80058c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80058c8:	4618      	mov	r0, r3
 80058ca:	f001 fbe2 	bl	8007092 <WrByte>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	7dfb      	ldrb	r3, [r7, #23]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058de:	4ad6      	ldr	r2, [pc, #856]	; (8005c38 <vl53l5cx_init+0x810>)
 80058e0:	2100      	movs	r1, #0
 80058e2:	f001 fbec 	bl	80070be <WrMulti>
 80058e6:	4603      	mov	r3, r0
 80058e8:	461a      	mov	r2, r3
 80058ea:	7dfb      	ldrb	r3, [r7, #23]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0a);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	220a      	movs	r2, #10
 80058f4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 fbca 	bl	8007092 <WrByte>
 80058fe:	4603      	mov	r3, r0
 8005900:	461a      	mov	r2, r3
 8005902:	7dfb      	ldrb	r3, [r7, #23]
 8005904:	4313      	orrs	r3, r2
 8005906:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800590e:	4acb      	ldr	r2, [pc, #812]	; (8005c3c <vl53l5cx_init+0x814>)
 8005910:	2100      	movs	r1, #0
 8005912:	f001 fbd4 	bl	80070be <WrMulti>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	7dfb      	ldrb	r3, [r7, #23]
 800591c:	4313      	orrs	r3, r2
 800591e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x8000],0x8000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x0b);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	220b      	movs	r2, #11
 8005924:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005928:	4618      	mov	r0, r3
 800592a:	f001 fbb2 	bl	8007092 <WrByte>
 800592e:	4603      	mov	r3, r0
 8005930:	461a      	mov	r2, r3
 8005932:	7dfb      	ldrb	r3, [r7, #23]
 8005934:	4313      	orrs	r3, r2
 8005936:	75fb      	strb	r3, [r7, #23]
	status |= WrMulti(&(p_dev->platform),0,
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800593e:	4ac0      	ldr	r2, [pc, #768]	; (8005c40 <vl53l5cx_init+0x818>)
 8005940:	2100      	movs	r1, #0
 8005942:	f001 fbbc 	bl	80070be <WrMulti>
 8005946:	4603      	mov	r3, r0
 8005948:	461a      	mov	r2, r3
 800594a:	7dfb      	ldrb	r3, [r7, #23]
 800594c:	4313      	orrs	r3, r2
 800594e:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)&VL53L5CX_FIRMWARE[0x10000],0x5000);
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005958:	4618      	mov	r0, r3
 800595a:	f001 fb9a 	bl	8007092 <WrByte>
 800595e:	4603      	mov	r3, r0
 8005960:	461a      	mov	r2, r3
 8005962:	7dfb      	ldrb	r3, [r7, #23]
 8005964:	4313      	orrs	r3, r2
 8005966:	75fb      	strb	r3, [r7, #23]

	/* Check if FW correctly downloaded */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005970:	4618      	mov	r0, r3
 8005972:	f001 fb8e 	bl	8007092 <WrByte>
 8005976:	4603      	mov	r3, r0
 8005978:	461a      	mov	r2, r3
 800597a:	7dfb      	ldrb	r3, [r7, #23]
 800597c:	4313      	orrs	r3, r2
 800597e:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x03, 0x0D);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	220d      	movs	r2, #13
 8005984:	2103      	movs	r1, #3
 8005986:	4618      	mov	r0, r3
 8005988:	f001 fb83 	bl	8007092 <WrByte>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	4313      	orrs	r3, r2
 8005994:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x01);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 fb77 	bl	8007092 <WrByte>
 80059a4:	4603      	mov	r3, r0
 80059a6:	461a      	mov	r2, r3
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x21, 0x10, 0x10);
 80059ae:	2310      	movs	r3, #16
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	2310      	movs	r3, #16
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	2321      	movs	r3, #33	; 0x21
 80059b8:	2200      	movs	r2, #0
 80059ba:	2101      	movs	r1, #1
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff fa67 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 80059c2:	4603      	mov	r3, r0
 80059c4:	461a      	mov	r2, r3
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80059d4:	4618      	mov	r0, r3
 80059d6:	f001 fb5c 	bl	8007092 <WrByte>
 80059da:	4603      	mov	r3, r0
 80059dc:	461a      	mov	r2, r3
 80059de:	7dfb      	ldrb	r3, [r7, #23]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x01);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	210c      	movs	r1, #12
 80059ea:	4618      	mov	r0, r3
 80059ec:	f001 fb51 	bl	8007092 <WrByte>
 80059f0:	4603      	mov	r3, r0
 80059f2:	461a      	mov	r2, r3
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	75fb      	strb	r3, [r7, #23]

	/* Reset MCU and wait boot */
	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fb45 	bl	8007092 <WrByte>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	7dfb      	ldrb	r3, [r7, #23]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x114, 0x00);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f44f 718a 	mov.w	r1, #276	; 0x114
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f001 fb39 	bl	8007092 <WrByte>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
 8005a24:	7dfb      	ldrb	r3, [r7, #23]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x115, 0x00);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f240 1115 	movw	r1, #277	; 0x115
 8005a32:	4618      	mov	r0, r3
 8005a34:	f001 fb2d 	bl	8007092 <WrByte>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	7dfb      	ldrb	r3, [r7, #23]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x116, 0x42);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2242      	movs	r2, #66	; 0x42
 8005a46:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f001 fb21 	bl	8007092 <WrByte>
 8005a50:	4603      	mov	r3, r0
 8005a52:	461a      	mov	r2, r3
 8005a54:	7dfb      	ldrb	r3, [r7, #23]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x117, 0x00);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f240 1117 	movw	r1, #279	; 0x117
 8005a62:	4618      	mov	r0, r3
 8005a64:	f001 fb15 	bl	8007092 <WrByte>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x00);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	210b      	movs	r1, #11
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f001 fb0a 	bl	8007092 <WrByte>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	461a      	mov	r2, r3
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0C, 0x00);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	210c      	movs	r1, #12
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 faff 	bl	8007092 <WrByte>
 8005a94:	4603      	mov	r3, r0
 8005a96:	461a      	mov	r2, r3
 8005a98:	7dfb      	ldrb	r3, [r7, #23]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x0B, 0x01);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	210b      	movs	r1, #11
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 faf4 	bl	8007092 <WrByte>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	461a      	mov	r2, r3
 8005aae:	7dfb      	ldrb	r3, [r7, #23]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	75fb      	strb	r3, [r7, #23]
	status |= _vl53l5cx_poll_for_answer(p_dev, 1, 0, 0x06, 0xff, 0x00);
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	23ff      	movs	r3, #255	; 0xff
 8005aba:	9300      	str	r3, [sp, #0]
 8005abc:	2306      	movs	r3, #6
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff f9e4 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	461a      	mov	r2, r3
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2202      	movs	r2, #2
 8005ad6:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 fad9 	bl	8007092 <WrByte>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	7dfb      	ldrb	r3, [r7, #23]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	75fb      	strb	r3, [r7, #23]

	/* Get offset NVM data and store them into the offset buffer */
	status |= WrMulti(&(p_dev->platform), 0x2fd8,
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	2328      	movs	r3, #40	; 0x28
 8005aee:	4a55      	ldr	r2, [pc, #340]	; (8005c44 <vl53l5cx_init+0x81c>)
 8005af0:	f642 71d8 	movw	r1, #12248	; 0x2fd8
 8005af4:	f001 fae3 	bl	80070be <WrMulti>
 8005af8:	4603      	mov	r3, r0
 8005afa:	461a      	mov	r2, r3
 8005afc:	7dfb      	ldrb	r3, [r7, #23]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	75fb      	strb	r3, [r7, #23]
		(uint8_t*)VL53L5CX_GET_NVM_CMD, sizeof(VL53L5CX_GET_NVM_CMD));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 0,
 8005b02:	2302      	movs	r3, #2
 8005b04:	9301      	str	r3, [sp, #4]
 8005b06:	23ff      	movs	r3, #255	; 0xff
 8005b08:	9300      	str	r3, [sp, #0]
 8005b0a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005b0e:	2200      	movs	r2, #0
 8005b10:	2104      	movs	r1, #4
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff f9bc 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	7dfb      	ldrb	r3, [r7, #23]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 2);
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005b22:	6878      	ldr	r0, [r7, #4]
		p_dev->temp_buffer, VL53L5CX_NVM_DATA_SIZE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8005b2a:	f44f 73f6 	mov.w	r3, #492	; 0x1ec
 8005b2e:	f642 4104 	movw	r1, #11268	; 0x2c04
 8005b32:	f001 fadb 	bl	80070ec <RdMulti>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	7dfb      	ldrb	r3, [r7, #23]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(p_dev->offset_data, p_dev->temp_buffer,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f103 0020 	add.w	r0, r3, #32
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8005b4c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005b50:	4619      	mov	r1, r3
 8005b52:	f005 ff41 	bl	800b9d8 <memcpy>
		VL53L5CX_OFFSET_BUFFER_SIZE);
	status |= _vl53l5cx_send_offset_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8005b56:	2110      	movs	r1, #16
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff f9eb 	bl	8004f34 <_vl53l5cx_send_offset_data>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	461a      	mov	r2, r3
 8005b62:	7dfb      	ldrb	r3, [r7, #23]
 8005b64:	4313      	orrs	r3, r2
 8005b66:	75fb      	strb	r3, [r7, #23]

	/* Set default Xtalk shape. Send Xtalk to sensor */
	(void)memcpy(p_dev->xtalk_data, (uint8_t*)VL53L5CX_DEFAULT_XTALK,
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b6e:	4a36      	ldr	r2, [pc, #216]	; (8005c48 <vl53l5cx_init+0x820>)
 8005b70:	4618      	mov	r0, r3
 8005b72:	4611      	mov	r1, r2
 8005b74:	f44f 7342 	mov.w	r3, #776	; 0x308
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f005 ff2d 	bl	800b9d8 <memcpy>
		VL53L5CX_XTALK_BUFFER_SIZE);
	status |= _vl53l5cx_send_xtalk_data(p_dev, VL53L5CX_RESOLUTION_4X4);
 8005b7e:	2110      	movs	r1, #16
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7ff fb3f 	bl	8005204 <_vl53l5cx_send_xtalk_data>
 8005b86:	4603      	mov	r3, r0
 8005b88:	461a      	mov	r2, r3
 8005b8a:	7dfb      	ldrb	r3, [r7, #23]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	75fb      	strb	r3, [r7, #23]

	/* Send default configuration to VL53L5 firmware */
	status |= WrMulti(&(p_dev->platform), 0x2c34,
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	f44f 7373 	mov.w	r3, #972	; 0x3cc
 8005b9a:	f642 4134 	movw	r1, #11316	; 0x2c34
 8005b9e:	f001 fa8e 	bl	80070be <WrMulti>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	75fb      	strb	r3, [r7, #23]
		p_dev->default_configuration,
		sizeof(VL53L5CX_DEFAULT_CONFIGURATION));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8005bac:	2303      	movs	r3, #3
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	23ff      	movs	r3, #255	; 0xff
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2104      	movs	r1, #4
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff f967 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	7dfb      	ldrb	r3, [r7, #23]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&pipe_ctrl,
 8005bcc:	f107 0110 	add.w	r1, r7, #16
 8005bd0:	2304      	movs	r3, #4
 8005bd2:	f64c 7278 	movw	r2, #53112	; 0xcf78
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 ffdc 	bl	8006b94 <vl53l5cx_dci_write_data>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	461a      	mov	r2, r3
 8005be0:	7dfb      	ldrb	r3, [r7, #23]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_DCI_PIPE_CONTROL, (uint16_t)sizeof(pipe_ctrl));
#if VL53L5CX_NB_TARGET_PER_ZONE != 1
	tmp = VL53L5CX_NB_TARGET_PER_ZONE;
 8005be6:	2302      	movs	r3, #2
 8005be8:	75bb      	strb	r3, [r7, #22]
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8005bf0:	230c      	movs	r3, #12
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	f107 0316 	add.w	r3, r7, #22
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	2310      	movs	r3, #16
 8005c00:	f245 4278 	movw	r2, #21624	; 0x5478
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f001 f864 	bl	8006cd2 <vl53l5cx_dci_replace_data>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	7dfb      	ldrb	r3, [r7, #23]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	75fb      	strb	r3, [r7, #23]
		VL53L5CX_DCI_FW_NB_TARGET, 16,
	(uint8_t*)&tmp, 1, 0x0C);
#endif

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8005c14:	f107 010c 	add.w	r1, r7, #12
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ffb8 	bl	8006b94 <vl53l5cx_dci_write_data>
 8005c24:	4603      	mov	r3, r0
 8005c26:	461a      	mov	r2, r3
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	75fb      	strb	r3, [r7, #23]
			VL53L5CX_DCI_SINGLE_RANGE, 
			(uint16_t)sizeof(single_range));
	return status;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	0800c398 	.word	0x0800c398
 8005c3c:	08014398 	.word	0x08014398
 8005c40:	0801c398 	.word	0x0801c398
 8005c44:	08021a6c 	.word	0x08021a6c
 8005c48:	08021764 	.word	0x08021764

08005c4c <vl53l5cx_set_i2c_address>:

uint8_t vl53l5cx_set_i2c_address(
		VL53L5CX_Configuration		*p_dev,
		uint16_t		        i2c_address)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	460b      	mov	r3, r1
 8005c56:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fa14 	bl	8007092 <WrByte>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	73fb      	strb	r3, [r7, #15]
	status |= WrByte(&(p_dev->platform), 0x4, (uint8_t)(i2c_address >> 1));
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	887b      	ldrh	r3, [r7, #2]
 8005c78:	085b      	lsrs	r3, r3, #1
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	461a      	mov	r2, r3
 8005c80:	2104      	movs	r1, #4
 8005c82:	f001 fa06 	bl	8007092 <WrByte>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	7bfb      	ldrb	r3, [r7, #15]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	73fb      	strb	r3, [r7, #15]
	p_dev->platform.address = i2c_address;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	801a      	strh	r2, [r3, #0]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2202      	movs	r2, #2
 8005c9a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f9f7 	bl	8007092 <WrByte>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	73fb      	strb	r3, [r7, #15]

	return status;
 8005cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <vl53l5cx_get_power_mode>:

uint8_t vl53l5cx_get_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_power_mode)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b084      	sub	sp, #16
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	73fb      	strb	r3, [r7, #15]

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f001 f9df 	bl	8007092 <WrByte>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	73fb      	strb	r3, [r7, #15]
	status |= RdByte(&(p_dev->platform), 0x009, &tmp);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f107 020e 	add.w	r2, r7, #14
 8005ce4:	2109      	movs	r1, #9
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 f9be 	bl	8007068 <RdByte>
 8005cec:	4603      	mov	r3, r0
 8005cee:	461a      	mov	r2, r3
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	73fb      	strb	r3, [r7, #15]

	switch(tmp)
 8005cf6:	7bbb      	ldrb	r3, [r7, #14]
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d005      	beq.n	8005d08 <vl53l5cx_get_power_mode+0x50>
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d107      	bne.n	8005d10 <vl53l5cx_get_power_mode+0x58>
	{
		case 0x4:
			*p_power_mode = VL53L5CX_POWER_MODE_WAKEUP;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2201      	movs	r2, #1
 8005d04:	701a      	strb	r2, [r3, #0]
			break;
 8005d06:	e009      	b.n	8005d1c <vl53l5cx_get_power_mode+0x64>
		case 0x2:
			*p_power_mode = VL53L5CX_POWER_MODE_SLEEP;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]

			break;
 8005d0e:	e005      	b.n	8005d1c <vl53l5cx_get_power_mode+0x64>
		default:
			*p_power_mode = 0;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	701a      	strb	r2, [r3, #0]
			status = VL53L5CX_STATUS_ERROR;
 8005d16:	23ff      	movs	r3, #255	; 0xff
 8005d18:	73fb      	strb	r3, [r7, #15]
			break;
 8005d1a:	bf00      	nop
	}

	status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 f9b4 	bl	8007092 <WrByte>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	73fb      	strb	r3, [r7, #15]

	return status;
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}

08005d3e <vl53l5cx_set_power_mode>:

uint8_t vl53l5cx_set_power_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t			        power_mode)
{
 8005d3e:	b580      	push	{r7, lr}
 8005d40:	b086      	sub	sp, #24
 8005d42:	af02      	add	r7, sp, #8
 8005d44:	6078      	str	r0, [r7, #4]
 8005d46:	460b      	mov	r3, r1
 8005d48:	70fb      	strb	r3, [r7, #3]
	uint8_t current_power_mode, status = VL53L5CX_STATUS_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_get_power_mode(p_dev, &current_power_mode);
 8005d4e:	f107 030e 	add.w	r3, r7, #14
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff ffaf 	bl	8005cb8 <vl53l5cx_get_power_mode>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	73fb      	strb	r3, [r7, #15]
	if(power_mode != current_power_mode)
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d061      	beq.n	8005e30 <vl53l5cx_set_power_mode+0xf2>
	{
	switch(power_mode)
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d028      	beq.n	8005dc4 <vl53l5cx_set_power_mode+0x86>
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d14d      	bne.n	8005e12 <vl53l5cx_set_power_mode+0xd4>
	{
		case VL53L5CX_POWER_MODE_WAKEUP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f987 	bl	8007092 <WrByte>
 8005d84:	4603      	mov	r3, r0
 8005d86:	461a      	mov	r2, r3
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2204      	movs	r2, #4
 8005d92:	2109      	movs	r1, #9
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 f97c 	bl	8007092 <WrByte>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	7bfb      	ldrb	r3, [r7, #15]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8005da4:	2301      	movs	r3, #1
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	2301      	movs	r3, #1
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	2306      	movs	r3, #6
 8005dae:	2200      	movs	r2, #0
 8005db0:	2101      	movs	r1, #1
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7ff f86c 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8005db8:	4603      	mov	r3, r0
 8005dba:	461a      	mov	r2, r3
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 1);
			break;
 8005dc2:	e029      	b.n	8005e18 <vl53l5cx_set_power_mode+0xda>

		case VL53L5CX_POWER_MODE_SLEEP:
			status |= WrByte(&(p_dev->platform), 0x7FFF, 0x00);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f001 f960 	bl	8007092 <WrByte>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	7bfb      	ldrb	r3, [r7, #15]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	73fb      	strb	r3, [r7, #15]
			status |= WrByte(&(p_dev->platform), 0x09, 0x02);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	2109      	movs	r1, #9
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f955 	bl	8007092 <WrByte>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461a      	mov	r2, r3
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	73fb      	strb	r3, [r7, #15]
			status |= _vl53l5cx_poll_for_answer(
 8005df2:	2300      	movs	r3, #0
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	2301      	movs	r3, #1
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	2306      	movs	r3, #6
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	2101      	movs	r1, #1
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff f845 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	73fb      	strb	r3, [r7, #15]
						p_dev, 1, 0, 0x06, 0x01, 0);
			break;
 8005e10:	e002      	b.n	8005e18 <vl53l5cx_set_power_mode+0xda>

		default:
			status = VL53L5CX_STATUS_ERROR;
 8005e12:	23ff      	movs	r3, #255	; 0xff
 8005e14:	73fb      	strb	r3, [r7, #15]
			break;
 8005e16:	bf00      	nop
		}
		status |= WrByte(&(p_dev->platform), 0x7FFF, 0x02);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2202      	movs	r2, #2
 8005e1c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 f936 	bl	8007092 <WrByte>
 8005e26:	4603      	mov	r3, r0
 8005e28:	461a      	mov	r2, r3
 8005e2a:	7bfb      	ldrb	r3, [r7, #15]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
	...

08005e3c <vl53l5cx_start_ranging>:

uint8_t vl53l5cx_start_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 8005e3c:	b5b0      	push	{r4, r5, r7, lr}
 8005e3e:	b09c      	sub	sp, #112	; 0x70
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	6078      	str	r0, [r7, #4]
	uint8_t resolution, status = VL53L5CX_STATUS_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint32_t i;
	uint32_t header_config[2] = {0, 0};
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	653b      	str	r3, [r7, #80]	; 0x50
 8005e4e:	2300      	movs	r3, #0
 8005e50:	657b      	str	r3, [r7, #84]	; 0x54

	union Block_header *bh_ptr;
	uint8_t cmd[] = {0x00, 0x03, 0x00, 0x00};
 8005e52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c

	status |= vl53l5cx_get_resolution(p_dev, &resolution);
 8005e58:	f107 035b 	add.w	r3, r7, #91	; 0x5b
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fc02 	bl	8006668 <vl53l5cx_get_resolution>
 8005e64:	4603      	mov	r3, r0
 8005e66:	461a      	mov	r2, r3
 8005e68:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	p_dev->data_read_size = 0;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	615a      	str	r2, [r3, #20]
	p_dev->streamcount = 255;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	22ff      	movs	r2, #255	; 0xff
 8005e7c:	741a      	strb	r2, [r3, #16]

	/* Enable mandatory output (meta and common data) */
	uint32_t output_bh_enable[] = {
 8005e7e:	4b9c      	ldr	r3, [pc, #624]	; (80060f0 <vl53l5cx_start_ranging+0x2b4>)
 8005e80:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8005e84:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e86:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00000000U,
		0x00000000U,
		0xC0000000U};

	/* Send addresses of possible output */
	uint32_t output[] ={VL53L5CX_START_BH,
 8005e8a:	4b9a      	ldr	r3, [pc, #616]	; (80060f4 <vl53l5cx_start_ranging+0x2b8>)
 8005e8c:	f107 040c 	add.w	r4, r7, #12
 8005e90:	461d      	mov	r5, r3
 8005e92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e9a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005e9e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		VL53L5CX_TARGET_STATUS_BH,
		VL53L5CX_MOTION_DETECT_BH};

	/* Enable selected outputs in the 'platform.h' file */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	output_bh_enable[0] += (uint32_t)8;
 8005ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ea4:	3308      	adds	r3, #8
 8005ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_SPADS_ENABLED
	output_bh_enable[0] += (uint32_t)16;
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eaa:	3310      	adds	r3, #16
 8005eac:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	output_bh_enable[0] += (uint32_t)32;
 8005eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb0:	3320      	adds	r3, #32
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
	output_bh_enable[0] += (uint32_t)64;
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb6:	3340      	adds	r3, #64	; 0x40
 8005eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
	output_bh_enable[0] += (uint32_t)128;
 8005eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ebc:	3380      	adds	r3, #128	; 0x80
 8005ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
	output_bh_enable[0] += (uint32_t)256;
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_REFLECTANCE_PERCENT
	output_bh_enable[0] += (uint32_t)512;
 8005ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ece:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
	output_bh_enable[0] += (uint32_t)1024;
 8005ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ed2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	output_bh_enable[0] += (uint32_t)2048;
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ede:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

	/* Update data size */
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8005ee4:	e077      	b.n	8005fd6 <vl53l5cx_start_ranging+0x19a>
	{
		if ((output[i] == (uint8_t)0) 
 8005ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005eee:	4413      	add	r3, r2
 8005ef0:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d06a      	beq.n	8005fce <vl53l5cx_start_ranging+0x192>
                    || ((output_bh_enable[i/(uint32_t)32]
 8005ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005efa:	095b      	lsrs	r3, r3, #5
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8005f02:	4413      	add	r3, r2
 8005f04:	f853 2c2c 	ldr.w	r2, [r3, #-44]
                         &((uint32_t)1 << (i%(uint32_t)32))) == (uint32_t)0))
 8005f08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f0a:	f003 031f 	and.w	r3, r3, #31
 8005f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f12:	f003 0301 	and.w	r3, r3, #1
                    || ((output_bh_enable[i/(uint32_t)32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d059      	beq.n	8005fce <vl53l5cx_start_ranging+0x192>
		{
			continue;
		}

		bh_ptr = (union Block_header *)&(output[i]);
 8005f1a:	f107 020c 	add.w	r2, r7, #12
 8005f1e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (((uint8_t)bh_ptr->type >= (uint8_t)0x1) 
 8005f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d03c      	beq.n	8005fae <vl53l5cx_start_ranging+0x172>
                    && ((uint8_t)bh_ptr->type < (uint8_t)0x0d))
 8005f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b0c      	cmp	r3, #12
 8005f40:	d835      	bhi.n	8005fae <vl53l5cx_start_ranging+0x172>
		{
			if ((bh_ptr->idx >= (uint16_t)0x54d0) 
 8005f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f44:	885b      	ldrh	r3, [r3, #2]
 8005f46:	f245 42cf 	movw	r2, #21711	; 0x54cf
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d910      	bls.n	8005f70 <vl53l5cx_start_ranging+0x134>
                            && (bh_ptr->idx < (uint16_t)(0x54d0 + 960)))
 8005f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f50:	885b      	ldrh	r3, [r3, #2]
 8005f52:	f645 028f 	movw	r2, #22671	; 0x588f
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d80a      	bhi.n	8005f70 <vl53l5cx_start_ranging+0x134>
			{
				bh_ptr->size = resolution;
 8005f5a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f62:	b299      	uxth	r1, r3
 8005f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f66:	8813      	ldrh	r3, [r2, #0]
 8005f68:	f361 130f 	bfi	r3, r1, #4, #12
 8005f6c:	8013      	strh	r3, [r2, #0]
 8005f6e:	e00b      	b.n	8005f88 <vl53l5cx_start_ranging+0x14c>
			}	
			else
			{
				bh_ptr->size = (uint8_t)(resolution 
 8005f70:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8005f74:	005b      	lsls	r3, r3, #1
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7c:	b299      	uxth	r1, r3
 8005f7e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f80:	8813      	ldrh	r3, [r2, #0]
 8005f82:	f361 130f 	bfi	r3, r1, #4, #12
 8005f86:	8013      	strh	r3, [r2, #0]
                                  * (uint8_t)VL53L5CX_NB_TARGET_PER_ZONE);
			}
			p_dev->data_read_size += bh_ptr->type * bh_ptr->size;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f8e:	7812      	ldrb	r2, [r2, #0]
 8005f90:	f3c2 0203 	ubfx	r2, r2, #0, #4
 8005f94:	b2d2      	uxtb	r2, r2
 8005f96:	4611      	mov	r1, r2
 8005f98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f9a:	8812      	ldrh	r2, [r2, #0]
 8005f9c:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8005fa0:	b292      	uxth	r2, r2
 8005fa2:	fb02 f201 	mul.w	r2, r2, r1
 8005fa6:	441a      	add	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	615a      	str	r2, [r3, #20]
 8005fac:	e009      	b.n	8005fc2 <vl53l5cx_start_ranging+0x186>
		}
		else
		{	
			p_dev->data_read_size += bh_ptr->size;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fb4:	8812      	ldrh	r2, [r2, #0]
 8005fb6:	f3c2 120b 	ubfx	r2, r2, #4, #12
 8005fba:	b292      	uxth	r2, r2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	615a      	str	r2, [r3, #20]
		}
		p_dev->data_read_size += (uint32_t)4;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	695b      	ldr	r3, [r3, #20]
 8005fc6:	1d1a      	adds	r2, r3, #4
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	615a      	str	r2, [r3, #20]
 8005fcc:	e000      	b.n	8005fd0 <vl53l5cx_start_ranging+0x194>
			continue;
 8005fce:	bf00      	nop
	for (i = 0; i < (uint32_t)(sizeof(output)/sizeof(uint32_t)); i++)
 8005fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	667b      	str	r3, [r7, #100]	; 0x64
 8005fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005fd8:	2b0b      	cmp	r3, #11
 8005fda:	d984      	bls.n	8005ee6 <vl53l5cx_start_ranging+0xaa>
	}
	p_dev->data_read_size += (uint32_t)20;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f103 0214 	add.w	r2, r3, #20
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	615a      	str	r2, [r3, #20]

	status |= vl53l5cx_dci_write_data(p_dev,
 8005fe8:	f107 010c 	add.w	r1, r7, #12
 8005fec:	2330      	movs	r3, #48	; 0x30
 8005fee:	f64c 5278 	movw	r2, #52600	; 0xcd78
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 fdce 	bl	8006b94 <vl53l5cx_dci_write_data>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006000:	4313      	orrs	r3, r2
 8006002:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint8_t*)&(output), VL53L5CX_DCI_OUTPUT_LIST,
			(uint16_t)sizeof(output));

    header_config[0] = p_dev->data_read_size;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	653b      	str	r3, [r7, #80]	; 0x50
    header_config[1] = i + (uint32_t)1;
 800600c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600e:	3301      	adds	r3, #1
 8006010:	657b      	str	r3, [r7, #84]	; 0x54
        
	status |= vl53l5cx_dci_write_data(p_dev,
 8006012:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8006016:	2308      	movs	r3, #8
 8006018:	f64c 5260 	movw	r2, #52576	; 0xcd60
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fdb9 	bl	8006b94 <vl53l5cx_dci_write_data>
 8006022:	4603      	mov	r3, r0
 8006024:	461a      	mov	r2, r3
 8006026:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800602a:	4313      	orrs	r3, r2
 800602c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint8_t*)&(header_config), VL53L5CX_DCI_OUTPUT_CONFIG,
			(uint16_t)sizeof(header_config));

	status |= vl53l5cx_dci_write_data(p_dev,
 8006030:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006034:	2310      	movs	r3, #16
 8006036:	f64c 5268 	movw	r2, #52584	; 0xcd68
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fdaa 	bl	8006b94 <vl53l5cx_dci_write_data>
 8006040:	4603      	mov	r3, r0
 8006042:	461a      	mov	r2, r3
 8006044:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006048:	4313      	orrs	r3, r2
 800604a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint8_t*)&(output_bh_enable), VL53L5CX_DCI_OUTPUT_ENABLES,
			(uint16_t)sizeof(output_bh_enable));

	/* Start xshut bypass (interrupt mode) */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f81b 	bl	8007092 <WrByte>
 800605c:	4603      	mov	r3, r0
 800605e:	461a      	mov	r2, r3
 8006060:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006064:	4313      	orrs	r3, r2
 8006066:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	status |= WrByte(&(p_dev->platform), 0x09, 0x05);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2205      	movs	r2, #5
 800606e:	2109      	movs	r1, #9
 8006070:	4618      	mov	r0, r3
 8006072:	f001 f80e 	bl	8007092 <WrByte>
 8006076:	4603      	mov	r3, r0
 8006078:	461a      	mov	r2, r3
 800607a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800607e:	4313      	orrs	r3, r2
 8006080:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800608c:	4618      	mov	r0, r3
 800608e:	f001 f800 	bl	8007092 <WrByte>
 8006092:	4603      	mov	r3, r0
 8006094:	461a      	mov	r2, r3
 8006096:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800609a:	4313      	orrs	r3, r2
 800609c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	/* Start ranging session */
	status |= WrMulti(&(p_dev->platform), VL53L5CX_UI_CMD_END - 
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80060a6:	2304      	movs	r3, #4
 80060a8:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 80060ac:	f001 f807 	bl	80070be <WrMulti>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461a      	mov	r2, r3
 80060b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			(uint16_t)(4 - 1), (uint8_t*)cmd, sizeof(cmd));
	status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 80060be:	2303      	movs	r3, #3
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	23ff      	movs	r3, #255	; 0xff
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80060ca:	2201      	movs	r2, #1
 80060cc:	2104      	movs	r1, #4
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f7fe fede 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 80060d4:	4603      	mov	r3, r0
 80060d6:	461a      	mov	r2, r3
 80060d8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80060dc:	4313      	orrs	r3, r2
 80060de:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

	return status;
 80060e2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3768      	adds	r7, #104	; 0x68
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bdb0      	pop	{r4, r5, r7, pc}
 80060ee:	bf00      	nop
 80060f0:	0800c07c 	.word	0x0800c07c
 80060f4:	0800c08c 	.word	0x0800c08c

080060f8 <vl53l5cx_stop_ranging>:

uint8_t vl53l5cx_stop_ranging(
		VL53L5CX_Configuration		*p_dev)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0, status = VL53L5CX_STATUS_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	74fb      	strb	r3, [r7, #19]
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
	uint16_t timeout = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	82bb      	strh	r3, [r7, #20]
	uint32_t auto_stop_flag = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	60fb      	str	r3, [r7, #12]

	status |= RdMulti(&(p_dev->platform),
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f107 020c 	add.w	r2, r7, #12
 8006116:	2304      	movs	r3, #4
 8006118:	f642 71fc 	movw	r1, #12284	; 0x2ffc
 800611c:	f000 ffe6 	bl	80070ec <RdMulti>
 8006120:	4603      	mov	r3, r0
 8006122:	461a      	mov	r2, r3
 8006124:	7dfb      	ldrb	r3, [r7, #23]
 8006126:	4313      	orrs	r3, r2
 8006128:	75fb      	strb	r3, [r7, #23]
                          0x2FFC, (uint8_t*)&auto_stop_flag, 4);
	if(auto_stop_flag != (uint32_t)0x4FF)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f240 42ff 	movw	r2, #1279	; 0x4ff
 8006130:	4293      	cmp	r3, r2
 8006132:	d045      	beq.n	80061c0 <vl53l5cx_stop_ranging+0xc8>
	{
	        status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800613c:	4618      	mov	r0, r3
 800613e:	f000 ffa8 	bl	8007092 <WrByte>
 8006142:	4603      	mov	r3, r0
 8006144:	461a      	mov	r2, r3
 8006146:	7dfb      	ldrb	r3, [r7, #23]
 8006148:	4313      	orrs	r3, r2
 800614a:	75fb      	strb	r3, [r7, #23]

	        /* Provoke MCU stop */
	        status |= WrByte(&(p_dev->platform), 0x15, 0x16);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2216      	movs	r2, #22
 8006150:	2115      	movs	r1, #21
 8006152:	4618      	mov	r0, r3
 8006154:	f000 ff9d 	bl	8007092 <WrByte>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	7dfb      	ldrb	r3, [r7, #23]
 800615e:	4313      	orrs	r3, r2
 8006160:	75fb      	strb	r3, [r7, #23]
	        status |= WrByte(&(p_dev->platform), 0x14, 0x01);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	2114      	movs	r1, #20
 8006168:	4618      	mov	r0, r3
 800616a:	f000 ff92 	bl	8007092 <WrByte>
 800616e:	4603      	mov	r3, r0
 8006170:	461a      	mov	r2, r3
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	4313      	orrs	r3, r2
 8006176:	75fb      	strb	r3, [r7, #23]

	        /* Poll for G02 status 0 MCU stop */
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 8006178:	e01e      	b.n	80061b8 <vl53l5cx_stop_ranging+0xc0>
	        {
	        	status |= RdByte(&(p_dev->platform), 0x6, &tmp);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f107 0213 	add.w	r2, r7, #19
 8006180:	2106      	movs	r1, #6
 8006182:	4618      	mov	r0, r3
 8006184:	f000 ff70 	bl	8007068 <RdByte>
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	4313      	orrs	r3, r2
 8006190:	75fb      	strb	r3, [r7, #23]
	        	status |= WaitMs(&(p_dev->platform), 10);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	210a      	movs	r1, #10
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fff5 	bl	8007186 <WaitMs>
 800619c:	4603      	mov	r3, r0
 800619e:	461a      	mov	r2, r3
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	75fb      	strb	r3, [r7, #23]
	        	timeout++;
 80061a6:	8abb      	ldrh	r3, [r7, #20]
 80061a8:	3301      	adds	r3, #1
 80061aa:	82bb      	strh	r3, [r7, #20]
                        /* Timeout reached after 5 seconds */
	        	if(timeout > (uint16_t)500)
 80061ac:	8abb      	ldrh	r3, [r7, #20]
 80061ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80061b2:	d901      	bls.n	80061b8 <vl53l5cx_stop_ranging+0xc0>
				{
					status = VL53L5CX_STATUS_ERROR;
 80061b4:	23ff      	movs	r3, #255	; 0xff
 80061b6:	75fb      	strb	r3, [r7, #23]
	        while(((tmp & (uint8_t)0x80) >> 7) == (uint8_t)0x00)
 80061b8:	7cfb      	ldrb	r3, [r7, #19]
 80061ba:	b25b      	sxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	dadc      	bge.n	800617a <vl53l5cx_stop_ranging+0x82>
				}
        	}
        }
	/* Undo MCU stop */
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x00);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 ff62 	bl	8007092 <WrByte>
 80061ce:	4603      	mov	r3, r0
 80061d0:	461a      	mov	r2, r3
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x14, 0x00);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	2114      	movs	r1, #20
 80061de:	4618      	mov	r0, r3
 80061e0:	f000 ff57 	bl	8007092 <WrByte>
 80061e4:	4603      	mov	r3, r0
 80061e6:	461a      	mov	r2, r3
 80061e8:	7dfb      	ldrb	r3, [r7, #23]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x15, 0x00);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2115      	movs	r1, #21
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 ff4c 	bl	8007092 <WrByte>
 80061fa:	4603      	mov	r3, r0
 80061fc:	461a      	mov	r2, r3
 80061fe:	7dfb      	ldrb	r3, [r7, #23]
 8006200:	4313      	orrs	r3, r2
 8006202:	75fb      	strb	r3, [r7, #23]

	/* Stop xshut bypass */
	status |= WrByte(&(p_dev->platform), 0x09, 0x04);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2204      	movs	r2, #4
 8006208:	2109      	movs	r1, #9
 800620a:	4618      	mov	r0, r3
 800620c:	f000 ff41 	bl	8007092 <WrByte>
 8006210:	4603      	mov	r3, r0
 8006212:	461a      	mov	r2, r3
 8006214:	7dfb      	ldrb	r3, [r7, #23]
 8006216:	4313      	orrs	r3, r2
 8006218:	75fb      	strb	r3, [r7, #23]
	status |= WrByte(&(p_dev->platform), 0x7fff, 0x02);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006222:	4618      	mov	r0, r3
 8006224:	f000 ff35 	bl	8007092 <WrByte>
 8006228:	4603      	mov	r3, r0
 800622a:	461a      	mov	r2, r3
 800622c:	7dfb      	ldrb	r3, [r7, #23]
 800622e:	4313      	orrs	r3, r2
 8006230:	75fb      	strb	r3, [r7, #23]

	return status;
 8006232:	7dfb      	ldrb	r3, [r7, #23]
}
 8006234:	4618      	mov	r0, r3
 8006236:	3718      	adds	r7, #24
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <vl53l5cx_check_data_ready>:

uint8_t vl53l5cx_check_data_ready(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_isReady)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]

	*p_isReady = 0;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
	status |= RdMulti(&(p_dev->platform), 0x0, p_dev->temp_buffer, 4);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8006258:	2304      	movs	r3, #4
 800625a:	2100      	movs	r1, #0
 800625c:	f000 ff46 	bl	80070ec <RdMulti>
 8006260:	4603      	mov	r3, r0
 8006262:	461a      	mov	r2, r3
 8006264:	7bfb      	ldrb	r3, [r7, #15]
 8006266:	4313      	orrs	r3, r2
 8006268:	73fb      	strb	r3, [r7, #15]

	if((p_dev->temp_buffer[0] != p_dev->streamcount)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	7c1b      	ldrb	r3, [r3, #16]
 8006274:	429a      	cmp	r2, r3
 8006276:	d020      	beq.n	80062ba <vl53l5cx_check_data_ready+0x7e>
			&& (p_dev->temp_buffer[0] != (uint8_t)255)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3510 	ldrb.w	r3, [r3, #1296]	; 0x510
 800627e:	2bff      	cmp	r3, #255	; 0xff
 8006280:	d01b      	beq.n	80062ba <vl53l5cx_check_data_ready+0x7e>
			&& (p_dev->temp_buffer[1] == (uint8_t)0x5)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 8006288:	2b05      	cmp	r3, #5
 800628a:	d116      	bne.n	80062ba <vl53l5cx_check_data_ready+0x7e>
			&& ((p_dev->temp_buffer[2] & (uint8_t)0x5) == (uint8_t)0x5)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 3512 	ldrb.w	r3, [r3, #1298]	; 0x512
 8006292:	f003 0305 	and.w	r3, r3, #5
 8006296:	2b05      	cmp	r3, #5
 8006298:	d10f      	bne.n	80062ba <vl53l5cx_check_data_ready+0x7e>
			&& ((p_dev->temp_buffer[3] & (uint8_t)0x10) ==(uint8_t)0x10)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 3513 	ldrb.w	r3, [r3, #1299]	; 0x513
 80062a0:	f003 0310 	and.w	r3, r3, #16
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <vl53l5cx_check_data_ready+0x7e>
			)
	{
		*p_isReady = (uint8_t)1;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
		 p_dev->streamcount = p_dev->temp_buffer[0];
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	741a      	strb	r2, [r3, #16]
 80062b8:	e002      	b.n	80062c0 <vl53l5cx_check_data_ready+0x84>
	}
	else
	{
		*p_isReady = 0;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
	}

	return status;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <vl53l5cx_get_ranging_data>:

uint8_t vl53l5cx_get_ranging_data(
		VL53L5CX_Configuration		*p_dev,
		VL53L5CX_ResultsData		*p_results)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	74fb      	strb	r3, [r7, #19]
        union Block_header *bh_ptr;
	uint32_t i, j, msize;
	status |= RdMulti(&(p_dev->platform), 0x0,
 80062da:	6878      	ldr	r0, [r7, #4]
			p_dev->temp_buffer, p_dev->data_read_size);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
	status |= RdMulti(&(p_dev->platform), 0x0,
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	2100      	movs	r1, #0
 80062e8:	f000 ff00 	bl	80070ec <RdMulti>
 80062ec:	4603      	mov	r3, r0
 80062ee:	461a      	mov	r2, r3
 80062f0:	7cfb      	ldrb	r3, [r7, #19]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	74fb      	strb	r3, [r7, #19]
	SwapBuffer(p_dev->temp_buffer, (uint16_t)p_dev->data_read_size);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	695b      	ldr	r3, [r3, #20]
 8006300:	b29b      	uxth	r3, r3
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f000 ff08 	bl	800711a <SwapBuffer>

	/* Start conversion at position 16 to avoid headers */
	for (i = (uint32_t)16; i 
 800630a:	2310      	movs	r3, #16
 800630c:	61fb      	str	r3, [r7, #28]
 800630e:	e10b      	b.n	8006528 <vl53l5cx_get_ranging_data+0x25c>
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
	{
		bh_ptr = (union Block_header *)&(p_dev->temp_buffer[i]);
 8006310:	69fb      	ldr	r3, [r7, #28]
 8006312:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	4413      	add	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]
		if ((bh_ptr->type > (uint32_t)0x1) 
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006324:	b2db      	uxtb	r3, r3
 8006326:	2b01      	cmp	r3, #1
 8006328:	d915      	bls.n	8006356 <vl53l5cx_get_ranging_data+0x8a>
                    && (bh_ptr->type < (uint32_t)0xd))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b0c      	cmp	r3, #12
 8006336:	d80e      	bhi.n	8006356 <vl53l5cx_get_ranging_data+0x8a>
		{
			msize = bh_ptr->type * bh_ptr->size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006340:	b2db      	uxtb	r3, r3
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	881b      	ldrh	r3, [r3, #0]
 8006348:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800634c:	b29b      	uxth	r3, r3
 800634e:	fb03 f302 	mul.w	r3, r3, r2
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	e005      	b.n	8006362 <vl53l5cx_get_ranging_data+0x96>
		}
		else
		{
			msize = bh_ptr->size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	f3c3 130b 	ubfx	r3, r3, #4, #12
 800635e:	b29b      	uxth	r3, r3
 8006360:	617b      	str	r3, [r7, #20]
		}

		switch(bh_ptr->idx){
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	885b      	ldrh	r3, [r3, #2]
 8006366:	f64c 4250 	movw	r2, #52304	; 0xcc50
 800636a:	4293      	cmp	r3, r2
 800636c:	f000 80c6 	beq.w	80064fc <vl53l5cx_get_ranging_data+0x230>
 8006370:	f64c 4250 	movw	r2, #52304	; 0xcc50
 8006374:	4293      	cmp	r3, r2
 8006376:	f300 80cf 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 800637a:	f646 3290 	movw	r2, #27536	; 0x6b90
 800637e:	4293      	cmp	r3, r2
 8006380:	f000 80ae 	beq.w	80064e0 <vl53l5cx_get_ranging_data+0x214>
 8006384:	f646 3290 	movw	r2, #27536	; 0x6b90
 8006388:	4293      	cmp	r3, r2
 800638a:	f300 80c5 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 800638e:	f646 2290 	movw	r2, #27280	; 0x6a90
 8006392:	4293      	cmp	r3, r2
 8006394:	f000 8096 	beq.w	80064c4 <vl53l5cx_get_ranging_data+0x1f8>
 8006398:	f646 2290 	movw	r2, #27280	; 0x6a90
 800639c:	4293      	cmp	r3, r2
 800639e:	f300 80bb 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 80063a2:	f246 6290 	movw	r2, #26256	; 0x6690
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d07e      	beq.n	80064a8 <vl53l5cx_get_ranging_data+0x1dc>
 80063aa:	f246 6290 	movw	r2, #26256	; 0x6690
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f300 80b2 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 80063b4:	f246 4290 	movw	r2, #25744	; 0x6490
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d067      	beq.n	800648c <vl53l5cx_get_ranging_data+0x1c0>
 80063bc:	f246 4290 	movw	r2, #25744	; 0x6490
 80063c0:	4293      	cmp	r3, r2
 80063c2:	f300 80a9 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 80063c6:	f645 0290 	movw	r2, #22672	; 0x5890
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d050      	beq.n	8006470 <vl53l5cx_get_ranging_data+0x1a4>
 80063ce:	f645 0290 	movw	r2, #22672	; 0x5890
 80063d2:	4293      	cmp	r3, r2
 80063d4:	f300 80a0 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 80063d8:	f245 72d0 	movw	r2, #22480	; 0x57d0
 80063dc:	4293      	cmp	r3, r2
 80063de:	d039      	beq.n	8006454 <vl53l5cx_get_ranging_data+0x188>
 80063e0:	f245 72d0 	movw	r2, #22480	; 0x57d0
 80063e4:	4293      	cmp	r3, r2
 80063e6:	f300 8097 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 80063ea:	f245 52d0 	movw	r2, #21968	; 0x55d0
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d022      	beq.n	8006438 <vl53l5cx_get_ranging_data+0x16c>
 80063f2:	f245 52d0 	movw	r2, #21968	; 0x55d0
 80063f6:	4293      	cmp	r3, r2
 80063f8:	f300 808e 	bgt.w	8006518 <vl53l5cx_get_ranging_data+0x24c>
 80063fc:	f245 42b4 	movw	r2, #21684	; 0x54b4
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <vl53l5cx_get_ranging_data+0x142>
 8006404:	f245 42d0 	movw	r2, #21712	; 0x54d0
 8006408:	4293      	cmp	r3, r2
 800640a:	d009      	beq.n	8006420 <vl53l5cx_get_ranging_data+0x154>
				(void)memcpy(&p_results->motion_indicator,
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
				break;
#endif
			default:
				break;
 800640c:	e084      	b.n	8006518 <vl53l5cx_get_ranging_data+0x24c>
				p_dev->temp_buffer[i + (uint32_t)(4 + 7)];
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	330b      	adds	r3, #11
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	4413      	add	r3, r2
 8006416:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
				p_dev->streamcount =
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	741a      	strb	r2, [r3, #16]
				break;
 800641e:	e07c      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->ambient_per_spad,
 8006420:	6838      	ldr	r0, [r7, #0]
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	3304      	adds	r3, #4
 8006426:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	4413      	add	r3, r2
				(void)memcpy(p_results->ambient_per_spad,
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4619      	mov	r1, r3
 8006432:	f005 fad1 	bl	800b9d8 <memcpy>
				break;
 8006436:	e070      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->nb_spads_enabled,
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f503 70a0 	add.w	r0, r3, #320	; 0x140
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3304      	adds	r3, #4
 8006442:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_spads_enabled,
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4619      	mov	r1, r3
 800644e:	f005 fac3 	bl	800b9d8 <memcpy>
				break;
 8006452:	e062      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->nb_target_detected,
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	f503 7080 	add.w	r0, r3, #256	; 0x100
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3304      	adds	r3, #4
 800645e:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4413      	add	r3, r2
				(void)memcpy(p_results->nb_target_detected,
 8006466:	697a      	ldr	r2, [r7, #20]
 8006468:	4619      	mov	r1, r3
 800646a:	f005 fab5 	bl	800b9d8 <memcpy>
				break;
 800646e:	e054      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->signal_per_spad,
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	f503 7010 	add.w	r0, r3, #576	; 0x240
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3304      	adds	r3, #4
 800647a:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	4413      	add	r3, r2
				(void)memcpy(p_results->signal_per_spad,
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4619      	mov	r1, r3
 8006486:	f005 faa7 	bl	800b9d8 <memcpy>
				break;
 800648a:	e046      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->range_sigma_mm,
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f503 6088 	add.w	r0, r3, #1088	; 0x440
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	3304      	adds	r3, #4
 8006496:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4413      	add	r3, r2
				(void)memcpy(p_results->range_sigma_mm,
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4619      	mov	r1, r3
 80064a2:	f005 fa99 	bl	800b9d8 <memcpy>
				break;
 80064a6:	e038      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->distance_mm,
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	f503 60a8 	add.w	r0, r3, #1344	; 0x540
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	3304      	adds	r3, #4
 80064b2:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	4413      	add	r3, r2
				(void)memcpy(p_results->distance_mm,
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4619      	mov	r1, r3
 80064be:	f005 fa8b 	bl	800b9d8 <memcpy>
				break;
 80064c2:	e02a      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->reflectance,
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f503 60c8 	add.w	r0, r3, #1600	; 0x640
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3304      	adds	r3, #4
 80064ce:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	4413      	add	r3, r2
				(void)memcpy(p_results->reflectance,
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4619      	mov	r1, r3
 80064da:	f005 fa7d 	bl	800b9d8 <memcpy>
				break;
 80064de:	e01c      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(p_results->target_status,
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f503 60d8 	add.w	r0, r3, #1728	; 0x6c0
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	3304      	adds	r3, #4
 80064ea:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	4413      	add	r3, r2
				(void)memcpy(p_results->target_status,
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4619      	mov	r1, r3
 80064f6:	f005 fa6f 	bl	800b9d8 <memcpy>
				break;
 80064fa:	e00e      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				(void)memcpy(&p_results->motion_indicator,
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f503 60e8 	add.w	r0, r3, #1856	; 0x740
				&(p_dev->temp_buffer[i + (uint32_t)4]), msize);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	3304      	adds	r3, #4
 8006506:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4413      	add	r3, r2
				(void)memcpy(&p_results->motion_indicator,
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	4619      	mov	r1, r3
 8006512:	f005 fa61 	bl	800b9d8 <memcpy>
				break;
 8006516:	e000      	b.n	800651a <vl53l5cx_get_ranging_data+0x24e>
				break;
 8006518:	bf00      	nop
		}
		i += msize;
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	61fb      	str	r3, [r7, #28]
             < (uint32_t)p_dev->data_read_size; i+=(uint32_t)4)
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	3304      	adds	r3, #4
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
	for (i = (uint32_t)16; i 
 800652c:	69fa      	ldr	r2, [r7, #28]
 800652e:	429a      	cmp	r2, r3
 8006530:	f4ff aeee 	bcc.w	8006310 <vl53l5cx_get_ranging_data+0x44>
	}

	/* Convert data into their real format */
#ifndef VL53L5CX_DISABLE_AMBIENT_PER_SPAD
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8006534:	2300      	movs	r3, #0
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	e00b      	b.n	8006552 <vl53l5cx_get_ranging_data+0x286>
	{
		p_results->ambient_per_spad[i] /= (uint32_t)2048;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	69fa      	ldr	r2, [r7, #28]
 800653e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006542:	0ad9      	lsrs	r1, r3, #11
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	69fa      	ldr	r2, [r7, #28]
 8006548:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	3301      	adds	r3, #1
 8006550:	61fb      	str	r3, [r7, #28]
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b3f      	cmp	r3, #63	; 0x3f
 8006556:	d9f0      	bls.n	800653a <vl53l5cx_get_ranging_data+0x26e>
	}
#endif

	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 8006558:	2300      	movs	r3, #0
 800655a:	61fb      	str	r3, [r7, #28]
 800655c:	e03b      	b.n	80065d6 <vl53l5cx_get_ranging_data+0x30a>
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
	{
#ifndef VL53L5CX_DISABLE_DISTANCE_MM
		p_results->distance_mm[i] /= 4;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	f502 7228 	add.w	r2, r2, #672	; 0x2a0
 8006566:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800656a:	2b00      	cmp	r3, #0
 800656c:	da00      	bge.n	8006570 <vl53l5cx_get_ranging_data+0x2a4>
 800656e:	3303      	adds	r3, #3
 8006570:	109b      	asrs	r3, r3, #2
 8006572:	b219      	sxth	r1, r3
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	f502 7228 	add.w	r2, r2, #672	; 0x2a0
 800657c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		if(p_results->distance_mm[i] < 0)
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	f502 7228 	add.w	r2, r2, #672	; 0x2a0
 8006588:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800658c:	2b00      	cmp	r3, #0
 800658e:	da06      	bge.n	800659e <vl53l5cx_get_ranging_data+0x2d2>
		{
			p_results->distance_mm[i] = 0;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	69fa      	ldr	r2, [r7, #28]
 8006594:	f502 7228 	add.w	r2, r2, #672	; 0x2a0
 8006598:	2100      	movs	r1, #0
 800659a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		}
#endif
#ifndef VL53L5CX_DISABLE_RANGE_SIGMA_MM
		p_results->range_sigma_mm[i] /= (uint16_t)128;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	69fa      	ldr	r2, [r7, #28]
 80065a2:	f502 7208 	add.w	r2, r2, #544	; 0x220
 80065a6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80065aa:	09db      	lsrs	r3, r3, #7
 80065ac:	b299      	uxth	r1, r3
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	f502 7208 	add.w	r2, r2, #544	; 0x220
 80065b6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
#endif
#ifndef VL53L5CX_DISABLE_SIGNAL_PER_SPAD
		p_results->signal_per_spad[i] /= (uint32_t)2048;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	69fa      	ldr	r2, [r7, #28]
 80065be:	3290      	adds	r2, #144	; 0x90
 80065c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c4:	0ad9      	lsrs	r1, r3, #11
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	69fa      	ldr	r2, [r7, #28]
 80065ca:	3290      	adds	r2, #144	; 0x90
 80065cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			*VL53L5CX_NB_TARGET_PER_ZONE); i++)
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	3301      	adds	r3, #1
 80065d4:	61fb      	str	r3, [r7, #28]
	for(i = 0; i < (uint32_t)(VL53L5CX_RESOLUTION_8X8
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	2b7f      	cmp	r3, #127	; 0x7f
 80065da:	d9c0      	bls.n	800655e <vl53l5cx_get_ranging_data+0x292>
#endif
	}

	/* Set target status to 255 if no target is detected for this zone */
#ifndef VL53L5CX_DISABLE_NB_TARGET_DETECTED
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 80065dc:	2300      	movs	r3, #0
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e01c      	b.n	800661c <vl53l5cx_get_ranging_data+0x350>
	{
		if(p_results->nb_target_detected[i] == (uint8_t)0){
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d111      	bne.n	8006616 <vl53l5cx_get_ranging_data+0x34a>
			for(j = 0; j < (uint32_t)
 80065f2:	2300      	movs	r3, #0
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	e00b      	b.n	8006610 <vl53l5cx_get_ranging_data+0x344>
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
			{
#ifndef VL53L5CX_DISABLE_TARGET_STATUS
				p_results->target_status
				[((uint32_t)VL53L5CX_NB_TARGET_PER_ZONE
					*(uint32_t)i) + j]=(uint8_t)255;
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	005a      	lsls	r2, r3, #1
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	4413      	add	r3, r2
 8006600:	683a      	ldr	r2, [r7, #0]
 8006602:	4413      	add	r3, r2
 8006604:	22ff      	movs	r2, #255	; 0xff
 8006606:	f883 26c0 	strb.w	r2, [r3, #1728]	; 0x6c0
				VL53L5CX_NB_TARGET_PER_ZONE; j++)
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	3301      	adds	r3, #1
 800660e:	61bb      	str	r3, [r7, #24]
			for(j = 0; j < (uint32_t)
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d9f0      	bls.n	80065f8 <vl53l5cx_get_ranging_data+0x32c>
	for(i = 0; i < (uint32_t)VL53L5CX_RESOLUTION_8X8; i++)
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	3301      	adds	r3, #1
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b3f      	cmp	r3, #63	; 0x3f
 8006620:	d9df      	bls.n	80065e2 <vl53l5cx_get_ranging_data+0x316>
		}
	}
#endif

#ifndef VL53L5CX_DISABLE_MOTION_INDICATOR
	for(i = 0; i < (uint32_t)32; i++)
 8006622:	2300      	movs	r3, #0
 8006624:	61fb      	str	r3, [r7, #28]
 8006626:	e014      	b.n	8006652 <vl53l5cx_get_ranging_data+0x386>
	{
		p_results->motion_indicator.motion[i] /= (uint32_t)65535;
 8006628:	683a      	ldr	r2, [r7, #0]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f503 73e9 	add.w	r3, r3, #466	; 0x1d2
 8006630:	009b      	lsls	r3, r3, #2
 8006632:	4413      	add	r3, r2
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	4a0b      	ldr	r2, [pc, #44]	; (8006664 <vl53l5cx_get_ranging_data+0x398>)
 8006638:	fba2 2303 	umull	r2, r3, r2, r3
 800663c:	0bda      	lsrs	r2, r3, #15
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f503 73e9 	add.w	r3, r3, #466	; 0x1d2
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	440b      	add	r3, r1
 800664a:	605a      	str	r2, [r3, #4]
	for(i = 0; i < (uint32_t)32; i++)
 800664c:	69fb      	ldr	r3, [r7, #28]
 800664e:	3301      	adds	r3, #1
 8006650:	61fb      	str	r3, [r7, #28]
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	2b1f      	cmp	r3, #31
 8006656:	d9e7      	bls.n	8006628 <vl53l5cx_get_ranging_data+0x35c>
	}
#endif

	return status;
 8006658:	7cfb      	ldrb	r3, [r7, #19]
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	80008001 	.word	0x80008001

08006668 <vl53l5cx_get_resolution>:

uint8_t vl53l5cx_get_resolution(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*p_resolution)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800667c:	2308      	movs	r3, #8
 800667e:	f245 4250 	movw	r2, #21584	; 0x5450
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f9fc 	bl	8006a80 <vl53l5cx_dci_read_data>
 8006688:	4603      	mov	r3, r0
 800668a:	461a      	mov	r2, r3
 800668c:	7bfb      	ldrb	r3, [r7, #15]
 800668e:	4313      	orrs	r3, r2
 8006690:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_ZONE_CONFIG, 8);
	*p_resolution = p_dev->temp_buffer[0x00]*p_dev->temp_buffer[0x01];
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 2510 	ldrb.w	r2, [r3, #1296]	; 0x510
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3511 	ldrb.w	r3, [r3, #1297]	; 0x511
 800669e:	fb12 f303 	smulbb	r3, r2, r3
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	701a      	strb	r2, [r3, #0]

	return status;
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3710      	adds	r7, #16
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <vl53l5cx_set_resolution>:


uint8_t vl53l5cx_set_resolution(
		VL53L5CX_Configuration 		 *p_dev,
		uint8_t				resolution)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b084      	sub	sp, #16
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]

	switch(resolution){
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	2b10      	cmp	r3, #16
 80066c6:	d002      	beq.n	80066ce <vl53l5cx_set_resolution+0x1c>
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d055      	beq.n	8006778 <vl53l5cx_set_resolution+0xc6>
 80066cc:	e0a9      	b.n	8006822 <vl53l5cx_set_resolution+0x170>
		case VL53L5CX_RESOLUTION_4X4:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80066d4:	2310      	movs	r3, #16
 80066d6:	f64a 5238 	movw	r2, #44344	; 0xad38
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f000 f9d0 	bl	8006a80 <vl53l5cx_dci_read_data>
 80066e0:	4603      	mov	r3, r0
 80066e2:	461a      	mov	r2, r3
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 64;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2240      	movs	r2, #64	; 0x40
 80066ee:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 64;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2240      	movs	r2, #64	; 0x40
 80066f6:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 4;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2204      	movs	r2, #4
 80066fe:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8006708:	2310      	movs	r3, #16
 800670a:	f64a 5238 	movw	r2, #44344	; 0xad38
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa40 	bl	8006b94 <vl53l5cx_dci_write_data>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	7bfb      	ldrb	r3, [r7, #15]
 800671a:	4313      	orrs	r3, r2
 800671c:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 8006724:	2308      	movs	r3, #8
 8006726:	f245 4250 	movw	r2, #21584	; 0x5450
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 f9a8 	bl	8006a80 <vl53l5cx_dci_read_data>
 8006730:	4603      	mov	r3, r0
 8006732:	461a      	mov	r2, r3
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	4313      	orrs	r3, r2
 8006738:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 4;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2204      	movs	r2, #4
 800673e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 4;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2204      	movs	r2, #4
 8006746:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 8;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2208      	movs	r2, #8
 800674e:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 8;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2208      	movs	r2, #8
 8006756:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 8006760:	2308      	movs	r3, #8
 8006762:	f245 4250 	movw	r2, #21584	; 0x5450
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fa14 	bl	8006b94 <vl53l5cx_dci_write_data>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	4313      	orrs	r3, r2
 8006774:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			break;
 8006776:	e057      	b.n	8006828 <vl53l5cx_set_resolution+0x176>

		case VL53L5CX_RESOLUTION_8X8:
			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 800677e:	2310      	movs	r3, #16
 8006780:	f64a 5238 	movw	r2, #44344	; 0xad38
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 f97b 	bl	8006a80 <vl53l5cx_dci_read_data>
 800678a:	4603      	mov	r3, r0
 800678c:	461a      	mov	r2, r3
 800678e:	7bfb      	ldrb	r3, [r7, #15]
 8006790:	4313      	orrs	r3, r2
 8006792:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);
			p_dev->temp_buffer[0x04] = 16;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2210      	movs	r2, #16
 8006798:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x06] = 16;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2210      	movs	r2, #16
 80067a0:	f883 2516 	strb.w	r2, [r3, #1302]	; 0x516
			p_dev->temp_buffer[0x09] = 1;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2519 	strb.w	r2, [r3, #1305]	; 0x519
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 80067b2:	2310      	movs	r3, #16
 80067b4:	f64a 5238 	movw	r2, #44344	; 0xad38
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 f9eb 	bl	8006b94 <vl53l5cx_dci_write_data>
 80067be:	4603      	mov	r3, r0
 80067c0:	461a      	mov	r2, r3
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	4313      	orrs	r3, r2
 80067c6:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_DSS_CONFIG, 16);

			status |= vl53l5cx_dci_read_data(p_dev,
					p_dev->temp_buffer,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_read_data(p_dev,
 80067ce:	2308      	movs	r3, #8
 80067d0:	f245 4250 	movw	r2, #21584	; 0x5450
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f000 f953 	bl	8006a80 <vl53l5cx_dci_read_data>
 80067da:	4603      	mov	r3, r0
 80067dc:	461a      	mov	r2, r3
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);
			p_dev->temp_buffer[0x00] = 8;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2208      	movs	r2, #8
 80067e8:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
			p_dev->temp_buffer[0x01] = 8;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2208      	movs	r2, #8
 80067f0:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x04] = 4;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2204      	movs	r2, #4
 80067f8:	f883 2514 	strb.w	r2, [r3, #1300]	; 0x514
			p_dev->temp_buffer[0x05] = 4;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2204      	movs	r2, #4
 8006800:	f883 2515 	strb.w	r2, [r3, #1301]	; 0x515
			status |= vl53l5cx_dci_write_data(p_dev,
					p_dev->temp_buffer,
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
			status |= vl53l5cx_dci_write_data(p_dev,
 800680a:	2308      	movs	r3, #8
 800680c:	f245 4250 	movw	r2, #21584	; 0x5450
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f9bf 	bl	8006b94 <vl53l5cx_dci_write_data>
 8006816:	4603      	mov	r3, r0
 8006818:	461a      	mov	r2, r3
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	4313      	orrs	r3, r2
 800681e:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_ZONE_CONFIG, 8);

			break;
 8006820:	e002      	b.n	8006828 <vl53l5cx_set_resolution+0x176>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8006822:	237f      	movs	r3, #127	; 0x7f
 8006824:	73fb      	strb	r3, [r7, #15]
			break;
 8006826:	bf00      	nop
		}

	status |= _vl53l5cx_send_offset_data(p_dev, resolution);
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	4619      	mov	r1, r3
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f7fe fb81 	bl	8004f34 <_vl53l5cx_send_offset_data>
 8006832:	4603      	mov	r3, r0
 8006834:	461a      	mov	r2, r3
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	4313      	orrs	r3, r2
 800683a:	73fb      	strb	r3, [r7, #15]
	status |= _vl53l5cx_send_xtalk_data(p_dev, resolution);
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	4619      	mov	r1, r3
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7fe fcdf 	bl	8005204 <_vl53l5cx_send_xtalk_data>
 8006846:	4603      	mov	r3, r0
 8006848:	461a      	mov	r2, r3
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	4313      	orrs	r3, r2
 800684e:	73fb      	strb	r3, [r7, #15]

	return status;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <vl53l5cx_set_ranging_frequency_hz>:
}

uint8_t vl53l5cx_set_ranging_frequency_hz(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				frequency_hz)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b088      	sub	sp, #32
 800685e:	af04      	add	r7, sp, #16
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]

	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8006870:	2301      	movs	r3, #1
 8006872:	9302      	str	r3, [sp, #8]
 8006874:	2301      	movs	r3, #1
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	1cfb      	adds	r3, r7, #3
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	2304      	movs	r3, #4
 800687e:	f245 4258 	movw	r2, #21592	; 0x5458
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fa25 	bl	8006cd2 <vl53l5cx_dci_replace_data>
 8006888:	4603      	mov	r3, r0
 800688a:	461a      	mov	r2, r3
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	4313      	orrs	r3, r2
 8006890:	73fb      	strb	r3, [r7, #15]
					VL53L5CX_DCI_FREQ_HZ, 4,
					(uint8_t*)&frequency_hz, 1, 0x01);

	return status;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <vl53l5cx_set_integration_time_ms>:
}

uint8_t vl53l5cx_set_integration_time_ms(
		VL53L5CX_Configuration		*p_dev,
		uint32_t			integration_time_ms)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af04      	add	r7, sp, #16
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
	uint8_t status = VL53L5CX_STATUS_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
        uint32_t integration = integration_time_ms;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	60bb      	str	r3, [r7, #8]

	/* Integration time must be between 2ms and 1000ms */
	if((integration < (uint32_t)2)
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d903      	bls.n	80068bc <vl53l5cx_set_integration_time_ms+0x20>
           || (integration > (uint32_t)1000))
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ba:	d904      	bls.n	80068c6 <vl53l5cx_set_integration_time_ms+0x2a>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 80068bc:	7bfb      	ldrb	r3, [r7, #15]
 80068be:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80068c2:	73fb      	strb	r3, [r7, #15]
 80068c4:	e01a      	b.n	80068fc <vl53l5cx_set_integration_time_ms+0x60>
	}else
	{
		integration *= (uint32_t)1000;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80068cc:	fb02 f303 	mul.w	r3, r2, r3
 80068d0:	60bb      	str	r3, [r7, #8]

		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80068d8:	2300      	movs	r3, #0
 80068da:	9302      	str	r3, [sp, #8]
 80068dc:	2304      	movs	r3, #4
 80068de:	9301      	str	r3, [sp, #4]
 80068e0:	f107 0308 	add.w	r3, r7, #8
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2314      	movs	r3, #20
 80068e8:	f245 425c 	movw	r2, #21596	; 0x545c
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f9f0 	bl	8006cd2 <vl53l5cx_dci_replace_data>
 80068f2:	4603      	mov	r3, r0
 80068f4:	461a      	mov	r2, r3
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_INT_TIME, 20,
				(uint8_t*)&integration, 4, 0x00);
	}

	return status;
 80068fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
	...

08006908 <vl53l5cx_set_sharpener_percent>:
}

uint8_t vl53l5cx_set_sharpener_percent(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				sharpener_percent)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b088      	sub	sp, #32
 800690c:	af04      	add	r7, sp, #16
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
        uint8_t sharpener;

	if(sharpener_percent >= (uint8_t)100)
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	2b63      	cmp	r3, #99	; 0x63
 800691c:	d904      	bls.n	8006928 <vl53l5cx_set_sharpener_percent+0x20>
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 8006924:	73fb      	strb	r3, [r7, #15]
 8006926:	e020      	b.n	800696a <vl53l5cx_set_sharpener_percent+0x62>
	}
	else
	{
		sharpener = (sharpener_percent*(uint8_t)255)/(uint8_t)100;
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	4613      	mov	r3, r2
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	1a9b      	subs	r3, r3, r2
 8006930:	4a10      	ldr	r2, [pc, #64]	; (8006974 <vl53l5cx_set_sharpener_percent+0x6c>)
 8006932:	fb82 1203 	smull	r1, r2, r2, r3
 8006936:	1152      	asrs	r2, r2, #5
 8006938:	17db      	asrs	r3, r3, #31
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	73bb      	strb	r3, [r7, #14]
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8006946:	230d      	movs	r3, #13
 8006948:	9302      	str	r3, [sp, #8]
 800694a:	2301      	movs	r3, #1
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	f107 030e 	add.w	r3, r7, #14
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	2310      	movs	r3, #16
 8006956:	f64a 62d8 	movw	r2, #44760	; 0xaed8
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f9b9 	bl	8006cd2 <vl53l5cx_dci_replace_data>
 8006960:	4603      	mov	r3, r0
 8006962:	461a      	mov	r2, r3
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	4313      	orrs	r3, r2
 8006968:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_SHARPENER, 16,
                                (uint8_t*)&sharpener, 1, 0xD);
	}

	return status;
 800696a:	7bfb      	ldrb	r3, [r7, #15]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	51eb851f 	.word	0x51eb851f

08006978 <vl53l5cx_set_target_order>:
}

uint8_t vl53l5cx_set_target_order(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				target_order)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af04      	add	r7, sp, #16
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]

	if((target_order == (uint8_t)VL53L5CX_TARGET_ORDER_CLOSEST)
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d002      	beq.n	8006994 <vl53l5cx_set_target_order+0x1c>
		|| (target_order == (uint8_t)VL53L5CX_TARGET_ORDER_STRONGEST))
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	2b02      	cmp	r3, #2
 8006992:	d114      	bne.n	80069be <vl53l5cx_set_target_order+0x46>
	{
		status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 800699a:	2300      	movs	r3, #0
 800699c:	9302      	str	r3, [sp, #8]
 800699e:	2301      	movs	r3, #1
 80069a0:	9301      	str	r3, [sp, #4]
 80069a2:	1cfb      	adds	r3, r7, #3
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	2304      	movs	r3, #4
 80069a8:	f64a 6264 	movw	r2, #44644	; 0xae64
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f990 	bl	8006cd2 <vl53l5cx_dci_replace_data>
 80069b2:	4603      	mov	r3, r0
 80069b4:	461a      	mov	r2, r3
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	73fb      	strb	r3, [r7, #15]
				VL53L5CX_DCI_TARGET_ORDER, 4,
                                (uint8_t*)&target_order, 1, 0x0);
 80069bc:	e003      	b.n	80069c6 <vl53l5cx_set_target_order+0x4e>
	}else
	{
		status |= VL53L5CX_STATUS_INVALID_PARAM;
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 80069c4:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 80069c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <vl53l5cx_set_ranging_mode>:
}

uint8_t vl53l5cx_set_ranging_mode(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				ranging_mode)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	70fb      	strb	r3, [r7, #3]
	uint8_t status = VL53L5CX_STATUS_OK;
 80069dc:	2300      	movs	r3, #0
 80069de:	73fb      	strb	r3, [r7, #15]
	uint32_t single_range = 0x00;
 80069e0:	2300      	movs	r3, #0
 80069e2:	60bb      	str	r3, [r7, #8]

	status |= vl53l5cx_dci_read_data(p_dev, p_dev->temp_buffer,
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 80069ea:	2308      	movs	r3, #8
 80069ec:	f64a 5230 	movw	r2, #44336	; 0xad30
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 f845 	bl	8006a80 <vl53l5cx_dci_read_data>
 80069f6:	4603      	mov	r3, r0
 80069f8:	461a      	mov	r2, r3
 80069fa:	7bfb      	ldrb	r3, [r7, #15]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, 8);

	switch(ranging_mode)
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d002      	beq.n	8006a0c <vl53l5cx_set_ranging_mode+0x3c>
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d00b      	beq.n	8006a22 <vl53l5cx_set_ranging_mode+0x52>
 8006a0a:	e015      	b.n	8006a38 <vl53l5cx_set_ranging_mode+0x68>
	{
		case VL53L5CX_RANGING_MODE_CONTINUOUS:
			p_dev->temp_buffer[0x01] = 0x1;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x3;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2203      	movs	r2, #3
 8006a18:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x00;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	60bb      	str	r3, [r7, #8]
			break;
 8006a20:	e00d      	b.n	8006a3e <vl53l5cx_set_ranging_mode+0x6e>

		case VL53L5CX_RANGING_MODE_AUTONOMOUS:
			p_dev->temp_buffer[0x01] = 0x3;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2203      	movs	r2, #3
 8006a26:	f883 2511 	strb.w	r2, [r3, #1297]	; 0x511
			p_dev->temp_buffer[0x03] = 0x2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	f883 2513 	strb.w	r2, [r3, #1299]	; 0x513
			single_range = 0x01;
 8006a32:	2301      	movs	r3, #1
 8006a34:	60bb      	str	r3, [r7, #8]
			break;
 8006a36:	e002      	b.n	8006a3e <vl53l5cx_set_ranging_mode+0x6e>

		default:
			status = VL53L5CX_STATUS_INVALID_PARAM;
 8006a38:	237f      	movs	r3, #127	; 0x7f
 8006a3a:	73fb      	strb	r3, [r7, #15]
			break;
 8006a3c:	bf00      	nop
	}

	status |= vl53l5cx_dci_write_data(p_dev, p_dev->temp_buffer,
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8006a44:	2308      	movs	r3, #8
 8006a46:	f64a 5230 	movw	r2, #44336	; 0xad30
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f8a2 	bl	8006b94 <vl53l5cx_dci_write_data>
 8006a50:	4603      	mov	r3, r0
 8006a52:	461a      	mov	r2, r3
 8006a54:	7bfb      	ldrb	r3, [r7, #15]
 8006a56:	4313      	orrs	r3, r2
 8006a58:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_RANGING_MODE, (uint16_t)8);

	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)&single_range,
 8006a5a:	f107 0108 	add.w	r1, r7, #8
 8006a5e:	2304      	movs	r3, #4
 8006a60:	f64c 525c 	movw	r2, #52572	; 0xcd5c
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f895 	bl	8006b94 <vl53l5cx_dci_write_data>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	7bfb      	ldrb	r3, [r7, #15]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_SINGLE_RANGE, 
                        (uint16_t)sizeof(single_range));

	return status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <vl53l5cx_dci_read_data>:
uint8_t vl53l5cx_dci_read_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b08c      	sub	sp, #48	; 0x30
 8006a84:	af02      	add	r7, sp, #8
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	807b      	strh	r3, [r7, #2]
	int16_t i;
	uint8_t status = VL53L5CX_STATUS_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        uint32_t rd_size = (uint32_t) data_size + (uint32_t)12;
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	330c      	adds	r3, #12
 8006a98:	623b      	str	r3, [r7, #32]
	uint8_t cmd[] = {0x00, 0x00, 0x00, 0x00,
 8006a9a:	4a3d      	ldr	r2, [pc, #244]	; (8006b90 <vl53l5cx_dci_read_data+0x110>)
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8006aa2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			0x00, 0x00, 0x00, 0x0f,
			0x00, 0x02, 0x00, 0x08};

	/* Check if tmp buffer is large enough */
	if((data_size + (uint16_t)12)>(uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
 8006aa6:	887b      	ldrh	r3, [r7, #2]
 8006aa8:	f640 0214 	movw	r2, #2068	; 0x814
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d903      	bls.n	8006ab8 <vl53l5cx_dci_read_data+0x38>
	{
		status |= VL53L5CX_STATUS_ERROR;
 8006ab0:	23ff      	movs	r3, #255	; 0xff
 8006ab2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006ab6:	e065      	b.n	8006b84 <vl53l5cx_dci_read_data+0x104>
	}
	else
	{
		cmd[0] = (uint8_t)(index >> 8);	
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	0a1b      	lsrs	r3, r3, #8
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	753b      	strb	r3, [r7, #20]
		cmd[1] = (uint8_t)(index & (uint32_t)0xff);			
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	757b      	strb	r3, [r7, #21]
		cmd[2] = (uint8_t)((data_size & (uint16_t)0xff0) >> 4);
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	111b      	asrs	r3, r3, #4
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	75bb      	strb	r3, [r7, #22]
		cmd[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8006ace:	887b      	ldrh	r3, [r7, #2]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	011b      	lsls	r3, r3, #4
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	75fb      	strb	r3, [r7, #23]

	/* Request data reading from FW */
		status |= WrMulti(&(p_dev->platform),
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f107 0214 	add.w	r2, r7, #20
 8006ade:	230c      	movs	r3, #12
 8006ae0:	f642 71f4 	movw	r1, #12276	; 0x2ff4
 8006ae4:	f000 faeb 	bl	80070be <WrMulti>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	461a      	mov	r2, r3
 8006aec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006af0:	4313      	orrs	r3, r2
 8006af2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			(VL53L5CX_UI_CMD_END-(uint16_t)11),cmd, sizeof(cmd));
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006af6:	2303      	movs	r3, #3
 8006af8:	9301      	str	r3, [sp, #4]
 8006afa:	23ff      	movs	r3, #255	; 0xff
 8006afc:	9300      	str	r3, [sp, #0]
 8006afe:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006b02:	2201      	movs	r2, #1
 8006b04:	2104      	movs	r1, #4
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7fe f9c2 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006b14:	4313      	orrs	r3, r2
 8006b16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			VL53L5CX_UI_CMD_STATUS,
			0xff, 0x03);

	/* Read new data sent (4 bytes header + data_size + 8 bytes footer) */
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8006b1a:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer, rd_size);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
		status |= RdMulti(&(p_dev->platform), VL53L5CX_UI_CMD_START,
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f642 4104 	movw	r1, #11268	; 0x2c04
 8006b28:	f000 fae0 	bl	80070ec <RdMulti>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006b34:	4313      	orrs	r3, r2
 8006b36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		SwapBuffer(p_dev->temp_buffer, data_size + (uint16_t)12);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
 8006b40:	887b      	ldrh	r3, [r7, #2]
 8006b42:	330c      	adds	r3, #12
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	4619      	mov	r1, r3
 8006b48:	4610      	mov	r0, r2
 8006b4a:	f000 fae6 	bl	800711a <SwapBuffer>

	/* Copy data from FW into input structure (-4 bytes to remove header) */
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006b4e:	2300      	movs	r3, #0
 8006b50:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b52:	e011      	b.n	8006b78 <vl53l5cx_dci_read_data+0xf8>
			data[i] = p_dev->temp_buffer[i + 4];
 8006b54:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006b58:	1d1a      	adds	r2, r3, #4
 8006b5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	440b      	add	r3, r1
 8006b62:	68f9      	ldr	r1, [r7, #12]
 8006b64:	440a      	add	r2, r1
 8006b66:	f892 2510 	ldrb.w	r2, [r2, #1296]	; 0x510
 8006b6a:	701a      	strb	r2, [r3, #0]
		for(i = 0 ; i < (int16_t)data_size;i++){
 8006b6c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3301      	adds	r3, #1
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006b78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b7c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006b80:	429a      	cmp	r2, r3
 8006b82:	dbe7      	blt.n	8006b54 <vl53l5cx_dci_read_data+0xd4>
		}
	}

	return status;
 8006b84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3728      	adds	r7, #40	; 0x28
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	0800c0bc 	.word	0x0800c0bc

08006b94 <vl53l5cx_dci_write_data>:
uint8_t vl53l5cx_dci_write_data(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				*data,
		uint32_t			index,
		uint16_t			data_size)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	; 0x30
 8006b98:	af02      	add	r7, sp, #8
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	607a      	str	r2, [r7, #4]
 8006ba0:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	int16_t i;

	uint8_t headers[] = {0x00, 0x00, 0x00, 0x00};
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006bac:	2300      	movs	r3, #0
 8006bae:	753b      	strb	r3, [r7, #20]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	757b      	strb	r3, [r7, #21]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	75bb      	strb	r3, [r7, #22]
 8006bb8:	230f      	movs	r3, #15
 8006bba:	75fb      	strb	r3, [r7, #23]
 8006bbc:	2305      	movs	r3, #5
 8006bbe:	763b      	strb	r3, [r7, #24]
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	767b      	strb	r3, [r7, #25]
			(uint8_t)((data_size + (uint16_t)8) >> 8), 
 8006bc4:	887b      	ldrh	r3, [r7, #2]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	121b      	asrs	r3, r3, #8
 8006bca:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006bcc:	76bb      	strb	r3, [r7, #26]
			(uint8_t)((data_size + (uint16_t)8) & (uint8_t)0xFF)};
 8006bce:	887b      	ldrh	r3, [r7, #2]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	3308      	adds	r3, #8
 8006bd4:	b2db      	uxtb	r3, r3
	uint8_t footer[] = {0x00, 0x00, 0x00, 0x0f, 0x05, 0x01,
 8006bd6:	76fb      	strb	r3, [r7, #27]

	uint16_t address = (uint16_t)VL53L5CX_UI_CMD_END - 
 8006bd8:	887b      	ldrh	r3, [r7, #2]
 8006bda:	f5c3 533f 	rsb	r3, r3, #12224	; 0x2fc0
 8006bde:	3334      	adds	r3, #52	; 0x34
 8006be0:	847b      	strh	r3, [r7, #34]	; 0x22
		(data_size + (uint16_t)12) + (uint16_t)1;

	/* Check if cmd buffer is large enough */
	if((data_size + (uint16_t)12) 
 8006be2:	887b      	ldrh	r3, [r7, #2]
 8006be4:	f640 0214 	movw	r2, #2068	; 0x814
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d903      	bls.n	8006bf4 <vl53l5cx_dci_write_data+0x60>
           > (uint16_t)VL53L5CX_TEMPORARY_BUFFER_SIZE)
	{
		status |= VL53L5CX_STATUS_ERROR;
 8006bec:	23ff      	movs	r3, #255	; 0xff
 8006bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006bf2:	e068      	b.n	8006cc6 <vl53l5cx_dci_write_data+0x132>
	}
	else
	{
		headers[0] = (uint8_t)(index >> 8);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	773b      	strb	r3, [r7, #28]
		headers[1] = (uint8_t)(index & (uint32_t)0xff);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	777b      	strb	r3, [r7, #29]
		headers[2] = (uint8_t)(((data_size & (uint16_t)0xff0) >> 4));
 8006c02:	887b      	ldrh	r3, [r7, #2]
 8006c04:	111b      	asrs	r3, r3, #4
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	77bb      	strb	r3, [r7, #30]
		headers[3] = (uint8_t)((data_size & (uint16_t)0xf) << 4);
 8006c0a:	887b      	ldrh	r3, [r7, #2]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	77fb      	strb	r3, [r7, #31]

	/* Copy data from structure to FW format (+4 bytes to add header) */
		SwapBuffer(data, data_size);
 8006c14:	887b      	ldrh	r3, [r7, #2]
 8006c16:	4619      	mov	r1, r3
 8006c18:	68b8      	ldr	r0, [r7, #8]
 8006c1a:	f000 fa7e 	bl	800711a <SwapBuffer>
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006c1e:	887b      	ldrh	r3, [r7, #2]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c26:	e012      	b.n	8006c4e <vl53l5cx_dci_write_data+0xba>
		{
			p_dev->temp_buffer[i + 4] = data[i];
 8006c28:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	441a      	add	r2, r3
 8006c30:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006c34:	3304      	adds	r3, #4
 8006c36:	7811      	ldrb	r1, [r2, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	460a      	mov	r2, r1
 8006c3e:	f883 2510 	strb.w	r2, [r3, #1296]	; 0x510
		for(i = (int16_t)data_size - (int16_t)1 ; i >= 0; i--)
 8006c42:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c4e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	dae8      	bge.n	8006c28 <vl53l5cx_dci_write_data+0x94>
		}

	/* Add headers and footer */
		(void)memcpy(&p_dev->temp_buffer[0], headers, sizeof(headers));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8006c5c:	69fa      	ldr	r2, [r7, #28]
 8006c5e:	601a      	str	r2, [r3, #0]
		(void)memcpy(&p_dev->temp_buffer[data_size + (uint16_t)4],
 8006c60:	887b      	ldrh	r3, [r7, #2]
 8006c62:	3304      	adds	r3, #4
 8006c64:	f503 63a2 	add.w	r3, r3, #1296	; 0x510
 8006c68:	68fa      	ldr	r2, [r7, #12]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	f107 0314 	add.w	r3, r7, #20
 8006c72:	cb03      	ldmia	r3!, {r0, r1}
 8006c74:	6010      	str	r0, [r2, #0]
 8006c76:	6051      	str	r1, [r2, #4]
			footer, sizeof(footer));

	/* Send data to FW */
		status |= WrMulti(&(p_dev->platform),address,
 8006c78:	68f8      	ldr	r0, [r7, #12]
			p_dev->temp_buffer,
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	f503 62a2 	add.w	r2, r3, #1296	; 0x510
			(uint32_t)((uint32_t)data_size + (uint32_t)12));
 8006c80:	887b      	ldrh	r3, [r7, #2]
		status |= WrMulti(&(p_dev->platform),address,
 8006c82:	330c      	adds	r3, #12
 8006c84:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8006c86:	f000 fa1a 	bl	80070be <WrMulti>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c92:	4313      	orrs	r3, r2
 8006c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		status |= _vl53l5cx_poll_for_answer(p_dev, 4, 1,
 8006c98:	2303      	movs	r3, #3
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	23ff      	movs	r3, #255	; 0xff
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f7fe f8f1 	bl	8004e90 <_vl53l5cx_poll_for_answer>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L5CX_UI_CMD_STATUS, 0xff, 0x03);

		SwapBuffer(data, data_size);
 8006cbc:	887b      	ldrh	r3, [r7, #2]
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	68b8      	ldr	r0, [r7, #8]
 8006cc2:	f000 fa2a 	bl	800711a <SwapBuffer>
	}

	return status;
 8006cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3728      	adds	r7, #40	; 0x28
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}

08006cd2 <vl53l5cx_dci_replace_data>:
		uint32_t			index,
		uint16_t			data_size,
		uint8_t				*new_data,
		uint16_t			new_data_size,
		uint16_t			new_data_pos)
{
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b086      	sub	sp, #24
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	60f8      	str	r0, [r7, #12]
 8006cda:	60b9      	str	r1, [r7, #8]
 8006cdc:	607a      	str	r2, [r7, #4]
 8006cde:	807b      	strh	r3, [r7, #2]
	uint8_t status = VL53L5CX_STATUS_OK;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	75fb      	strb	r3, [r7, #23]

	status |= vl53l5cx_dci_read_data(p_dev, data, index, data_size);
 8006ce4:	887b      	ldrh	r3, [r7, #2]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f7ff fec8 	bl	8006a80 <vl53l5cx_dci_read_data>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	7dfb      	ldrb	r3, [r7, #23]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	75fb      	strb	r3, [r7, #23]
	(void)memcpy(&(data[new_data_pos]), new_data, new_data_size);
 8006cfa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cfc:	68ba      	ldr	r2, [r7, #8]
 8006cfe:	4413      	add	r3, r2
 8006d00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d02:	6a39      	ldr	r1, [r7, #32]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f004 fe67 	bl	800b9d8 <memcpy>
	status |= vl53l5cx_dci_write_data(p_dev, data, index, data_size);
 8006d0a:	887b      	ldrh	r3, [r7, #2]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	68b9      	ldr	r1, [r7, #8]
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff ff3f 	bl	8006b94 <vl53l5cx_dci_write_data>
 8006d16:	4603      	mov	r3, r0
 8006d18:	461a      	mov	r2, r3
 8006d1a:	7dfb      	ldrb	r3, [r7, #23]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	75fb      	strb	r3, [r7, #23]

	return status;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <vl53l5cx_set_detection_thresholds_enable>:
}

uint8_t vl53l5cx_set_detection_thresholds_enable(
		VL53L5CX_Configuration		*p_dev,
		uint8_t				enabled)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b088      	sub	sp, #32
 8006d2e:	af04      	add	r7, sp, #16
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	460b      	mov	r3, r1
 8006d34:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp, status = VL53L5CX_STATUS_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
	uint8_t grp_global_config[] = {0x01, 0x00, 0x01, 0x00};
 8006d3a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006d3e:	60bb      	str	r3, [r7, #8]

	if(enabled == (uint8_t)1)
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d104      	bne.n	8006d50 <vl53l5cx_set_detection_thresholds_enable+0x26>
	{
		grp_global_config[0x01] = 0x01;
 8006d46:	2301      	movs	r3, #1
 8006d48:	727b      	strb	r3, [r7, #9]
		tmp = 0x04;
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	73bb      	strb	r3, [r7, #14]
 8006d4e:	e003      	b.n	8006d58 <vl53l5cx_set_detection_thresholds_enable+0x2e>
	}
	else
	{
		grp_global_config[0x01] = 0x00;
 8006d50:	2300      	movs	r3, #0
 8006d52:	727b      	strb	r3, [r7, #9]
		tmp = 0x0C;
 8006d54:	230c      	movs	r3, #12
 8006d56:	73bb      	strb	r3, [r7, #14]
	}

	/* Set global interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9302      	str	r3, [sp, #8]
 8006d62:	2304      	movs	r3, #4
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	f107 0308 	add.w	r3, r7, #8
 8006d6a:	9300      	str	r3, [sp, #0]
 8006d6c:	2308      	movs	r3, #8
 8006d6e:	f24b 62e0 	movw	r2, #46816	; 0xb6e0
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f7ff ffad 	bl	8006cd2 <vl53l5cx_dci_replace_data>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_GLOBAL_CONFIG, 8,
			(uint8_t*)&grp_global_config, 4, 0x00);

	/* Update interrupt config */
	status |= vl53l5cx_dci_replace_data(p_dev, p_dev->temp_buffer,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f503 61a2 	add.w	r1, r3, #1296	; 0x510
 8006d88:	2311      	movs	r3, #17
 8006d8a:	9302      	str	r3, [sp, #8]
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	9301      	str	r3, [sp, #4]
 8006d90:	f107 030e 	add.w	r3, r7, #14
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	2314      	movs	r3, #20
 8006d98:	f245 4288 	movw	r2, #21640	; 0x5488
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f7ff ff98 	bl	8006cd2 <vl53l5cx_dci_replace_data>
 8006da2:	4603      	mov	r3, r0
 8006da4:	461a      	mov	r2, r3
 8006da6:	7bfb      	ldrb	r3, [r7, #15]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	73fb      	strb	r3, [r7, #15]
			VL53L5CX_DCI_DET_THRESH_CONFIG, 20,
			(uint8_t*)&tmp, 1, 0x11);

	return status;
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
	...

08006db8 <vl53l5cx_set_detection_thresholds>:
}

uint8_t vl53l5cx_set_detection_thresholds(
		VL53L5CX_Configuration			*p_dev,
		VL53L5CX_DetectionThresholds	*p_thresholds)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b086      	sub	sp, #24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
	uint8_t i, status = VL53L5CX_STATUS_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75bb      	strb	r3, [r7, #22]
	uint8_t grp_valid_target_cfg[] = {0x05, 0x05, 0x05, 0x05,
 8006dc6:	4aa7      	ldr	r2, [pc, #668]	; (8007064 <vl53l5cx_set_detection_thresholds+0x2ac>)
 8006dc8:	f107 030c 	add.w	r3, r7, #12
 8006dcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006dd0:	e883 0003 	stmia.w	r3, {r0, r1}
					0x05, 0x05, 0x05, 0x05};

	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	75fb      	strb	r3, [r7, #23]
 8006dd8:	e120      	b.n	800701c <vl53l5cx_set_detection_thresholds+0x264>
	{
		switch(p_thresholds->measurement)
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	7a1b      	ldrb	r3, [r3, #8]
 8006dde:	3b01      	subs	r3, #1
 8006de0:	2b12      	cmp	r3, #18
 8006de2:	f200 8117 	bhi.w	8007014 <vl53l5cx_set_detection_thresholds+0x25c>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <vl53l5cx_set_detection_thresholds+0x34>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e39 	.word	0x08006e39
 8006df0:	08006e87 	.word	0x08006e87
 8006df4:	08007015 	.word	0x08007015
 8006df8:	08006ed5 	.word	0x08006ed5
 8006dfc:	08007015 	.word	0x08007015
 8006e00:	08007015 	.word	0x08007015
 8006e04:	08007015 	.word	0x08007015
 8006e08:	08006f23 	.word	0x08006f23
 8006e0c:	08007015 	.word	0x08007015
 8006e10:	08007015 	.word	0x08007015
 8006e14:	08007015 	.word	0x08007015
 8006e18:	08007015 	.word	0x08007015
 8006e1c:	08006f71 	.word	0x08006f71
 8006e20:	08007015 	.word	0x08007015
 8006e24:	08007015 	.word	0x08007015
 8006e28:	08007015 	.word	0x08007015
 8006e2c:	08007015 	.word	0x08007015
 8006e30:	08007015 	.word	0x08007015
 8006e34:	08006fbf 	.word	0x08006fbf
		{
			case VL53L5CX_DISTANCE_MM:
				p_thresholds[i].param_low_thresh  *= 4;
 8006e38:	7dfa      	ldrb	r2, [r7, #23]
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	461a      	mov	r2, r3
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	4413      	add	r3, r2
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	7dfa      	ldrb	r2, [r7, #23]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	4413      	add	r3, r2
 8006e52:	009b      	lsls	r3, r3, #2
 8006e54:	461a      	mov	r2, r3
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	4413      	add	r3, r2
 8006e5a:	008a      	lsls	r2, r1, #2
 8006e5c:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 4;
 8006e5e:	7dfa      	ldrb	r2, [r7, #23]
 8006e60:	4613      	mov	r3, r2
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	461a      	mov	r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	6859      	ldr	r1, [r3, #4]
 8006e70:	7dfa      	ldrb	r2, [r7, #23]
 8006e72:	4613      	mov	r3, r2
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	4413      	add	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	4413      	add	r3, r2
 8006e80:	008a      	lsls	r2, r1, #2
 8006e82:	605a      	str	r2, [r3, #4]
				break;
 8006e84:	e0c7      	b.n	8007016 <vl53l5cx_set_detection_thresholds+0x25e>
			case VL53L5CX_SIGNAL_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8006e86:	7dfa      	ldrb	r2, [r7, #23]
 8006e88:	4613      	mov	r3, r2
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	461a      	mov	r2, r3
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	4413      	add	r3, r2
 8006e96:	6819      	ldr	r1, [r3, #0]
 8006e98:	7dfa      	ldrb	r2, [r7, #23]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	005b      	lsls	r3, r3, #1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	02ca      	lsls	r2, r1, #11
 8006eaa:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8006eac:	7dfa      	ldrb	r2, [r7, #23]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	005b      	lsls	r3, r3, #1
 8006eb2:	4413      	add	r3, r2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	4413      	add	r3, r2
 8006ebc:	6859      	ldr	r1, [r3, #4]
 8006ebe:	7dfa      	ldrb	r2, [r7, #23]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	461a      	mov	r2, r3
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	4413      	add	r3, r2
 8006ece:	02ca      	lsls	r2, r1, #11
 8006ed0:	605a      	str	r2, [r3, #4]
				break;
 8006ed2:	e0a0      	b.n	8007016 <vl53l5cx_set_detection_thresholds+0x25e>
			case VL53L5CX_RANGE_SIGMA_MM:
				p_thresholds[i].param_low_thresh  *= 128;
 8006ed4:	7dfa      	ldrb	r2, [r7, #23]
 8006ed6:	4613      	mov	r3, r2
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4413      	add	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	461a      	mov	r2, r3
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	6819      	ldr	r1, [r3, #0]
 8006ee6:	7dfa      	ldrb	r2, [r7, #23]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	01ca      	lsls	r2, r1, #7
 8006ef8:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 128;
 8006efa:	7dfa      	ldrb	r2, [r7, #23]
 8006efc:	4613      	mov	r3, r2
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	461a      	mov	r2, r3
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	4413      	add	r3, r2
 8006f0a:	6859      	ldr	r1, [r3, #4]
 8006f0c:	7dfa      	ldrb	r2, [r7, #23]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	461a      	mov	r2, r3
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	01ca      	lsls	r2, r1, #7
 8006f1e:	605a      	str	r2, [r3, #4]
				break;
 8006f20:	e079      	b.n	8007016 <vl53l5cx_set_detection_thresholds+0x25e>
			case VL53L5CX_AMBIENT_PER_SPAD_KCPS:
				p_thresholds[i].param_low_thresh  *= 2048;
 8006f22:	7dfa      	ldrb	r2, [r7, #23]
 8006f24:	4613      	mov	r3, r2
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	4413      	add	r3, r2
 8006f32:	6819      	ldr	r1, [r3, #0]
 8006f34:	7dfa      	ldrb	r2, [r7, #23]
 8006f36:	4613      	mov	r3, r2
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	461a      	mov	r2, r3
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	4413      	add	r3, r2
 8006f44:	02ca      	lsls	r2, r1, #11
 8006f46:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 2048;
 8006f48:	7dfa      	ldrb	r2, [r7, #23]
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	461a      	mov	r2, r3
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	4413      	add	r3, r2
 8006f58:	6859      	ldr	r1, [r3, #4]
 8006f5a:	7dfa      	ldrb	r2, [r7, #23]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	005b      	lsls	r3, r3, #1
 8006f60:	4413      	add	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	461a      	mov	r2, r3
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	02ca      	lsls	r2, r1, #11
 8006f6c:	605a      	str	r2, [r3, #4]
				break;
 8006f6e:	e052      	b.n	8007016 <vl53l5cx_set_detection_thresholds+0x25e>
			case VL53L5CX_NB_SPADS_ENABLED:
				p_thresholds[i].param_low_thresh  *= 256;
 8006f70:	7dfa      	ldrb	r2, [r7, #23]
 8006f72:	4613      	mov	r3, r2
 8006f74:	005b      	lsls	r3, r3, #1
 8006f76:	4413      	add	r3, r2
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	4413      	add	r3, r2
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	7dfa      	ldrb	r2, [r7, #23]
 8006f84:	4613      	mov	r3, r2
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	4413      	add	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	4413      	add	r3, r2
 8006f92:	020a      	lsls	r2, r1, #8
 8006f94:	601a      	str	r2, [r3, #0]
				p_thresholds[i].param_high_thresh *= 256;
 8006f96:	7dfa      	ldrb	r2, [r7, #23]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	4413      	add	r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	4413      	add	r3, r2
 8006fa6:	6859      	ldr	r1, [r3, #4]
 8006fa8:	7dfa      	ldrb	r2, [r7, #23]
 8006faa:	4613      	mov	r3, r2
 8006fac:	005b      	lsls	r3, r3, #1
 8006fae:	4413      	add	r3, r2
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	020a      	lsls	r2, r1, #8
 8006fba:	605a      	str	r2, [r3, #4]
				break;
 8006fbc:	e02b      	b.n	8007016 <vl53l5cx_set_detection_thresholds+0x25e>
			case VL53L5CX_MOTION_INDICATOR:
				p_thresholds[i].param_low_thresh  *= 65535;
 8006fbe:	7dfa      	ldrb	r2, [r7, #23]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	005b      	lsls	r3, r3, #1
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	4413      	add	r3, r2
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	7df9      	ldrb	r1, [r7, #23]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	440b      	add	r3, r1
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	4619      	mov	r1, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	4419      	add	r1, r3
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	600b      	str	r3, [r1, #0]
				p_thresholds[i].param_high_thresh *= 65535;
 8006fe8:	7dfa      	ldrb	r2, [r7, #23]
 8006fea:	4613      	mov	r3, r2
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	685a      	ldr	r2, [r3, #4]
 8006ffa:	7df9      	ldrb	r1, [r7, #23]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	440b      	add	r3, r1
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4619      	mov	r1, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	4419      	add	r1, r3
 800700a:	4613      	mov	r3, r2
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	1a9b      	subs	r3, r3, r2
 8007010:	604b      	str	r3, [r1, #4]
				break;
 8007012:	e000      	b.n	8007016 <vl53l5cx_set_detection_thresholds+0x25e>
			default:
				break;
 8007014:	bf00      	nop
	for(i = 0; i < (uint8_t) VL53L5CX_NB_THRESHOLDS; i++)
 8007016:	7dfb      	ldrb	r3, [r7, #23]
 8007018:	3301      	adds	r3, #1
 800701a:	75fb      	strb	r3, [r7, #23]
 800701c:	7dfb      	ldrb	r3, [r7, #23]
 800701e:	2b3f      	cmp	r3, #63	; 0x3f
 8007020:	f67f aedb 	bls.w	8006dda <vl53l5cx_set_detection_thresholds+0x22>
		}
	}

	/* Set valid target list */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)grp_valid_target_cfg,
 8007024:	f107 010c 	add.w	r1, r7, #12
 8007028:	2308      	movs	r3, #8
 800702a:	f64b 12f0 	movw	r2, #47600	; 0xb9f0
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f7ff fdb0 	bl	8006b94 <vl53l5cx_dci_write_data>
 8007034:	4603      	mov	r3, r0
 8007036:	461a      	mov	r2, r3
 8007038:	7dbb      	ldrb	r3, [r7, #22]
 800703a:	4313      	orrs	r3, r2
 800703c:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_VALID_STATUS, 
			(uint16_t)sizeof(grp_valid_target_cfg));

	/* Set thresholds configuration */
	status |= vl53l5cx_dci_write_data(p_dev, (uint8_t*)p_thresholds,
 800703e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007042:	f24b 62e8 	movw	r2, #46824	; 0xb6e8
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f7ff fda3 	bl	8006b94 <vl53l5cx_dci_write_data>
 800704e:	4603      	mov	r3, r0
 8007050:	461a      	mov	r2, r3
 8007052:	7dbb      	ldrb	r3, [r7, #22]
 8007054:	4313      	orrs	r3, r2
 8007056:	75bb      	strb	r3, [r7, #22]
			VL53L5CX_DCI_DET_THRESH_START, 
			(uint16_t)(VL53L5CX_NB_THRESHOLDS
			*sizeof(VL53L5CX_DetectionThresholds)));

	return status;
 8007058:	7dbb      	ldrb	r3, [r7, #22]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3718      	adds	r7, #24
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	0800c0c8 	.word	0x0800c0c8

08007068 <RdByte>:

uint8_t RdByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_value)
{
 8007068:	b590      	push	{r4, r7, lr}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	460b      	mov	r3, r1
 8007072:	607a      	str	r2, [r7, #4]
 8007074:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_value, 1U);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	689c      	ldr	r4, [r3, #8]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	8818      	ldrh	r0, [r3, #0]
 800707e:	8979      	ldrh	r1, [r7, #10]
 8007080:	2301      	movs	r3, #1
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	47a0      	blx	r4
 8007086:	4603      	mov	r3, r0
 8007088:	b2db      	uxtb	r3, r3
}
 800708a:	4618      	mov	r0, r3
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	bd90      	pop	{r4, r7, pc}

08007092 <WrByte>:

uint8_t WrByte(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t value)
{
 8007092:	b590      	push	{r4, r7, lr}
 8007094:	b083      	sub	sp, #12
 8007096:	af00      	add	r7, sp, #0
 8007098:	6078      	str	r0, [r7, #4]
 800709a:	460b      	mov	r3, r1
 800709c:	807b      	strh	r3, [r7, #2]
 800709e:	4613      	mov	r3, r2
 80070a0:	707b      	strb	r3, [r7, #1]
  return p_platform->Write(p_platform->address, RegisterAdress, &value, 1U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685c      	ldr	r4, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	8818      	ldrh	r0, [r3, #0]
 80070aa:	1c7a      	adds	r2, r7, #1
 80070ac:	8879      	ldrh	r1, [r7, #2]
 80070ae:	2301      	movs	r3, #1
 80070b0:	47a0      	blx	r4
 80070b2:	4603      	mov	r3, r0
 80070b4:	b2db      	uxtb	r3, r3
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd90      	pop	{r4, r7, pc}

080070be <WrMulti>:
uint8_t WrMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80070be:	b590      	push	{r4, r7, lr}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
 80070ca:	460b      	mov	r3, r1
 80070cc:	817b      	strh	r3, [r7, #10]
  return p_platform->Write(p_platform->address, RegisterAdress, p_values, size);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	685c      	ldr	r4, [r3, #4]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	8818      	ldrh	r0, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	b29b      	uxth	r3, r3
 80070da:	8979      	ldrh	r1, [r7, #10]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	47a0      	blx	r4
 80070e0:	4603      	mov	r3, r0
 80070e2:	b2db      	uxtb	r3, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd90      	pop	{r4, r7, pc}

080070ec <RdMulti>:
uint8_t RdMulti(
		VL53L5CX_Platform *p_platform,
		uint16_t RegisterAdress,
		uint8_t *p_values,
		uint32_t size)
{
 80070ec:	b590      	push	{r4, r7, lr}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	607a      	str	r2, [r7, #4]
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	460b      	mov	r3, r1
 80070fa:	817b      	strh	r3, [r7, #10]
  return p_platform->Read(p_platform->address, RegisterAdress, p_values, size);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	689c      	ldr	r4, [r3, #8]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8818      	ldrh	r0, [r3, #0]
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	b29b      	uxth	r3, r3
 8007108:	8979      	ldrh	r1, [r7, #10]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	47a0      	blx	r4
 800710e:	4603      	mov	r3, r0
 8007110:	b2db      	uxtb	r3, r3
}
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	bd90      	pop	{r4, r7, pc}

0800711a <SwapBuffer>:

void SwapBuffer(
    uint8_t     *buffer,
    uint16_t     size)
{
 800711a:	b480      	push	{r7}
 800711c:	b085      	sub	sp, #20
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	460b      	mov	r3, r1
 8007124:	807b      	strh	r3, [r7, #2]
  uint32_t i, tmp;

  /* Example of possible implementation using <string.h> */
  for(i = 0; i < size; i = i + 4)
 8007126:	2300      	movs	r3, #0
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	e021      	b.n	8007170 <SwapBuffer+0x56>
  {
    tmp = (
      buffer[i]<<24)
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	4413      	add	r3, r2
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	061a      	lsls	r2, r3, #24
    |(buffer[i+1]<<16)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3301      	adds	r3, #1
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	440b      	add	r3, r1
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	431a      	orrs	r2, r3
    |(buffer[i+2]<<8)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3302      	adds	r3, #2
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	440b      	add	r3, r1
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	4313      	orrs	r3, r2
    |(buffer[i+3]);
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	3203      	adds	r2, #3
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	440a      	add	r2, r1
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	4313      	orrs	r3, r2
    tmp = (
 800715e:	60bb      	str	r3, [r7, #8]

    memcpy(&(buffer[i]), &tmp, 4);
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	601a      	str	r2, [r3, #0]
  for(i = 0; i < size; i = i + 4)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	3304      	adds	r3, #4
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	887b      	ldrh	r3, [r7, #2]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	429a      	cmp	r2, r3
 8007176:	d3d9      	bcc.n	800712c <SwapBuffer+0x12>
  }
}
 8007178:	bf00      	nop
 800717a:	bf00      	nop
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <WaitMs>:

uint8_t WaitMs(
		VL53L5CX_Platform *p_platform,
		uint32_t TimeMs)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = p_platform->GetTick();
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	4798      	blx	r3
 8007196:	4603      	mov	r3, r0
 8007198:	60fb      	str	r3, [r7, #12]

  while ((p_platform->GetTick() - tickstart) < TimeMs);
 800719a:	bf00      	nop
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	4798      	blx	r3
 80071a2:	4603      	mov	r3, r0
 80071a4:	461a      	mov	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d8f5      	bhi.n	800719c <WaitMs+0x16>

  return 0;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <VL53L5CX_RegisterBusIO>:
  * @param pObj    vl53l5cx context object.
  * @param pIO     BSP IO struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_RegisterBusIO(VL53L5CX_Object_t *pObj, VL53L5CX_IO_t *pIO)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
 80071c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pIO == NULL))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <VL53L5CX_RegisterBusIO+0x16>
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d103      	bne.n	80071d8 <VL53L5CX_RegisterBusIO+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80071d0:	f06f 0301 	mvn.w	r3, #1
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e033      	b.n	8007240 <VL53L5CX_RegisterBusIO+0x86>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	891a      	ldrh	r2, [r3, #8]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68da      	ldr	r2, [r3, #12]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	695a      	ldr	r2, [r3, #20]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	615a      	str	r2, [r3, #20]

    /* fill vl53l5cx platform structure */
    pObj->Dev.platform.address = pIO->Address;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	891a      	ldrh	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	831a      	strh	r2, [r3, #24]
    pObj->Dev.platform.Read = pIO->ReadReg;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	691a      	ldr	r2, [r3, #16]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	621a      	str	r2, [r3, #32]
    pObj->Dev.platform.Write = pIO->WriteReg;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	61da      	str	r2, [r3, #28]
    pObj->Dev.platform.GetTick = pIO->GetTick;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	695a      	ldr	r2, [r3, #20]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d004      	beq.n	800723a <VL53L5CX_RegisterBusIO+0x80>
    {
      ret = pObj->IO.Init();
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4798      	blx	r3
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	e002      	b.n	8007240 <VL53L5CX_RegisterBusIO+0x86>
    }
    else
    {
      ret = VL53L5CX_ERROR;
 800723a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800723e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007240:	68fb      	ldr	r3, [r7, #12]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}

0800724a <VL53L5CX_Init>:
  * @brief Initializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Init(VL53L5CX_Object_t *pObj)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b084      	sub	sp, #16
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <VL53L5CX_Init+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007258:	f06f 0301 	mvn.w	r3, #1
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e02e      	b.n	80072be <VL53L5CX_Init+0x74>
  }
  else if (pObj->IsInitialized != 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 3d48 	ldrb.w	r3, [r3, #3400]	; 0xd48
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <VL53L5CX_Init+0x28>
  {
    ret =  VL53L5CX_ERROR;
 800726a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	e025      	b.n	80072be <VL53L5CX_Init+0x74>
  }
  else if (vl53l5cx_init(&pObj->Dev) != VL53L5CX_STATUS_OK)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3318      	adds	r3, #24
 8007276:	4618      	mov	r0, r3
 8007278:	f7fe f8d6 	bl	8005428 <vl53l5cx_init>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d003      	beq.n	800728a <VL53L5CX_Init+0x40>
  {
    ret = VL53L5CX_ERROR;
 8007282:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007286:	60fb      	str	r3, [r7, #12]
 8007288:	e019      	b.n	80072be <VL53L5CX_Init+0x74>
  }
  else
  {
    pObj->IsRanging = 0U;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2d49 	strb.w	r2, [r3, #3401]	; 0xd49
    pObj->IsBlocking = 0U;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2d4a 	strb.w	r2, [r3, #3402]	; 0xd4a
    pObj->IsContinuous = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2d4b 	strb.w	r2, [r3, #3403]	; 0xd4b
    pObj->IsAmbientEnabled = 0U;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2d4c 	strb.w	r2, [r3, #3404]	; 0xd4c
    pObj->IsSignalEnabled = 0U;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2d4d 	strb.w	r2, [r3, #3405]	; 0xd4d
    pObj->IsInitialized = 1U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2d48 	strb.w	r2, [r3, #3400]	; 0xd48
    ret = VL53L5CX_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80072be:	68fb      	ldr	r3, [r7, #12]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <VL53L5CX_DeInit>:
  * @brief Deinitializes the vl53l5cx.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_DeInit(VL53L5CX_Object_t *pObj)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d103      	bne.n	80072de <VL53L5CX_DeInit+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80072d6:	f06f 0301 	mvn.w	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e018      	b.n	8007310 <VL53L5CX_DeInit+0x48>
  }
  else if (pObj->IsInitialized == 1U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f893 3d48 	ldrb.w	r3, [r3, #3400]	; 0xd48
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d110      	bne.n	800730a <VL53L5CX_DeInit+0x42>
  {
    /* De-initialize the vl53l5cx interface */
    if (pObj->IO.DeInit() != 0)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4798      	blx	r3
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <VL53L5CX_DeInit+0x34>
    {
      ret = VL53L5CX_ERROR;
 80072f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	e009      	b.n	8007310 <VL53L5CX_DeInit+0x48>
    }
    else
    {
      ret = VL53L5CX_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
      pObj->IsInitialized = 0;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2d48 	strb.w	r2, [r3, #3400]	; 0xd48
 8007308:	e002      	b.n	8007310 <VL53L5CX_DeInit+0x48>
    }
  }
  else
  {
    /* if device not initialized return error */
    ret = VL53L5CX_ERROR;
 800730a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800730e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007310:	68fb      	ldr	r3, [r7, #12]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <VL53L5CX_ReadID>:
  * @param pObj    vl53l5cx context object.
  * @param pId    Pointer to the device ID.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ReadID(VL53L5CX_Object_t *pObj, uint32_t *pId)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t device_id = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	72bb      	strb	r3, [r7, #10]
  uint8_t revision_id = 0;
 8007328:	2300      	movs	r3, #0
 800732a:	727b      	strb	r3, [r7, #9]
  uint8_t status = VL53L5CX_STATUS_OK;
 800732c:	2300      	movs	r3, #0
 800732e:	72fb      	strb	r3, [r7, #11]

  if ((pObj == NULL) || (pId == NULL))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d002      	beq.n	800733c <VL53L5CX_ReadID+0x22>
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d103      	bne.n	8007344 <VL53L5CX_ReadID+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800733c:	f06f 0301 	mvn.w	r3, #1
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e045      	b.n	80073d0 <VL53L5CX_ReadID+0xb6>
  }
  else
  {
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x00);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	3318      	adds	r3, #24
 8007348:	2200      	movs	r2, #0
 800734a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800734e:	4618      	mov	r0, r3
 8007350:	f7ff fe9f 	bl	8007092 <WrByte>
 8007354:	4603      	mov	r3, r0
 8007356:	461a      	mov	r2, r3
 8007358:	7afb      	ldrb	r3, [r7, #11]
 800735a:	4313      	orrs	r3, r2
 800735c:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 0, &device_id);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	3318      	adds	r3, #24
 8007362:	f107 020a 	add.w	r2, r7, #10
 8007366:	2100      	movs	r1, #0
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff fe7d 	bl	8007068 <RdByte>
 800736e:	4603      	mov	r3, r0
 8007370:	461a      	mov	r2, r3
 8007372:	7afb      	ldrb	r3, [r7, #11]
 8007374:	4313      	orrs	r3, r2
 8007376:	72fb      	strb	r3, [r7, #11]
    status |= RdByte(&pObj->Dev.platform, 1, &revision_id);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	3318      	adds	r3, #24
 800737c:	f107 0209 	add.w	r2, r7, #9
 8007380:	2101      	movs	r1, #1
 8007382:	4618      	mov	r0, r3
 8007384:	f7ff fe70 	bl	8007068 <RdByte>
 8007388:	4603      	mov	r3, r0
 800738a:	461a      	mov	r2, r3
 800738c:	7afb      	ldrb	r3, [r7, #11]
 800738e:	4313      	orrs	r3, r2
 8007390:	72fb      	strb	r3, [r7, #11]
    status |= WrByte(&pObj->Dev.platform, 0x7fff, 0x02);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3318      	adds	r3, #24
 8007396:	2202      	movs	r2, #2
 8007398:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800739c:	4618      	mov	r0, r3
 800739e:	f7ff fe78 	bl	8007092 <WrByte>
 80073a2:	4603      	mov	r3, r0
 80073a4:	461a      	mov	r2, r3
 80073a6:	7afb      	ldrb	r3, [r7, #11]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	72fb      	strb	r3, [r7, #11]

    if (status == 0U)
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d108      	bne.n	80073c4 <VL53L5CX_ReadID+0xaa>
    {
      *pId = ((uint32_t)device_id << 8) + revision_id;
 80073b2:	7abb      	ldrb	r3, [r7, #10]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	7a7a      	ldrb	r2, [r7, #9]
 80073b8:	441a      	add	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	60fb      	str	r3, [r7, #12]
 80073c2:	e005      	b.n	80073d0 <VL53L5CX_ReadID+0xb6>
    }
    else
    {
      *pId = 0;
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]
      ret = VL53L5CX_ERROR;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80073d0:	68fb      	ldr	r3, [r7, #12]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}

080073da <VL53L5CX_GetCapabilities>:
  * @param pObj    vl53l5cx context object.
  * @param pCap    Pointer to the vl53l5cx capabilities.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetCapabilities(VL53L5CX_Object_t *pObj, VL53L5CX_Capabilities_t *pCap)
{
 80073da:	b480      	push	{r7}
 80073dc:	b085      	sub	sp, #20
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pCap == NULL))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <VL53L5CX_GetCapabilities+0x16>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <VL53L5CX_GetCapabilities+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80073f0:	f06f 0301 	mvn.w	r3, #1
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e00d      	b.n	8007414 <VL53L5CX_GetCapabilities+0x3a>
  }
  else
  {
    pCap->NumberOfZones = VL53L5CX_RESOLUTION_8X8;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2240      	movs	r2, #64	; 0x40
 80073fc:	601a      	str	r2, [r3, #0]
    pCap->MaxNumberOfTargetsPerZone = VL53L5CX_TARGET_PER_ZONE;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2202      	movs	r2, #2
 8007402:	605a      	str	r2, [r3, #4]
    pCap->CustomROI = 0;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	609a      	str	r2, [r3, #8]
    pCap->ThresholdDetection = 1;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	2201      	movs	r2, #1
 800740e:	60da      	str	r2, [r3, #12]

    ret = VL53L5CX_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007414:	68fb      	ldr	r3, [r7, #12]
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <VL53L5CX_ConfigProfile>:
  * @param pObj    vl53l5cx context object.
  * @param pConfig    Pointer to the new configuration profile to be applied.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigProfile(VL53L5CX_Object_t *pObj, VL53L5CX_ProfileConfig_t *pConfig)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b086      	sub	sp, #24
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  int32_t ret = VL53L5CX_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	617b      	str	r3, [r7, #20]
  uint8_t resolution;
  uint8_t ranging_mode;
  uint8_t ranging_frequency;
  uint32_t integration_time;

  if ((pObj != NULL) && (pConfig != NULL))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01b      	beq.n	8007470 <VL53L5CX_ConfigProfile+0x4c>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d018      	beq.n	8007470 <VL53L5CX_ConfigProfile+0x4c>
  {
    profile = pConfig->RangingProfile;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	747b      	strb	r3, [r7, #17]
    integration_time = pConfig->TimingBudget;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	60fb      	str	r3, [r7, #12]
    ranging_frequency = (uint8_t)pConfig->Frequency;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	72fb      	strb	r3, [r7, #11]
  else
  {
    return VL53L5CX_INVALID_PARAM;
  }

  switch (profile)
 8007450:	7c7b      	ldrb	r3, [r7, #17]
 8007452:	3b01      	subs	r3, #1
 8007454:	2b03      	cmp	r3, #3
 8007456:	d822      	bhi.n	800749e <VL53L5CX_ConfigProfile+0x7a>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <VL53L5CX_ConfigProfile+0x3c>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	08007477 	.word	0x08007477
 8007464:	08007481 	.word	0x08007481
 8007468:	0800748b 	.word	0x0800748b
 800746c:	08007495 	.word	0x08007495
    return VL53L5CX_INVALID_PARAM;
 8007470:	f06f 0301 	mvn.w	r3, #1
 8007474:	e070      	b.n	8007558 <VL53L5CX_ConfigProfile+0x134>
  {
  case VL53L5CX_PROFILE_4x4_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 8007476:	2310      	movs	r3, #16
 8007478:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 800747a:	2301      	movs	r3, #1
 800747c:	74bb      	strb	r3, [r7, #18]
    break;
 800747e:	e016      	b.n	80074ae <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_4x4_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_4X4;
 8007480:	2310      	movs	r3, #16
 8007482:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 8007484:	2303      	movs	r3, #3
 8007486:	74bb      	strb	r3, [r7, #18]
    break;
 8007488:	e011      	b.n	80074ae <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_CONTINUOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_CONTINUOUS;
 800748e:	2301      	movs	r3, #1
 8007490:	74bb      	strb	r3, [r7, #18]
    break;
 8007492:	e00c      	b.n	80074ae <VL53L5CX_ConfigProfile+0x8a>
  case VL53L5CX_PROFILE_8x8_AUTONOMOUS:
    resolution = VL53L5CX_RESOLUTION_8X8;
 8007494:	2340      	movs	r3, #64	; 0x40
 8007496:	74fb      	strb	r3, [r7, #19]
    ranging_mode = VL53L5CX_RANGING_MODE_AUTONOMOUS;
 8007498:	2303      	movs	r3, #3
 800749a:	74bb      	strb	r3, [r7, #18]
    break;
 800749c:	e007      	b.n	80074ae <VL53L5CX_ConfigProfile+0x8a>
  default:
    resolution = 0; /* silence MISRA rule 1.3 warning */
 800749e:	2300      	movs	r3, #0
 80074a0:	74fb      	strb	r3, [r7, #19]
    ranging_mode = 0; /* silence MISRA rule 1.3 warning */
 80074a2:	2300      	movs	r3, #0
 80074a4:	74bb      	strb	r3, [r7, #18]
    ret = VL53L5CX_INVALID_PARAM;
 80074a6:	f06f 0301 	mvn.w	r3, #1
 80074aa:	617b      	str	r3, [r7, #20]
    break;
 80074ac:	bf00      	nop
  }

  if (ret != VL53L5CX_OK)
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <VL53L5CX_ConfigProfile+0x94>
  {
    return ret;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	e04f      	b.n	8007558 <VL53L5CX_ConfigProfile+0x134>
  }
  else if (vl53l5cx_set_resolution(&pObj->Dev, resolution) != VL53L5CX_STATUS_OK)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	3318      	adds	r3, #24
 80074bc:	7cfa      	ldrb	r2, [r7, #19]
 80074be:	4611      	mov	r1, r2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff f8f6 	bl	80066b2 <vl53l5cx_set_resolution>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <VL53L5CX_ConfigProfile+0xb0>
  {
    ret = VL53L5CX_ERROR;
 80074cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074d0:	617b      	str	r3, [r7, #20]
 80074d2:	e040      	b.n	8007556 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_mode(&pObj->Dev, ranging_mode) != VL53L5CX_STATUS_OK)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3318      	adds	r3, #24
 80074d8:	7cba      	ldrb	r2, [r7, #18]
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7ff fa77 	bl	80069d0 <vl53l5cx_set_ranging_mode>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d003      	beq.n	80074f0 <VL53L5CX_ConfigProfile+0xcc>
  {
    ret = VL53L5CX_ERROR;
 80074e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ec:	617b      	str	r3, [r7, #20]
 80074ee:	e032      	b.n	8007556 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_integration_time_ms(&pObj->Dev, integration_time) != VL53L5CX_STATUS_OK)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	3318      	adds	r3, #24
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7ff f9d0 	bl	800689c <vl53l5cx_set_integration_time_ms>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <VL53L5CX_ConfigProfile+0xe6>
  {
    ret = VL53L5CX_ERROR;
 8007502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007506:	617b      	str	r3, [r7, #20]
 8007508:	e025      	b.n	8007556 <VL53L5CX_ConfigProfile+0x132>
  }
  else if (vl53l5cx_set_ranging_frequency_hz(&pObj->Dev, ranging_frequency) != VL53L5CX_STATUS_OK)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	3318      	adds	r3, #24
 800750e:	7afa      	ldrb	r2, [r7, #11]
 8007510:	4611      	mov	r1, r2
 8007512:	4618      	mov	r0, r3
 8007514:	f7ff f9a1 	bl	800685a <vl53l5cx_set_ranging_frequency_hz>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <VL53L5CX_ConfigProfile+0x102>
  {
    ret = VL53L5CX_ERROR;
 800751e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	e017      	b.n	8007556 <VL53L5CX_ConfigProfile+0x132>
  }
  else
  {
    pObj->IsAmbientEnabled = (pConfig->EnableAmbient == 0U) ? 0U : 1U;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	2b00      	cmp	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2301      	movne	r3, #1
 8007530:	2300      	moveq	r3, #0
 8007532:	b2db      	uxtb	r3, r3
 8007534:	461a      	mov	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f883 2d4c 	strb.w	r2, [r3, #3404]	; 0xd4c
    pObj->IsSignalEnabled = (pConfig->EnableSignal == 0U) ? 0U : 1U;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	2b00      	cmp	r3, #0
 8007542:	bf14      	ite	ne
 8007544:	2301      	movne	r3, #1
 8007546:	2300      	moveq	r3, #0
 8007548:	b2db      	uxtb	r3, r3
 800754a:	461a      	mov	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f883 2d4d 	strb.w	r2, [r3, #3405]	; 0xd4d

    ret = VL53L5CX_OK;
 8007552:	2300      	movs	r3, #0
 8007554:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8007556:	697b      	ldr	r3, [r7, #20]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3718      	adds	r7, #24
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <VL53L5CX_ConfigROI>:
  * @param pROIConfig    Pointer to the ROI configuration struct.
  * @note This device does not support this function.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigROI(VL53L5CX_Object_t *pObj, VL53L5CX_ROIConfig_t *pROIConfig)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  UNUSED(pObj);
  UNUSED(pROIConfig);
  return VL53L5CX_NOT_IMPLEMENTED;
 800756a:	f06f 0303 	mvn.w	r3, #3
}
 800756e:	4618      	mov	r0, r3
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
	...

0800757c <VL53L5CX_ConfigIT>:
  * @param pObj    vl53l5cx context object.
  * @param pITConfig    Pointer to the IT configuration struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_ConfigIT(VL53L5CX_Object_t *pObj, VL53L5CX_ITConfig_t *pITConfig)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t i;
  uint8_t res; /* current resolution */
  uint8_t status = 0U;
 8007586:	2300      	movs	r3, #0
 8007588:	72bb      	strb	r3, [r7, #10]
  static VL53L5CX_DetectionThresholds thresholds[VL53L5CX_NB_THRESHOLDS];

  if ((pObj == NULL) || (pITConfig == NULL))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <VL53L5CX_ConfigIT+0x1a>
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <VL53L5CX_ConfigIT+0x22>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007596:	f06f 0301 	mvn.w	r3, #1
 800759a:	60fb      	str	r3, [r7, #12]
 800759c:	e09f      	b.n	80076de <VL53L5CX_ConfigIT+0x162>
  }
  else if (pITConfig->Criteria == VL53L5CX_IT_DEFAULT)
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2bff      	cmp	r3, #255	; 0xff
 80075a4:	d113      	bne.n	80075ce <VL53L5CX_ConfigIT+0x52>
  {
    /* disable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 0U);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	3318      	adds	r3, #24
 80075aa:	2100      	movs	r1, #0
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7ff fbbc 	bl	8006d2a <vl53l5cx_set_detection_thresholds_enable>
 80075b2:	4603      	mov	r3, r0
 80075b4:	461a      	mov	r2, r3
 80075b6:	7abb      	ldrb	r3, [r7, #10]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	72bb      	strb	r3, [r7, #10]
    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 80075bc:	7abb      	ldrb	r3, [r7, #10]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <VL53L5CX_ConfigIT+0x4c>
 80075c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075c6:	e000      	b.n	80075ca <VL53L5CX_ConfigIT+0x4e>
 80075c8:	2300      	movs	r3, #0
 80075ca:	60fb      	str	r3, [r7, #12]
 80075cc:	e087      	b.n	80076de <VL53L5CX_ConfigIT+0x162>
  }
  else
  {
    (void)vl53l5cx_get_resolution(&pObj->Dev, &res);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3318      	adds	r3, #24
 80075d2:	f107 0209 	add.w	r2, r7, #9
 80075d6:	4611      	mov	r1, r2
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff f845 	bl	8006668 <vl53l5cx_get_resolution>

    /* configure thresholds on each active zone */
    for (i = 0; i < res; i++)
 80075de:	2300      	movs	r3, #0
 80075e0:	72fb      	strb	r3, [r7, #11]
 80075e2:	e044      	b.n	800766e <VL53L5CX_ConfigIT+0xf2>
    {
      thresholds[i].zone_num = i;
 80075e4:	7afa      	ldrb	r2, [r7, #11]
 80075e6:	4940      	ldr	r1, [pc, #256]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 80075e8:	4613      	mov	r3, r2
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	330a      	adds	r3, #10
 80075f4:	7afa      	ldrb	r2, [r7, #11]
 80075f6:	701a      	strb	r2, [r3, #0]
      thresholds[i].measurement = VL53L5CX_DISTANCE_MM;
 80075f8:	7afa      	ldrb	r2, [r7, #11]
 80075fa:	493b      	ldr	r1, [pc, #236]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 80075fc:	4613      	mov	r3, r2
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	440b      	add	r3, r1
 8007606:	3308      	adds	r3, #8
 8007608:	2201      	movs	r2, #1
 800760a:	701a      	strb	r2, [r3, #0]
      thresholds[i].type = (uint8_t)pITConfig->Criteria;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	7afa      	ldrb	r2, [r7, #11]
 8007612:	b2d8      	uxtb	r0, r3
 8007614:	4934      	ldr	r1, [pc, #208]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 8007616:	4613      	mov	r3, r2
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	3309      	adds	r3, #9
 8007622:	4602      	mov	r2, r0
 8007624:	701a      	strb	r2, [r3, #0]
      thresholds[i].mathematic_operation = VL53L5CX_OPERATION_NONE;
 8007626:	7afa      	ldrb	r2, [r7, #11]
 8007628:	492f      	ldr	r1, [pc, #188]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 800762a:	4613      	mov	r3, r2
 800762c:	005b      	lsls	r3, r3, #1
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	330b      	adds	r3, #11
 8007636:	2200      	movs	r2, #0
 8007638:	701a      	strb	r2, [r3, #0]
      thresholds[i].param_low_thresh = (int32_t)pITConfig->LowThreshold;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	7afa      	ldrb	r2, [r7, #11]
 8007640:	4618      	mov	r0, r3
 8007642:	4929      	ldr	r1, [pc, #164]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 8007644:	4613      	mov	r3, r2
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4413      	add	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	440b      	add	r3, r1
 800764e:	6018      	str	r0, [r3, #0]
      thresholds[i].param_high_thresh = (int32_t)pITConfig->HighThreshold;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	7afa      	ldrb	r2, [r7, #11]
 8007656:	4618      	mov	r0, r3
 8007658:	4923      	ldr	r1, [pc, #140]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 800765a:	4613      	mov	r3, r2
 800765c:	005b      	lsls	r3, r3, #1
 800765e:	4413      	add	r3, r2
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	440b      	add	r3, r1
 8007664:	3304      	adds	r3, #4
 8007666:	6018      	str	r0, [r3, #0]
    for (i = 0; i < res; i++)
 8007668:	7afb      	ldrb	r3, [r7, #11]
 800766a:	3301      	adds	r3, #1
 800766c:	72fb      	strb	r3, [r7, #11]
 800766e:	7a7b      	ldrb	r3, [r7, #9]
 8007670:	7afa      	ldrb	r2, [r7, #11]
 8007672:	429a      	cmp	r2, r3
 8007674:	d3b6      	bcc.n	80075e4 <VL53L5CX_ConfigIT+0x68>
    }

    /* the last threshold must be clearly indicated */
    thresholds[i].zone_num |= VL53L5CX_LAST_THRESHOLD;
 8007676:	7afa      	ldrb	r2, [r7, #11]
 8007678:	491b      	ldr	r1, [pc, #108]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 800767a:	4613      	mov	r3, r2
 800767c:	005b      	lsls	r3, r3, #1
 800767e:	4413      	add	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	440b      	add	r3, r1
 8007684:	330a      	adds	r3, #10
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	7afa      	ldrb	r2, [r7, #11]
 800768a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800768e:	b2d8      	uxtb	r0, r3
 8007690:	4915      	ldr	r1, [pc, #84]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 8007692:	4613      	mov	r3, r2
 8007694:	005b      	lsls	r3, r3, #1
 8007696:	4413      	add	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	440b      	add	r3, r1
 800769c:	330a      	adds	r3, #10
 800769e:	4602      	mov	r2, r0
 80076a0:	701a      	strb	r2, [r3, #0]

    /* send array of thresholds to the sensor */
    status |= vl53l5cx_set_detection_thresholds(&pObj->Dev, thresholds);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4910      	ldr	r1, [pc, #64]	; (80076e8 <VL53L5CX_ConfigIT+0x16c>)
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fb85 	bl	8006db8 <vl53l5cx_set_detection_thresholds>
 80076ae:	4603      	mov	r3, r0
 80076b0:	461a      	mov	r2, r3
 80076b2:	7abb      	ldrb	r3, [r7, #10]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	72bb      	strb	r3, [r7, #10]

    /* enable thresholds detection */
    status |= vl53l5cx_set_detection_thresholds_enable(&pObj->Dev, 1U);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3318      	adds	r3, #24
 80076bc:	2101      	movs	r1, #1
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff fb33 	bl	8006d2a <vl53l5cx_set_detection_thresholds_enable>
 80076c4:	4603      	mov	r3, r0
 80076c6:	461a      	mov	r2, r3
 80076c8:	7abb      	ldrb	r3, [r7, #10]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	72bb      	strb	r3, [r7, #10]

    ret = (status != 0U) ? VL53L5CX_ERROR : VL53L5CX_OK;
 80076ce:	7abb      	ldrb	r3, [r7, #10]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <VL53L5CX_ConfigIT+0x15e>
 80076d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076d8:	e000      	b.n	80076dc <VL53L5CX_ConfigIT+0x160>
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80076de:	68fb      	ldr	r3, [r7, #12]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	2000504c 	.word	0x2000504c

080076ec <VL53L5CX_GetDistance>:
  * @param pObj    vl53l5cx context object.
  * @param pResult    Pointer to the result struct.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetDistance(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pResult == NULL))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d002      	beq.n	8007702 <VL53L5CX_GetDistance+0x16>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <VL53L5CX_GetDistance+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007702:	f06f 0301 	mvn.w	r3, #1
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	e019      	b.n	800773e <VL53L5CX_GetDistance+0x52>
  }
  else if (pObj->IsRanging == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 8007710:	2b00      	cmp	r3, #0
 8007712:	d103      	bne.n	800771c <VL53L5CX_GetDistance+0x30>
  {
    ret = VL53L5CX_ERROR;
 8007714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007718:	60fb      	str	r3, [r7, #12]
 800771a:	e010      	b.n	800773e <VL53L5CX_GetDistance+0x52>
  }
  else
  {
    if (pObj->IsBlocking == 1U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 3d4a 	ldrb.w	r3, [r3, #3402]	; 0xd4a
 8007722:	2b01      	cmp	r3, #1
 8007724:	d106      	bne.n	8007734 <VL53L5CX_GetDistance+0x48>
    {
      ret = vl53l5cx_poll_for_measurement(pObj, V53L5CX_POLL_TIMEOUT);
 8007726:	f241 3188 	movw	r1, #5000	; 0x1388
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f93a 	bl	80079a4 <vl53l5cx_poll_for_measurement>
 8007730:	60f8      	str	r0, [r7, #12]
 8007732:	e004      	b.n	800773e <VL53L5CX_GetDistance+0x52>
    }
    else
    {
      ret = vl53l5cx_poll_for_measurement(pObj, 0U);
 8007734:	2100      	movs	r1, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 f934 	bl	80079a4 <vl53l5cx_poll_for_measurement>
 800773c:	60f8      	str	r0, [r7, #12]
    }
  }

  /* a new measure is available if no error is returned by the poll function */
  if (ret == VL53L5CX_OK)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d104      	bne.n	800774e <VL53L5CX_GetDistance+0x62>
  {
    ret = vl53l5cx_get_result(pObj, pResult);
 8007744:	6839      	ldr	r1, [r7, #0]
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f95f 	bl	8007a0a <vl53l5cx_get_result>
 800774c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800774e:	68fb      	ldr	r3, [r7, #12]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <VL53L5CX_Start>:
  * @param pObj    vl53l5cx context object.
  * @param Mode        The desired @ref RANGING_SENSOR_Mode_t
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Start(VL53L5CX_Object_t *pObj, uint32_t Mode)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d103      	bne.n	8007770 <VL53L5CX_Start+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007768:	f06f 0301 	mvn.w	r3, #1
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	e04c      	b.n	800780a <VL53L5CX_Start+0xb2>
  }
  else if (vl53l5cx_start_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3318      	adds	r3, #24
 8007774:	4618      	mov	r0, r3
 8007776:	f7fe fb61 	bl	8005e3c <vl53l5cx_start_ranging>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d141      	bne.n	8007804 <VL53L5CX_Start+0xac>
  {
    pObj->IsRanging = 1U;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2d49 	strb.w	r2, [r3, #3401]	; 0xd49
    ret = VL53L5CX_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	3b01      	subs	r3, #1
 8007790:	2b03      	cmp	r3, #3
 8007792:	d82f      	bhi.n	80077f4 <VL53L5CX_Start+0x9c>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <VL53L5CX_Start+0x44>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077ad 	.word	0x080077ad
 80077a0:	080077bf 	.word	0x080077bf
 80077a4:	080077d1 	.word	0x080077d1
 80077a8:	080077e3 	.word	0x080077e3

    switch (Mode)
    {
      case VL53L5CX_MODE_BLOCKING_CONTINUOUS:
        pObj->IsContinuous = 1U;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 2d4b 	strb.w	r2, [r3, #3403]	; 0xd4b
        pObj->IsBlocking = 1U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 2d4a 	strb.w	r2, [r3, #3402]	; 0xd4a
        break;
 80077bc:	e025      	b.n	800780a <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_BLOCKING_ONESHOT:
        pObj->IsContinuous = 0U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	f883 2d4b 	strb.w	r2, [r3, #3403]	; 0xd4b
        pObj->IsBlocking = 1U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 2d4a 	strb.w	r2, [r3, #3402]	; 0xd4a
        break;
 80077ce:	e01c      	b.n	800780a <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_CONTINUOUS:
        pObj->IsContinuous = 1U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2d4b 	strb.w	r2, [r3, #3403]	; 0xd4b
        pObj->IsBlocking = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 2d4a 	strb.w	r2, [r3, #3402]	; 0xd4a
        break;
 80077e0:	e013      	b.n	800780a <VL53L5CX_Start+0xb2>

      case VL53L5CX_MODE_ASYNC_ONESHOT:
        pObj->IsContinuous = 0U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2d4b 	strb.w	r2, [r3, #3403]	; 0xd4b
        pObj->IsBlocking = 0U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 2d4a 	strb.w	r2, [r3, #3402]	; 0xd4a
        break;
 80077f2:	e00a      	b.n	800780a <VL53L5CX_Start+0xb2>

      default:
        pObj->IsRanging = 0U;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2d49 	strb.w	r2, [r3, #3401]	; 0xd49
        ret = VL53L5CX_INVALID_PARAM;
 80077fc:	f06f 0301 	mvn.w	r3, #1
 8007800:	60fb      	str	r3, [r7, #12]
        break;
 8007802:	e002      	b.n	800780a <VL53L5CX_Start+0xb2>
    }
  }
  else
  {
    ret = VL53L5CX_ERROR;
 8007804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007808:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800780a:	68fb      	ldr	r3, [r7, #12]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <VL53L5CX_Stop>:
  * @brief Stop ranging.
  * @param pObj    vl53l5cx context object.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_Stop(VL53L5CX_Object_t *pObj)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if (pObj == NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <VL53L5CX_Stop+0x16>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007822:	f06f 0301 	mvn.w	r3, #1
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	e01a      	b.n	8007860 <VL53L5CX_Stop+0x4c>
  }
  else if (pObj->IsRanging == 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3d49 	ldrb.w	r3, [r3, #3401]	; 0xd49
 8007830:	2b00      	cmp	r3, #0
 8007832:	d103      	bne.n	800783c <VL53L5CX_Stop+0x28>
  {
    /* ranging not started */
    ret = VL53L5CX_ERROR;
 8007834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007838:	60fb      	str	r3, [r7, #12]
 800783a:	e011      	b.n	8007860 <VL53L5CX_Stop+0x4c>
  }
  else if (vl53l5cx_stop_ranging(&pObj->Dev) == VL53L5CX_STATUS_OK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	3318      	adds	r3, #24
 8007840:	4618      	mov	r0, r3
 8007842:	f7fe fc59 	bl	80060f8 <vl53l5cx_stop_ranging>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d106      	bne.n	800785a <VL53L5CX_Stop+0x46>
  {
    pObj->IsRanging = 0U;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2d49 	strb.w	r2, [r3, #3401]	; 0xd49
    ret = VL53L5CX_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	60fb      	str	r3, [r7, #12]
 8007858:	e002      	b.n	8007860 <VL53L5CX_Stop+0x4c>
  }
  else
  {
    ret = VL53L5CX_ERROR;
 800785a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800785e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007860:	68fb      	ldr	r3, [r7, #12]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <VL53L5CX_SetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param Address     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetAddress(VL53L5CX_Object_t *pObj, uint32_t Address)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b084      	sub	sp, #16
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d103      	bne.n	8007882 <VL53L5CX_SetAddress+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 800787a:	f06f 0301 	mvn.w	r3, #1
 800787e:	60fb      	str	r3, [r7, #12]
 8007880:	e016      	b.n	80078b0 <VL53L5CX_SetAddress+0x46>
  }
  else if (vl53l5cx_set_i2c_address(&pObj->Dev, (uint8_t)Address) != VL53L5CX_STATUS_OK)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3318      	adds	r3, #24
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	b2d2      	uxtb	r2, r2
 800788a:	b292      	uxth	r2, r2
 800788c:	4611      	mov	r1, r2
 800788e:	4618      	mov	r0, r3
 8007890:	f7fe f9dc 	bl	8005c4c <vl53l5cx_set_i2c_address>
 8007894:	4603      	mov	r3, r0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <VL53L5CX_SetAddress+0x38>
  {
    ret = VL53L5CX_ERROR;
 800789a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	e006      	b.n	80078b0 <VL53L5CX_SetAddress+0x46>
  }
  else
  {
    pObj->IO.Address = (uint8_t)(Address & 0xFFU);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	811a      	strh	r2, [r3, #8]
    ret = VL53L5CX_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078b0:	68fb      	ldr	r3, [r7, #12]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3710      	adds	r7, #16
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <VL53L5CX_GetAddress>:
  * @param pObj    vl53l5cx context object.
  * @param *pAddress     New I2C address.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetAddress(VL53L5CX_Object_t *pObj, uint32_t *pAddress)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b085      	sub	sp, #20
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
 80078c2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if ((pObj == NULL) || (pAddress == NULL))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d002      	beq.n	80078d0 <VL53L5CX_GetAddress+0x16>
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d103      	bne.n	80078d8 <VL53L5CX_GetAddress+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80078d0:	f06f 0301 	mvn.w	r3, #1
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	e006      	b.n	80078e6 <VL53L5CX_GetAddress+0x2c>
  }
  else
  {
    *pAddress = pObj->IO.Address;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	891b      	ldrh	r3, [r3, #8]
 80078dc:	461a      	mov	r2, r3
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80078e6:	68fb      	ldr	r3, [r7, #12]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <VL53L5CX_SetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param PowerMode    New power mode to be entered.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_SetPowerMode(VL53L5CX_Object_t *pObj, uint32_t PowerMode)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d103      	bne.n	800790c <VL53L5CX_SetPowerMode+0x18>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007904:	f06f 0301 	mvn.w	r3, #1
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	e01a      	b.n	8007942 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if ((PowerMode != VL53L5CX_POWER_MODE_SLEEP) &&
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d006      	beq.n	8007920 <VL53L5CX_SetPowerMode+0x2c>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d003      	beq.n	8007920 <VL53L5CX_SetPowerMode+0x2c>
           (PowerMode != VL53L5CX_POWER_MODE_WAKEUP))
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007918:	f06f 0301 	mvn.w	r3, #1
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e010      	b.n	8007942 <VL53L5CX_SetPowerMode+0x4e>
  }
  else if (vl53l5cx_set_power_mode(&pObj->Dev, (uint8_t)PowerMode) != VL53L5CX_STATUS_OK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3318      	adds	r3, #24
 8007924:	683a      	ldr	r2, [r7, #0]
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	4611      	mov	r1, r2
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe fa07 	bl	8005d3e <vl53l5cx_set_power_mode>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d003      	beq.n	800793e <VL53L5CX_SetPowerMode+0x4a>
  {
    ret = VL53L5CX_ERROR;
 8007936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e001      	b.n	8007942 <VL53L5CX_SetPowerMode+0x4e>
  }
  else
  {
    ret = VL53L5CX_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007942:	68fb      	ldr	r3, [r7, #12]
}
 8007944:	4618      	mov	r0, r3
 8007946:	3710      	adds	r7, #16
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <VL53L5CX_GetPowerMode>:
  * @param pObj    vl53l5cx context object.
  * @param *pPowerMode    pointer to variable to be filled with power mode value.
  * @retval VL53L5CX status
  */
int32_t VL53L5CX_GetPowerMode(VL53L5CX_Object_t *pObj, uint32_t *pPowerMode)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t powermode;

  if ((pObj == NULL) || (pPowerMode == NULL))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <VL53L5CX_GetPowerMode+0x16>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d103      	bne.n	800796a <VL53L5CX_GetPowerMode+0x1e>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007962:	f06f 0301 	mvn.w	r3, #1
 8007966:	60fb      	str	r3, [r7, #12]
 8007968:	e017      	b.n	800799a <VL53L5CX_GetPowerMode+0x4e>
  }
  else if (vl53l5cx_get_power_mode(&pObj->Dev, &powermode) != VL53L5CX_STATUS_OK)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	3318      	adds	r3, #24
 800796e:	f107 020b 	add.w	r2, r7, #11
 8007972:	4611      	mov	r1, r2
 8007974:	4618      	mov	r0, r3
 8007976:	f7fe f99f 	bl	8005cb8 <vl53l5cx_get_power_mode>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d006      	beq.n	800798e <VL53L5CX_GetPowerMode+0x42>
  {
    *pPowerMode = 0;
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2200      	movs	r2, #0
 8007984:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_ERROR;
 8007986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	e005      	b.n	800799a <VL53L5CX_GetPowerMode+0x4e>
  }
  else
  {
    *pPowerMode = (uint32_t)powermode;
 800798e:	7afb      	ldrb	r3, [r7, #11]
 8007990:	461a      	mov	r2, r3
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	601a      	str	r2, [r3, #0]
    ret = VL53L5CX_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800799a:	68fb      	ldr	r3, [r7, #12]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <vl53l5cx_poll_for_measurement>:

/** @defgroup VL53L5CX_Private_Functions Private Functions
  * @{
  */
static int32_t vl53l5cx_poll_for_measurement(VL53L5CX_Object_t *pObj, uint32_t Timeout)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t TickStart;
  uint8_t NewDataReady = 0;
 80079ae:	2300      	movs	r3, #0
 80079b0:	73fb      	strb	r3, [r7, #15]

  if (pObj == NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <vl53l5cx_poll_for_measurement+0x1c>
  {
    ret = VL53L5CX_INVALID_PARAM;
 80079b8:	f06f 0301 	mvn.w	r3, #1
 80079bc:	617b      	str	r3, [r7, #20]
 80079be:	e01f      	b.n	8007a00 <vl53l5cx_poll_for_measurement+0x5c>
  }
  else
  {
    ret =  VL53L5CX_TIMEOUT;
 80079c0:	f06f 0302 	mvn.w	r3, #2
 80079c4:	617b      	str	r3, [r7, #20]
    TickStart = pObj->IO.GetTick();
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	695b      	ldr	r3, [r3, #20]
 80079ca:	4798      	blx	r3
 80079cc:	4603      	mov	r3, r0
 80079ce:	613b      	str	r3, [r7, #16]

    do
    {
      (void)vl53l5cx_check_data_ready(&pObj->Dev, &NewDataReady);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	3318      	adds	r3, #24
 80079d4:	f107 020f 	add.w	r2, r7, #15
 80079d8:	4611      	mov	r1, r2
 80079da:	4618      	mov	r0, r3
 80079dc:	f7fe fc2e 	bl	800623c <vl53l5cx_check_data_ready>

      if (NewDataReady == 1U)
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d102      	bne.n	80079ec <vl53l5cx_poll_for_measurement+0x48>
      {
        ret = VL53L5CX_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
        break;
 80079ea:	e009      	b.n	8007a00 <vl53l5cx_poll_for_measurement+0x5c>
      }
    } while ((pObj->IO.GetTick() - TickStart) < Timeout);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	4798      	blx	r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	461a      	mov	r2, r3
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d8e7      	bhi.n	80079d0 <vl53l5cx_poll_for_measurement+0x2c>

  }

  return ret;
 8007a00:	697b      	ldr	r3, [r7, #20]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <vl53l5cx_get_result>:

static int32_t vl53l5cx_get_result(VL53L5CX_Object_t *pObj, VL53L5CX_Result_t *pResult)
{
 8007a0a:	b590      	push	{r4, r7, lr}
 8007a0c:	f2ad 7de4 	subw	sp, sp, #2020	; 0x7e4
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	1d3b      	adds	r3, r7, #4
 8007a14:	6018      	str	r0, [r3, #0]
 8007a16:	463b      	mov	r3, r7
 8007a18:	6019      	str	r1, [r3, #0]
  uint8_t i, j;
  uint8_t resolution;
  uint8_t target_status;
  VL53L5CX_ResultsData data;

  if ((pObj == NULL) || (pResult == NULL))
 8007a1a:	1d3b      	adds	r3, r7, #4
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <vl53l5cx_get_result+0x20>
 8007a22:	463b      	mov	r3, r7
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d104      	bne.n	8007a34 <vl53l5cx_get_result+0x2a>
  {
    ret = VL53L5CX_INVALID_PARAM;
 8007a2a:	f06f 0301 	mvn.w	r3, #1
 8007a2e:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8007a32:	e107      	b.n	8007c44 <vl53l5cx_get_result+0x23a>
  }
  else if (vl53l5cx_get_resolution(&pObj->Dev, &resolution) != VL53L5CX_STATUS_OK)
 8007a34:	1d3b      	adds	r3, r7, #4
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3318      	adds	r3, #24
 8007a3a:	f507 62fb 	add.w	r2, r7, #2008	; 0x7d8
 8007a3e:	4611      	mov	r1, r2
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fe11 	bl	8006668 <vl53l5cx_get_resolution>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <vl53l5cx_get_result+0x4c>
  {
    ret = VL53L5CX_ERROR;
 8007a4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a50:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8007a54:	e0f6      	b.n	8007c44 <vl53l5cx_get_result+0x23a>
  }
  else if (vl53l5cx_get_ranging_data(&pObj->Dev, &data) != VL53L5CX_STATUS_OK)
 8007a56:	1d3b      	adds	r3, r7, #4
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3318      	adds	r3, #24
 8007a5c:	f107 020c 	add.w	r2, r7, #12
 8007a60:	4611      	mov	r1, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fc32 	bl	80062cc <vl53l5cx_get_ranging_data>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d004      	beq.n	8007a78 <vl53l5cx_get_result+0x6e>
  {
    ret = VL53L5CX_ERROR;
 8007a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a72:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8007a76:	e0e5      	b.n	8007c44 <vl53l5cx_get_result+0x23a>
  }
  else
  {
    pResult->NumberOfZones = resolution;
 8007a78:	f897 37d8 	ldrb.w	r3, [r7, #2008]	; 0x7d8
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	463b      	mov	r3, r7
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	601a      	str	r2, [r3, #0]

    for (i = 0; i < resolution; i++)
 8007a84:	2300      	movs	r3, #0
 8007a86:	f887 37db 	strb.w	r3, [r7, #2011]	; 0x7db
 8007a8a:	e0d1      	b.n	8007c30 <vl53l5cx_get_result+0x226>
    {
      pResult->ZoneResult[i].NumberOfTargets = data.nb_target_detected[i];
 8007a8c:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8007a90:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007a94:	f107 010c 	add.w	r1, r7, #12
 8007a98:	440b      	add	r3, r1
 8007a9a:	f893 0100 	ldrb.w	r0, [r3, #256]	; 0x100
 8007a9e:	463b      	mov	r3, r7
 8007aa0:	6819      	ldr	r1, [r3, #0]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	00db      	lsls	r3, r3, #3
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3304      	adds	r3, #4
 8007aae:	4602      	mov	r2, r0
 8007ab0:	701a      	strb	r2, [r3, #0]

      for (j = 0; j < data.nb_target_detected[i]; j++)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	f887 37da 	strb.w	r3, [r7, #2010]	; 0x7da
 8007ab8:	e0a9      	b.n	8007c0e <vl53l5cx_get_result+0x204>
      {
        pResult->ZoneResult[i].Distance[j] = (uint32_t)data.distance_mm[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8007aba:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8007abe:	005a      	lsls	r2, r3, #1
 8007ac0:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 8007ac4:	441a      	add	r2, r3
 8007ac6:	f107 030c 	add.w	r3, r7, #12
 8007aca:	f502 7228 	add.w	r2, r2, #672	; 0x2a0
 8007ace:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8007ad2:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007ad6:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8007ada:	461c      	mov	r4, r3
 8007adc:	463b      	mov	r3, r7
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	4413      	add	r3, r2
 8007ae6:	4403      	add	r3, r0
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	440b      	add	r3, r1
 8007aec:	609c      	str	r4, [r3, #8]

        /* return Ambient value if ambient rate output is enabled */
        if (pObj->IsAmbientEnabled == 1U)
 8007aee:	1d3b      	adds	r3, r7, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f893 3d4c 	ldrb.w	r3, [r3, #3404]	; 0xd4c
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d11a      	bne.n	8007b30 <vl53l5cx_get_result+0x126>
        {
          /* apply ambient value to all targets in a given zone */
          pResult->ZoneResult[i].Ambient[j] = (float_t)data.ambient_per_spad[i];
 8007afa:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007afe:	f107 030c 	add.w	r3, r7, #12
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007b0a:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8007b0e:	ee07 3a90 	vmov	s15, r3
 8007b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b16:	463b      	mov	r3, r7
 8007b18:	6819      	ldr	r1, [r3, #0]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	4413      	add	r3, r2
 8007b20:	4403      	add	r3, r0
 8007b22:	3304      	adds	r3, #4
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	440b      	add	r3, r1
 8007b28:	3308      	adds	r3, #8
 8007b2a:	edc3 7a00 	vstr	s15, [r3]
 8007b2e:	e010      	b.n	8007b52 <vl53l5cx_get_result+0x148>
        }
        else
        {
          pResult->ZoneResult[i].Ambient[j] = 0.0f;
 8007b30:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007b34:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8007b38:	463b      	mov	r3, r7
 8007b3a:	6819      	ldr	r1, [r3, #0]
 8007b3c:	4613      	mov	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4413      	add	r3, r2
 8007b42:	4403      	add	r3, r0
 8007b44:	3304      	adds	r3, #4
 8007b46:	009b      	lsls	r3, r3, #2
 8007b48:	440b      	add	r3, r1
 8007b4a:	3308      	adds	r3, #8
 8007b4c:	f04f 0200 	mov.w	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]
        }

        /* return Signal value if signal rate output is enabled */
        if (pObj->IsSignalEnabled == 1U)
 8007b52:	1d3b      	adds	r3, r7, #4
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f893 3d4d 	ldrb.w	r3, [r3, #3405]	; 0xd4d
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d11f      	bne.n	8007b9e <vl53l5cx_get_result+0x194>
        {
          pResult->ZoneResult[i].Signal[j] =
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8007b5e:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8007b62:	005a      	lsls	r2, r3, #1
 8007b64:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 8007b68:	441a      	add	r2, r3
 8007b6a:	f107 030c 	add.w	r3, r7, #12
 8007b6e:	3290      	adds	r2, #144	; 0x90
 8007b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
          pResult->ZoneResult[i].Signal[j] =
 8007b74:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007b78:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
            (float_t)data.signal_per_spad[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8007b7c:	ee07 3a90 	vmov	s15, r3
 8007b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
          pResult->ZoneResult[i].Signal[j] =
 8007b84:	463b      	mov	r3, r7
 8007b86:	6819      	ldr	r1, [r3, #0]
 8007b88:	4613      	mov	r3, r2
 8007b8a:	00db      	lsls	r3, r3, #3
 8007b8c:	4413      	add	r3, r2
 8007b8e:	4403      	add	r3, r0
 8007b90:	3306      	adds	r3, #6
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	440b      	add	r3, r1
 8007b96:	3308      	adds	r3, #8
 8007b98:	edc3 7a00 	vstr	s15, [r3]
 8007b9c:	e010      	b.n	8007bc0 <vl53l5cx_get_result+0x1b6>
        }
        else
        {
          pResult->ZoneResult[i].Signal[j] = 0.0f;
 8007b9e:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007ba2:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8007ba6:	463b      	mov	r3, r7
 8007ba8:	6819      	ldr	r1, [r3, #0]
 8007baa:	4613      	mov	r3, r2
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	4413      	add	r3, r2
 8007bb0:	4403      	add	r3, r0
 8007bb2:	3306      	adds	r3, #6
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	440b      	add	r3, r1
 8007bb8:	3308      	adds	r3, #8
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]
        }

        target_status = data.target_status[(VL53L5CX_NB_TARGET_PER_ZONE * i) + j];
 8007bc0:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8007bc4:	005a      	lsls	r2, r3, #1
 8007bc6:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 8007bca:	4413      	add	r3, r2
 8007bcc:	f107 020c 	add.w	r2, r7, #12
 8007bd0:	4413      	add	r3, r2
 8007bd2:	f893 36c0 	ldrb.w	r3, [r3, #1728]	; 0x6c0
 8007bd6:	f887 37d9 	strb.w	r3, [r7, #2009]	; 0x7d9
        pResult->ZoneResult[i].Status[j] = vl53l5cx_map_target_status(target_status);
 8007bda:	f897 37d9 	ldrb.w	r3, [r7, #2009]	; 0x7d9
 8007bde:	4618      	mov	r0, r3
 8007be0:	f000 f837 	bl	8007c52 <vl53l5cx_map_target_status>
 8007be4:	4603      	mov	r3, r0
 8007be6:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007bea:	f897 07da 	ldrb.w	r0, [r7, #2010]	; 0x7da
 8007bee:	461c      	mov	r4, r3
 8007bf0:	463b      	mov	r3, r7
 8007bf2:	6819      	ldr	r1, [r3, #0]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	00db      	lsls	r3, r3, #3
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4403      	add	r3, r0
 8007bfc:	3302      	adds	r3, #2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	440b      	add	r3, r1
 8007c02:	609c      	str	r4, [r3, #8]
      for (j = 0; j < data.nb_target_detected[i]; j++)
 8007c04:	f897 37da 	ldrb.w	r3, [r7, #2010]	; 0x7da
 8007c08:	3301      	adds	r3, #1
 8007c0a:	f887 37da 	strb.w	r3, [r7, #2010]	; 0x7da
 8007c0e:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8007c12:	f107 020c 	add.w	r2, r7, #12
 8007c16:	4413      	add	r3, r2
 8007c18:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8007c1c:	f897 27da 	ldrb.w	r2, [r7, #2010]	; 0x7da
 8007c20:	429a      	cmp	r2, r3
 8007c22:	f4ff af4a 	bcc.w	8007aba <vl53l5cx_get_result+0xb0>
    for (i = 0; i < resolution; i++)
 8007c26:	f897 37db 	ldrb.w	r3, [r7, #2011]	; 0x7db
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	f887 37db 	strb.w	r3, [r7, #2011]	; 0x7db
 8007c30:	f897 37d8 	ldrb.w	r3, [r7, #2008]	; 0x7d8
 8007c34:	f897 27db 	ldrb.w	r2, [r7, #2011]	; 0x7db
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	f4ff af27 	bcc.w	8007a8c <vl53l5cx_get_result+0x82>
      }
    }

    ret = VL53L5CX_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
  }

  return ret;
 8007c44:	f8d7 37dc 	ldr.w	r3, [r7, #2012]	; 0x7dc
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f207 77e4 	addw	r7, r7, #2020	; 0x7e4
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd90      	pop	{r4, r7, pc}

08007c52 <vl53l5cx_map_target_status>:

static uint8_t vl53l5cx_map_target_status(uint8_t status)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	4603      	mov	r3, r0
 8007c5a:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  if ((status == 5U) || (status == 9U))
 8007c5c:	79fb      	ldrb	r3, [r7, #7]
 8007c5e:	2b05      	cmp	r3, #5
 8007c60:	d002      	beq.n	8007c68 <vl53l5cx_map_target_status+0x16>
 8007c62:	79fb      	ldrb	r3, [r7, #7]
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d102      	bne.n	8007c6e <vl53l5cx_map_target_status+0x1c>
  {
    ret = 0U; /* ranging is OK */
 8007c68:	2300      	movs	r3, #0
 8007c6a:	73fb      	strb	r3, [r7, #15]
 8007c6c:	e007      	b.n	8007c7e <vl53l5cx_map_target_status+0x2c>
  }
  else if (status == 0U)
 8007c6e:	79fb      	ldrb	r3, [r7, #7]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <vl53l5cx_map_target_status+0x28>
  {
    ret = 255U; /* no update */
 8007c74:	23ff      	movs	r3, #255	; 0xff
 8007c76:	73fb      	strb	r3, [r7, #15]
 8007c78:	e001      	b.n	8007c7e <vl53l5cx_map_target_status+0x2c>
  }
  else
  {
    ret = status; /* return device status otherwise */
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007c90:	4b0e      	ldr	r3, [pc, #56]	; (8007ccc <HAL_Init+0x40>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a0d      	ldr	r2, [pc, #52]	; (8007ccc <HAL_Init+0x40>)
 8007c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <HAL_Init+0x40>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <HAL_Init+0x40>)
 8007ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007ca8:	4b08      	ldr	r3, [pc, #32]	; (8007ccc <HAL_Init+0x40>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a07      	ldr	r2, [pc, #28]	; (8007ccc <HAL_Init+0x40>)
 8007cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007cb4:	2003      	movs	r0, #3
 8007cb6:	f000 f94f 	bl	8007f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007cba:	2000      	movs	r0, #0
 8007cbc:	f000 f808 	bl	8007cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007cc0:	f7fc f9de 	bl	8004080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40023c00 	.word	0x40023c00

08007cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007cd8:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <HAL_InitTick+0x54>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <HAL_InitTick+0x58>)
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 f967 	bl	8007fc2 <HAL_SYSTICK_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e00e      	b.n	8007d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b0f      	cmp	r3, #15
 8007d02:	d80a      	bhi.n	8007d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007d04:	2200      	movs	r2, #0
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d0c:	f000 f92f 	bl	8007f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007d10:	4a06      	ldr	r2, [pc, #24]	; (8007d2c <HAL_InitTick+0x5c>)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e000      	b.n	8007d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	20000004 	.word	0x20000004
 8007d28:	20000044 	.word	0x20000044
 8007d2c:	20000040 	.word	0x20000040

08007d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d30:	b480      	push	{r7}
 8007d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d34:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <HAL_IncTick+0x20>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	461a      	mov	r2, r3
 8007d3a:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <HAL_IncTick+0x24>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4413      	add	r3, r2
 8007d40:	4a04      	ldr	r2, [pc, #16]	; (8007d54 <HAL_IncTick+0x24>)
 8007d42:	6013      	str	r3, [r2, #0]
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	20000044 	.word	0x20000044
 8007d54:	200054d8 	.word	0x200054d8

08007d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8007d5c:	4b03      	ldr	r3, [pc, #12]	; (8007d6c <HAL_GetTick+0x14>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	200054d8 	.word	0x200054d8

08007d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007d78:	f7ff ffee 	bl	8007d58 <HAL_GetTick>
 8007d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d88:	d005      	beq.n	8007d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007d8a:	4b0a      	ldr	r3, [pc, #40]	; (8007db4 <HAL_Delay+0x44>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	4413      	add	r3, r2
 8007d94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007d96:	bf00      	nop
 8007d98:	f7ff ffde 	bl	8007d58 <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d8f7      	bhi.n	8007d98 <HAL_Delay+0x28>
  {
  }
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	20000044 	.word	0x20000044

08007db8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f003 0307 	and.w	r3, r3, #7
 8007dc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dc8:	4b0c      	ldr	r3, [pc, #48]	; (8007dfc <__NVIC_SetPriorityGrouping+0x44>)
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dce:	68ba      	ldr	r2, [r7, #8]
 8007dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007de0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007de8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dea:	4a04      	ldr	r2, [pc, #16]	; (8007dfc <__NVIC_SetPriorityGrouping+0x44>)
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	60d3      	str	r3, [r2, #12]
}
 8007df0:	bf00      	nop
 8007df2:	3714      	adds	r7, #20
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr
 8007dfc:	e000ed00 	.word	0xe000ed00

08007e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e04:	4b04      	ldr	r3, [pc, #16]	; (8007e18 <__NVIC_GetPriorityGrouping+0x18>)
 8007e06:	68db      	ldr	r3, [r3, #12]
 8007e08:	0a1b      	lsrs	r3, r3, #8
 8007e0a:	f003 0307 	and.w	r3, r3, #7
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr
 8007e18:	e000ed00 	.word	0xe000ed00

08007e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	b083      	sub	sp, #12
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4603      	mov	r3, r0
 8007e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	db0b      	blt.n	8007e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e2e:	79fb      	ldrb	r3, [r7, #7]
 8007e30:	f003 021f 	and.w	r2, r3, #31
 8007e34:	4907      	ldr	r1, [pc, #28]	; (8007e54 <__NVIC_EnableIRQ+0x38>)
 8007e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	e000e100 	.word	0xe000e100

08007e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	4603      	mov	r3, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	db0a      	blt.n	8007e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	490c      	ldr	r1, [pc, #48]	; (8007ea4 <__NVIC_SetPriority+0x4c>)
 8007e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e76:	0112      	lsls	r2, r2, #4
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	440b      	add	r3, r1
 8007e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e80:	e00a      	b.n	8007e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	b2da      	uxtb	r2, r3
 8007e86:	4908      	ldr	r1, [pc, #32]	; (8007ea8 <__NVIC_SetPriority+0x50>)
 8007e88:	79fb      	ldrb	r3, [r7, #7]
 8007e8a:	f003 030f 	and.w	r3, r3, #15
 8007e8e:	3b04      	subs	r3, #4
 8007e90:	0112      	lsls	r2, r2, #4
 8007e92:	b2d2      	uxtb	r2, r2
 8007e94:	440b      	add	r3, r1
 8007e96:	761a      	strb	r2, [r3, #24]
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr
 8007ea4:	e000e100 	.word	0xe000e100
 8007ea8:	e000ed00 	.word	0xe000ed00

08007eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b089      	sub	sp, #36	; 0x24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f003 0307 	and.w	r3, r3, #7
 8007ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	f1c3 0307 	rsb	r3, r3, #7
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	bf28      	it	cs
 8007eca:	2304      	movcs	r3, #4
 8007ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	2b06      	cmp	r3, #6
 8007ed4:	d902      	bls.n	8007edc <NVIC_EncodePriority+0x30>
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	3b03      	subs	r3, #3
 8007eda:	e000      	b.n	8007ede <NVIC_EncodePriority+0x32>
 8007edc:	2300      	movs	r3, #0
 8007ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	43da      	mvns	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	401a      	ands	r2, r3
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	fa01 f303 	lsl.w	r3, r1, r3
 8007efe:	43d9      	mvns	r1, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f04:	4313      	orrs	r3, r2
         );
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3724      	adds	r7, #36	; 0x24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
	...

08007f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b082      	sub	sp, #8
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3b01      	subs	r3, #1
 8007f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f24:	d301      	bcc.n	8007f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f26:	2301      	movs	r3, #1
 8007f28:	e00f      	b.n	8007f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f2a:	4a0a      	ldr	r2, [pc, #40]	; (8007f54 <SysTick_Config+0x40>)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007f32:	210f      	movs	r1, #15
 8007f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f38:	f7ff ff8e 	bl	8007e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007f3c:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <SysTick_Config+0x40>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007f42:	4b04      	ldr	r3, [pc, #16]	; (8007f54 <SysTick_Config+0x40>)
 8007f44:	2207      	movs	r2, #7
 8007f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3708      	adds	r7, #8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	e000e010 	.word	0xe000e010

08007f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff ff29 	bl	8007db8 <__NVIC_SetPriorityGrouping>
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	4603      	mov	r3, r0
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f80:	f7ff ff3e 	bl	8007e00 <__NVIC_GetPriorityGrouping>
 8007f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	6978      	ldr	r0, [r7, #20]
 8007f8c:	f7ff ff8e 	bl	8007eac <NVIC_EncodePriority>
 8007f90:	4602      	mov	r2, r0
 8007f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f96:	4611      	mov	r1, r2
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7ff ff5d 	bl	8007e58 <__NVIC_SetPriority>
}
 8007f9e:	bf00      	nop
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b082      	sub	sp, #8
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4603      	mov	r3, r0
 8007fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff ff31 	bl	8007e1c <__NVIC_EnableIRQ>
}
 8007fba:	bf00      	nop
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f7ff ffa2 	bl	8007f14 <SysTick_Config>
 8007fd0:	4603      	mov	r3, r0
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
	...

08007fdc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007fe8:	f7ff feb6 	bl	8007d58 <HAL_GetTick>
 8007fec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e099      	b.n	800812c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2202      	movs	r2, #2
 8007ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 0201 	bic.w	r2, r2, #1
 8008016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008018:	e00f      	b.n	800803a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800801a:	f7ff fe9d 	bl	8007d58 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b05      	cmp	r3, #5
 8008026:	d908      	bls.n	800803a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2220      	movs	r2, #32
 800802c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2203      	movs	r2, #3
 8008032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e078      	b.n	800812c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0301 	and.w	r3, r3, #1
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e8      	bne.n	800801a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	4b38      	ldr	r3, [pc, #224]	; (8008134 <HAL_DMA_Init+0x158>)
 8008054:	4013      	ands	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800807e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b04      	cmp	r3, #4
 8008092:	d107      	bne.n	80080a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	4313      	orrs	r3, r2
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	695b      	ldr	r3, [r3, #20]
 80080b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	f023 0307 	bic.w	r3, r3, #7
 80080ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ca:	2b04      	cmp	r3, #4
 80080cc:	d117      	bne.n	80080fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00e      	beq.n	80080fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fb01 	bl	80086e8 <DMA_CheckFifoParam>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d008      	beq.n	80080fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2240      	movs	r2, #64	; 0x40
 80080f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80080fa:	2301      	movs	r3, #1
 80080fc:	e016      	b.n	800812c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	697a      	ldr	r2, [r7, #20]
 8008104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fab8 	bl	800867c <DMA_CalcBaseAndBitshift>
 800810c:	4603      	mov	r3, r0
 800810e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008114:	223f      	movs	r2, #63	; 0x3f
 8008116:	409a      	lsls	r2, r3
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3718      	adds	r7, #24
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	f010803f 	.word	0xf010803f

08008138 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	60b9      	str	r1, [r7, #8]
 8008142:	607a      	str	r2, [r7, #4]
 8008144:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008156:	2b01      	cmp	r3, #1
 8008158:	d101      	bne.n	800815e <HAL_DMA_Start_IT+0x26>
 800815a:	2302      	movs	r3, #2
 800815c:	e040      	b.n	80081e0 <HAL_DMA_Start_IT+0xa8>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800816c:	b2db      	uxtb	r3, r3
 800816e:	2b01      	cmp	r3, #1
 8008170:	d12f      	bne.n	80081d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	68b9      	ldr	r1, [r7, #8]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 fa4a 	bl	8008620 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008190:	223f      	movs	r2, #63	; 0x3f
 8008192:	409a      	lsls	r2, r3
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0216 	orr.w	r2, r2, #22
 80081a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0208 	orr.w	r2, r2, #8
 80081be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e005      	b.n	80081de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80081da:	2302      	movs	r3, #2
 80081dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80081f6:	f7ff fdaf 	bl	8007d58 <HAL_GetTick>
 80081fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d008      	beq.n	800821a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e052      	b.n	80082c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0216 	bic.w	r2, r2, #22
 8008228:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695a      	ldr	r2, [r3, #20]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008238:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <HAL_DMA_Abort+0x62>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0208 	bic.w	r2, r2, #8
 8008258:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800826a:	e013      	b.n	8008294 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800826c:	f7ff fd74 	bl	8007d58 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b05      	cmp	r3, #5
 8008278:	d90c      	bls.n	8008294 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2203      	movs	r2, #3
 8008284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e015      	b.n	80082c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e4      	bne.n	800826c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a6:	223f      	movs	r2, #63	; 0x3f
 80082a8:	409a      	lsls	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d004      	beq.n	80082e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e00c      	b.n	8008300 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2205      	movs	r2, #5
 80082ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008318:	4b92      	ldr	r3, [pc, #584]	; (8008564 <HAL_DMA_IRQHandler+0x258>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a92      	ldr	r2, [pc, #584]	; (8008568 <HAL_DMA_IRQHandler+0x25c>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	0a9b      	lsrs	r3, r3, #10
 8008324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008336:	2208      	movs	r2, #8
 8008338:	409a      	lsls	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01a      	beq.n	8008378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d013      	beq.n	8008378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0204 	bic.w	r2, r2, #4
 800835e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008364:	2208      	movs	r2, #8
 8008366:	409a      	lsls	r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008370:	f043 0201 	orr.w	r2, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837c:	2201      	movs	r2, #1
 800837e:	409a      	lsls	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d012      	beq.n	80083ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00b      	beq.n	80083ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839a:	2201      	movs	r2, #1
 800839c:	409a      	lsls	r2, r3
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	f043 0202 	orr.w	r2, r3, #2
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	2204      	movs	r2, #4
 80083b4:	409a      	lsls	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d012      	beq.n	80083e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d0:	2204      	movs	r2, #4
 80083d2:	409a      	lsls	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	f043 0204 	orr.w	r2, r3, #4
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e8:	2210      	movs	r2, #16
 80083ea:	409a      	lsls	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4013      	ands	r3, r2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d043      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d03c      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008406:	2210      	movs	r2, #16
 8008408:	409a      	lsls	r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d018      	beq.n	800844e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d108      	bne.n	800843c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d024      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
 800843a:	e01f      	b.n	800847c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01b      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
 800844c:	e016      	b.n	800847c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008458:	2b00      	cmp	r3, #0
 800845a:	d107      	bne.n	800846c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0208 	bic.w	r2, r2, #8
 800846a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008480:	2220      	movs	r2, #32
 8008482:	409a      	lsls	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4013      	ands	r3, r2
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 808e 	beq.w	80085aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8086 	beq.w	80085aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a2:	2220      	movs	r2, #32
 80084a4:	409a      	lsls	r2, r3
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d136      	bne.n	8008524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0216 	bic.w	r2, r2, #22
 80084c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <HAL_DMA_IRQHandler+0x1da>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0208 	bic.w	r2, r2, #8
 80084f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fa:	223f      	movs	r2, #63	; 0x3f
 80084fc:	409a      	lsls	r2, r3
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	2b00      	cmp	r3, #0
 8008518:	d07d      	beq.n	8008616 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
        }
        return;
 8008522:	e078      	b.n	8008616 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01c      	beq.n	800856c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d108      	bne.n	8008552 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008544:	2b00      	cmp	r3, #0
 8008546:	d030      	beq.n	80085aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	e02b      	b.n	80085aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d027      	beq.n	80085aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
 8008562:	e022      	b.n	80085aa <HAL_DMA_IRQHandler+0x29e>
 8008564:	20000004 	.word	0x20000004
 8008568:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10f      	bne.n	800859a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0210 	bic.w	r2, r2, #16
 8008588:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d032      	beq.n	8008618 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d022      	beq.n	8008604 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2205      	movs	r2, #5
 80085c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0201 	bic.w	r2, r2, #1
 80085d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	3301      	adds	r3, #1
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d307      	bcc.n	80085f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f2      	bne.n	80085d6 <HAL_DMA_IRQHandler+0x2ca>
 80085f0:	e000      	b.n	80085f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80085f2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2201      	movs	r2, #1
 80085f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
 8008614:	e000      	b.n	8008618 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008616:	bf00      	nop
    }
  }
}
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop

08008620 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681a      	ldr	r2, [r3, #0]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800863c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b40      	cmp	r3, #64	; 0x40
 800864c:	d108      	bne.n	8008660 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800865e:	e007      	b.n	8008670 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	60da      	str	r2, [r3, #12]
}
 8008670:	bf00      	nop
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	b2db      	uxtb	r3, r3
 800868a:	3b10      	subs	r3, #16
 800868c:	4a14      	ldr	r2, [pc, #80]	; (80086e0 <DMA_CalcBaseAndBitshift+0x64>)
 800868e:	fba2 2303 	umull	r2, r3, r2, r3
 8008692:	091b      	lsrs	r3, r3, #4
 8008694:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008696:	4a13      	ldr	r2, [pc, #76]	; (80086e4 <DMA_CalcBaseAndBitshift+0x68>)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	4413      	add	r3, r2
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b03      	cmp	r3, #3
 80086a8:	d909      	bls.n	80086be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	1d1a      	adds	r2, r3, #4
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	659a      	str	r2, [r3, #88]	; 0x58
 80086bc:	e007      	b.n	80086ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80086c6:	f023 0303 	bic.w	r3, r3, #3
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	aaaaaaab 	.word	0xaaaaaaab
 80086e4:	08021a94 	.word	0x08021a94

080086e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086f0:	2300      	movs	r3, #0
 80086f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	699b      	ldr	r3, [r3, #24]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d11f      	bne.n	8008742 <DMA_CheckFifoParam+0x5a>
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	2b03      	cmp	r3, #3
 8008706:	d856      	bhi.n	80087b6 <DMA_CheckFifoParam+0xce>
 8008708:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <DMA_CheckFifoParam+0x28>)
 800870a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800870e:	bf00      	nop
 8008710:	08008721 	.word	0x08008721
 8008714:	08008733 	.word	0x08008733
 8008718:	08008721 	.word	0x08008721
 800871c:	080087b7 	.word	0x080087b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008728:	2b00      	cmp	r3, #0
 800872a:	d046      	beq.n	80087ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800872c:	2301      	movs	r3, #1
 800872e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008730:	e043      	b.n	80087ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008736:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800873a:	d140      	bne.n	80087be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008740:	e03d      	b.n	80087be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	699b      	ldr	r3, [r3, #24]
 8008746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800874a:	d121      	bne.n	8008790 <DMA_CheckFifoParam+0xa8>
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2b03      	cmp	r3, #3
 8008750:	d837      	bhi.n	80087c2 <DMA_CheckFifoParam+0xda>
 8008752:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <DMA_CheckFifoParam+0x70>)
 8008754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008758:	08008769 	.word	0x08008769
 800875c:	0800876f 	.word	0x0800876f
 8008760:	08008769 	.word	0x08008769
 8008764:	08008781 	.word	0x08008781
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008768:	2301      	movs	r3, #1
 800876a:	73fb      	strb	r3, [r7, #15]
      break;
 800876c:	e030      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d025      	beq.n	80087c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800877a:	2301      	movs	r3, #1
 800877c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800877e:	e022      	b.n	80087c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008788:	d11f      	bne.n	80087ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800878a:	2301      	movs	r3, #1
 800878c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800878e:	e01c      	b.n	80087ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d903      	bls.n	800879e <DMA_CheckFifoParam+0xb6>
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d003      	beq.n	80087a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800879c:	e018      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	73fb      	strb	r3, [r7, #15]
      break;
 80087a2:	e015      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00e      	beq.n	80087ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	73fb      	strb	r3, [r7, #15]
      break;
 80087b4:	e00b      	b.n	80087ce <DMA_CheckFifoParam+0xe6>
      break;
 80087b6:	bf00      	nop
 80087b8:	e00a      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      break;
 80087ba:	bf00      	nop
 80087bc:	e008      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      break;
 80087be:	bf00      	nop
 80087c0:	e006      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      break;
 80087c2:	bf00      	nop
 80087c4:	e004      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      break;
 80087c6:	bf00      	nop
 80087c8:	e002      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80087ca:	bf00      	nop
 80087cc:	e000      	b.n	80087d0 <DMA_CheckFifoParam+0xe8>
      break;
 80087ce:	bf00      	nop
    }
  } 
  
  return status; 
 80087d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3714      	adds	r7, #20
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop

080087e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b089      	sub	sp, #36	; 0x24
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80087ea:	2300      	movs	r3, #0
 80087ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80087ee:	2300      	movs	r3, #0
 80087f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087f6:	2300      	movs	r3, #0
 80087f8:	61fb      	str	r3, [r7, #28]
 80087fa:	e159      	b.n	8008ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80087fc:	2201      	movs	r2, #1
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	fa02 f303 	lsl.w	r3, r2, r3
 8008804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	697a      	ldr	r2, [r7, #20]
 800880c:	4013      	ands	r3, r2
 800880e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	429a      	cmp	r2, r3
 8008816:	f040 8148 	bne.w	8008aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	2b01      	cmp	r3, #1
 8008824:	d005      	beq.n	8008832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685b      	ldr	r3, [r3, #4]
 800882a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800882e:	2b02      	cmp	r3, #2
 8008830:	d130      	bne.n	8008894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008838:	69fb      	ldr	r3, [r7, #28]
 800883a:	005b      	lsls	r3, r3, #1
 800883c:	2203      	movs	r2, #3
 800883e:	fa02 f303 	lsl.w	r3, r2, r3
 8008842:	43db      	mvns	r3, r3
 8008844:	69ba      	ldr	r2, [r7, #24]
 8008846:	4013      	ands	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	005b      	lsls	r3, r3, #1
 8008852:	fa02 f303 	lsl.w	r3, r2, r3
 8008856:	69ba      	ldr	r2, [r7, #24]
 8008858:	4313      	orrs	r3, r2
 800885a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69ba      	ldr	r2, [r7, #24]
 8008860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008868:	2201      	movs	r2, #1
 800886a:	69fb      	ldr	r3, [r7, #28]
 800886c:	fa02 f303 	lsl.w	r3, r2, r3
 8008870:	43db      	mvns	r3, r3
 8008872:	69ba      	ldr	r2, [r7, #24]
 8008874:	4013      	ands	r3, r2
 8008876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	091b      	lsrs	r3, r3, #4
 800887e:	f003 0201 	and.w	r2, r3, #1
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	fa02 f303 	lsl.w	r3, r2, r3
 8008888:	69ba      	ldr	r2, [r7, #24]
 800888a:	4313      	orrs	r3, r2
 800888c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	69ba      	ldr	r2, [r7, #24]
 8008892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	f003 0303 	and.w	r3, r3, #3
 800889c:	2b03      	cmp	r3, #3
 800889e:	d017      	beq.n	80088d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	005b      	lsls	r3, r3, #1
 80088aa:	2203      	movs	r2, #3
 80088ac:	fa02 f303 	lsl.w	r3, r2, r3
 80088b0:	43db      	mvns	r3, r3
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	4013      	ands	r3, r2
 80088b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	005b      	lsls	r3, r3, #1
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	4313      	orrs	r3, r2
 80088c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	69ba      	ldr	r2, [r7, #24]
 80088ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	d123      	bne.n	8008924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80088dc:	69fb      	ldr	r3, [r7, #28]
 80088de:	08da      	lsrs	r2, r3, #3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3208      	adds	r2, #8
 80088e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	f003 0307 	and.w	r3, r3, #7
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	220f      	movs	r2, #15
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	43db      	mvns	r3, r3
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	4013      	ands	r3, r2
 80088fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f003 0307 	and.w	r3, r3, #7
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	4313      	orrs	r3, r2
 8008914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	08da      	lsrs	r2, r3, #3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3208      	adds	r2, #8
 800891e:	69b9      	ldr	r1, [r7, #24]
 8008920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	2203      	movs	r2, #3
 8008930:	fa02 f303 	lsl.w	r3, r2, r3
 8008934:	43db      	mvns	r3, r3
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	4013      	ands	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	685b      	ldr	r3, [r3, #4]
 8008940:	f003 0203 	and.w	r2, r3, #3
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	69ba      	ldr	r2, [r7, #24]
 800894e:	4313      	orrs	r3, r2
 8008950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 80a2 	beq.w	8008aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008966:	2300      	movs	r3, #0
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	4b57      	ldr	r3, [pc, #348]	; (8008ac8 <HAL_GPIO_Init+0x2e8>)
 800896c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800896e:	4a56      	ldr	r2, [pc, #344]	; (8008ac8 <HAL_GPIO_Init+0x2e8>)
 8008970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008974:	6453      	str	r3, [r2, #68]	; 0x44
 8008976:	4b54      	ldr	r3, [pc, #336]	; (8008ac8 <HAL_GPIO_Init+0x2e8>)
 8008978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800897a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800897e:	60fb      	str	r3, [r7, #12]
 8008980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008982:	4a52      	ldr	r2, [pc, #328]	; (8008acc <HAL_GPIO_Init+0x2ec>)
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	089b      	lsrs	r3, r3, #2
 8008988:	3302      	adds	r3, #2
 800898a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800898e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	f003 0303 	and.w	r3, r3, #3
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	220f      	movs	r2, #15
 800899a:	fa02 f303 	lsl.w	r3, r2, r3
 800899e:	43db      	mvns	r3, r3
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	4013      	ands	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a49      	ldr	r2, [pc, #292]	; (8008ad0 <HAL_GPIO_Init+0x2f0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d019      	beq.n	80089e2 <HAL_GPIO_Init+0x202>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	4a48      	ldr	r2, [pc, #288]	; (8008ad4 <HAL_GPIO_Init+0x2f4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <HAL_GPIO_Init+0x1fe>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	4a47      	ldr	r2, [pc, #284]	; (8008ad8 <HAL_GPIO_Init+0x2f8>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00d      	beq.n	80089da <HAL_GPIO_Init+0x1fa>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	4a46      	ldr	r2, [pc, #280]	; (8008adc <HAL_GPIO_Init+0x2fc>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d007      	beq.n	80089d6 <HAL_GPIO_Init+0x1f6>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4a45      	ldr	r2, [pc, #276]	; (8008ae0 <HAL_GPIO_Init+0x300>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d101      	bne.n	80089d2 <HAL_GPIO_Init+0x1f2>
 80089ce:	2304      	movs	r3, #4
 80089d0:	e008      	b.n	80089e4 <HAL_GPIO_Init+0x204>
 80089d2:	2307      	movs	r3, #7
 80089d4:	e006      	b.n	80089e4 <HAL_GPIO_Init+0x204>
 80089d6:	2303      	movs	r3, #3
 80089d8:	e004      	b.n	80089e4 <HAL_GPIO_Init+0x204>
 80089da:	2302      	movs	r3, #2
 80089dc:	e002      	b.n	80089e4 <HAL_GPIO_Init+0x204>
 80089de:	2301      	movs	r3, #1
 80089e0:	e000      	b.n	80089e4 <HAL_GPIO_Init+0x204>
 80089e2:	2300      	movs	r3, #0
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	f002 0203 	and.w	r2, r2, #3
 80089ea:	0092      	lsls	r2, r2, #2
 80089ec:	4093      	lsls	r3, r2
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089f4:	4935      	ldr	r1, [pc, #212]	; (8008acc <HAL_GPIO_Init+0x2ec>)
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	089b      	lsrs	r3, r3, #2
 80089fa:	3302      	adds	r3, #2
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a02:	4b38      	ldr	r3, [pc, #224]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	43db      	mvns	r3, r3
 8008a0c:	69ba      	ldr	r2, [r7, #24]
 8008a0e:	4013      	ands	r3, r2
 8008a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a26:	4a2f      	ldr	r2, [pc, #188]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008a2c:	4b2d      	ldr	r3, [pc, #180]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	43db      	mvns	r3, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d003      	beq.n	8008a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008a48:	69ba      	ldr	r2, [r7, #24]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008a50:	4a24      	ldr	r2, [pc, #144]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a56:	4b23      	ldr	r3, [pc, #140]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	43db      	mvns	r3, r3
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	4013      	ands	r3, r2
 8008a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d003      	beq.n	8008a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008a7a:	4a1a      	ldr	r2, [pc, #104]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008a80:	4b18      	ldr	r3, [pc, #96]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	43db      	mvns	r3, r3
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008a9c:	69ba      	ldr	r2, [r7, #24]
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008aa4:	4a0f      	ldr	r2, [pc, #60]	; (8008ae4 <HAL_GPIO_Init+0x304>)
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	3301      	adds	r3, #1
 8008aae:	61fb      	str	r3, [r7, #28]
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	2b0f      	cmp	r3, #15
 8008ab4:	f67f aea2 	bls.w	80087fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	3724      	adds	r7, #36	; 0x24
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	40023800 	.word	0x40023800
 8008acc:	40013800 	.word	0x40013800
 8008ad0:	40020000 	.word	0x40020000
 8008ad4:	40020400 	.word	0x40020400
 8008ad8:	40020800 	.word	0x40020800
 8008adc:	40020c00 	.word	0x40020c00
 8008ae0:	40021000 	.word	0x40021000
 8008ae4:	40013c00 	.word	0x40013c00

08008ae8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008af2:	2300      	movs	r3, #0
 8008af4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8008afa:	2300      	movs	r3, #0
 8008afc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	e0bb      	b.n	8008c7c <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008b04:	2201      	movs	r2, #1
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	4013      	ands	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8008b16:	68fa      	ldr	r2, [r7, #12]
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	f040 80ab 	bne.w	8008c76 <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008b20:	4a5c      	ldr	r2, [pc, #368]	; (8008c94 <HAL_GPIO_DeInit+0x1ac>)
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	089b      	lsrs	r3, r3, #2
 8008b26:	3302      	adds	r3, #2
 8008b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	f003 0303 	and.w	r3, r3, #3
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	220f      	movs	r2, #15
 8008b38:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	4013      	ands	r3, r2
 8008b40:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a54      	ldr	r2, [pc, #336]	; (8008c98 <HAL_GPIO_DeInit+0x1b0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d019      	beq.n	8008b7e <HAL_GPIO_DeInit+0x96>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a53      	ldr	r2, [pc, #332]	; (8008c9c <HAL_GPIO_DeInit+0x1b4>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d013      	beq.n	8008b7a <HAL_GPIO_DeInit+0x92>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a52      	ldr	r2, [pc, #328]	; (8008ca0 <HAL_GPIO_DeInit+0x1b8>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d00d      	beq.n	8008b76 <HAL_GPIO_DeInit+0x8e>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a51      	ldr	r2, [pc, #324]	; (8008ca4 <HAL_GPIO_DeInit+0x1bc>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d007      	beq.n	8008b72 <HAL_GPIO_DeInit+0x8a>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a50      	ldr	r2, [pc, #320]	; (8008ca8 <HAL_GPIO_DeInit+0x1c0>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d101      	bne.n	8008b6e <HAL_GPIO_DeInit+0x86>
 8008b6a:	2304      	movs	r3, #4
 8008b6c:	e008      	b.n	8008b80 <HAL_GPIO_DeInit+0x98>
 8008b6e:	2307      	movs	r3, #7
 8008b70:	e006      	b.n	8008b80 <HAL_GPIO_DeInit+0x98>
 8008b72:	2303      	movs	r3, #3
 8008b74:	e004      	b.n	8008b80 <HAL_GPIO_DeInit+0x98>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e002      	b.n	8008b80 <HAL_GPIO_DeInit+0x98>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e000      	b.n	8008b80 <HAL_GPIO_DeInit+0x98>
 8008b7e:	2300      	movs	r3, #0
 8008b80:	697a      	ldr	r2, [r7, #20]
 8008b82:	f002 0203 	and.w	r2, r2, #3
 8008b86:	0092      	lsls	r2, r2, #2
 8008b88:	4093      	lsls	r3, r2
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d132      	bne.n	8008bf6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008b90:	4b46      	ldr	r3, [pc, #280]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	43db      	mvns	r3, r3
 8008b98:	4944      	ldr	r1, [pc, #272]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008b9a:	4013      	ands	r3, r2
 8008b9c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008b9e:	4b43      	ldr	r3, [pc, #268]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	43db      	mvns	r3, r3
 8008ba6:	4941      	ldr	r1, [pc, #260]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008bac:	4b3f      	ldr	r3, [pc, #252]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008bae:	689a      	ldr	r2, [r3, #8]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	493d      	ldr	r1, [pc, #244]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008bba:	4b3c      	ldr	r3, [pc, #240]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008bbc:	68da      	ldr	r2, [r3, #12]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	493a      	ldr	r1, [pc, #232]	; (8008cac <HAL_GPIO_DeInit+0x1c4>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	220f      	movs	r2, #15
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008bd8:	4a2e      	ldr	r2, [pc, #184]	; (8008c94 <HAL_GPIO_DeInit+0x1ac>)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	089b      	lsrs	r3, r3, #2
 8008bde:	3302      	adds	r3, #2
 8008be0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	43da      	mvns	r2, r3
 8008be8:	482a      	ldr	r0, [pc, #168]	; (8008c94 <HAL_GPIO_DeInit+0x1ac>)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	089b      	lsrs	r3, r3, #2
 8008bee:	400a      	ands	r2, r1
 8008bf0:	3302      	adds	r3, #2
 8008bf2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	005b      	lsls	r3, r3, #1
 8008bfe:	2103      	movs	r1, #3
 8008c00:	fa01 f303 	lsl.w	r3, r1, r3
 8008c04:	43db      	mvns	r3, r3
 8008c06:	401a      	ands	r2, r3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	08da      	lsrs	r2, r3, #3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3208      	adds	r2, #8
 8008c14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	220f      	movs	r2, #15
 8008c22:	fa02 f303 	lsl.w	r3, r2, r3
 8008c26:	43db      	mvns	r3, r3
 8008c28:	697a      	ldr	r2, [r7, #20]
 8008c2a:	08d2      	lsrs	r2, r2, #3
 8008c2c:	4019      	ands	r1, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3208      	adds	r2, #8
 8008c32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	005b      	lsls	r3, r3, #1
 8008c3e:	2103      	movs	r1, #3
 8008c40:	fa01 f303 	lsl.w	r3, r1, r3
 8008c44:	43db      	mvns	r3, r3
 8008c46:	401a      	ands	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	2101      	movs	r1, #1
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	fa01 f303 	lsl.w	r3, r1, r3
 8008c58:	43db      	mvns	r3, r3
 8008c5a:	401a      	ands	r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	005b      	lsls	r3, r3, #1
 8008c68:	2103      	movs	r1, #3
 8008c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6e:	43db      	mvns	r3, r3
 8008c70:	401a      	ands	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	617b      	str	r3, [r7, #20]
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2b0f      	cmp	r3, #15
 8008c80:	f67f af40 	bls.w	8008b04 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop
 8008c88:	371c      	adds	r7, #28
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr
 8008c92:	bf00      	nop
 8008c94:	40013800 	.word	0x40013800
 8008c98:	40020000 	.word	0x40020000
 8008c9c:	40020400 	.word	0x40020400
 8008ca0:	40020800 	.word	0x40020800
 8008ca4:	40020c00 	.word	0x40020c00
 8008ca8:	40021000 	.word	0x40021000
 8008cac:	40013c00 	.word	0x40013c00

08008cb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	691a      	ldr	r2, [r3, #16]
 8008cc0:	887b      	ldrh	r3, [r7, #2]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d002      	beq.n	8008cce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	73fb      	strb	r3, [r7, #15]
 8008ccc:	e001      	b.n	8008cd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cce:	2300      	movs	r3, #0
 8008cd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3714      	adds	r7, #20
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b083      	sub	sp, #12
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	460b      	mov	r3, r1
 8008cea:	807b      	strh	r3, [r7, #2]
 8008cec:	4613      	mov	r3, r2
 8008cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008cf0:	787b      	ldrb	r3, [r7, #1]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cf6:	887a      	ldrh	r2, [r7, #2]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008cfc:	e003      	b.n	8008d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008cfe:	887b      	ldrh	r3, [r7, #2]
 8008d00:	041a      	lsls	r2, r3, #16
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	619a      	str	r2, [r3, #24]
}
 8008d06:	bf00      	nop
 8008d08:	370c      	adds	r7, #12
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr

08008d12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d12:	b480      	push	{r7}
 8008d14:	b085      	sub	sp, #20
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008d24:	887a      	ldrh	r2, [r7, #2]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	041a      	lsls	r2, r3, #16
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	43d9      	mvns	r1, r3
 8008d30:	887b      	ldrh	r3, [r7, #2]
 8008d32:	400b      	ands	r3, r1
 8008d34:	431a      	orrs	r2, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	619a      	str	r2, [r3, #24]
}
 8008d3a:	bf00      	nop
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
	...

08008d48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	4603      	mov	r3, r0
 8008d50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008d52:	4b08      	ldr	r3, [pc, #32]	; (8008d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d54:	695a      	ldr	r2, [r3, #20]
 8008d56:	88fb      	ldrh	r3, [r7, #6]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d006      	beq.n	8008d6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d5e:	4a05      	ldr	r2, [pc, #20]	; (8008d74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d60:	88fb      	ldrh	r3, [r7, #6]
 8008d62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d64:	88fb      	ldrh	r3, [r7, #6]
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7f7 fd66 	bl	8000838 <HAL_GPIO_EXTI_Callback>
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40013c00 	.word	0x40013c00

08008d78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d101      	bne.n	8008d8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e12b      	b.n	8008fe2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f95d 	bl	800905e <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2224      	movs	r2, #36	; 0x24
 8008da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f022 0201 	bic.w	r2, r2, #1
 8008dba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008dca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ddc:	f001 fc36 	bl	800a64c <HAL_RCC_GetPCLK1Freq>
 8008de0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	4a81      	ldr	r2, [pc, #516]	; (8008fec <HAL_I2C_Init+0x274>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d807      	bhi.n	8008dfc <HAL_I2C_Init+0x84>
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4a80      	ldr	r2, [pc, #512]	; (8008ff0 <HAL_I2C_Init+0x278>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	bf94      	ite	ls
 8008df4:	2301      	movls	r3, #1
 8008df6:	2300      	movhi	r3, #0
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	e006      	b.n	8008e0a <HAL_I2C_Init+0x92>
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	4a7d      	ldr	r2, [pc, #500]	; (8008ff4 <HAL_I2C_Init+0x27c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	bf94      	ite	ls
 8008e04:	2301      	movls	r3, #1
 8008e06:	2300      	movhi	r3, #0
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d001      	beq.n	8008e12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e0e7      	b.n	8008fe2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	4a78      	ldr	r2, [pc, #480]	; (8008ff8 <HAL_I2C_Init+0x280>)
 8008e16:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1a:	0c9b      	lsrs	r3, r3, #18
 8008e1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	68ba      	ldr	r2, [r7, #8]
 8008e2e:	430a      	orrs	r2, r1
 8008e30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	4a6a      	ldr	r2, [pc, #424]	; (8008fec <HAL_I2C_Init+0x274>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d802      	bhi.n	8008e4c <HAL_I2C_Init+0xd4>
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	e009      	b.n	8008e60 <HAL_I2C_Init+0xe8>
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008e52:	fb02 f303 	mul.w	r3, r2, r3
 8008e56:	4a69      	ldr	r2, [pc, #420]	; (8008ffc <HAL_I2C_Init+0x284>)
 8008e58:	fba2 2303 	umull	r2, r3, r2, r3
 8008e5c:	099b      	lsrs	r3, r3, #6
 8008e5e:	3301      	adds	r3, #1
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	6812      	ldr	r2, [r2, #0]
 8008e64:	430b      	orrs	r3, r1
 8008e66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	69db      	ldr	r3, [r3, #28]
 8008e6e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008e72:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	495c      	ldr	r1, [pc, #368]	; (8008fec <HAL_I2C_Init+0x274>)
 8008e7c:	428b      	cmp	r3, r1
 8008e7e:	d819      	bhi.n	8008eb4 <HAL_I2C_Init+0x13c>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1e59      	subs	r1, r3, #1
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	005b      	lsls	r3, r3, #1
 8008e8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008e94:	400b      	ands	r3, r1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00a      	beq.n	8008eb0 <HAL_I2C_Init+0x138>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	1e59      	subs	r1, r3, #1
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	005b      	lsls	r3, r3, #1
 8008ea4:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eae:	e051      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008eb0:	2304      	movs	r3, #4
 8008eb2:	e04f      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d111      	bne.n	8008ee0 <HAL_I2C_Init+0x168>
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	1e58      	subs	r0, r3, #1
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6859      	ldr	r1, [r3, #4]
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	440b      	add	r3, r1
 8008eca:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ece:	3301      	adds	r3, #1
 8008ed0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	bf0c      	ite	eq
 8008ed8:	2301      	moveq	r3, #1
 8008eda:	2300      	movne	r3, #0
 8008edc:	b2db      	uxtb	r3, r3
 8008ede:	e012      	b.n	8008f06 <HAL_I2C_Init+0x18e>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	1e58      	subs	r0, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6859      	ldr	r1, [r3, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	0099      	lsls	r1, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	bf0c      	ite	eq
 8008f00:	2301      	moveq	r3, #1
 8008f02:	2300      	movne	r3, #0
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d001      	beq.n	8008f0e <HAL_I2C_Init+0x196>
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e022      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d10e      	bne.n	8008f34 <HAL_I2C_Init+0x1bc>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	1e58      	subs	r0, r3, #1
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6859      	ldr	r1, [r3, #4]
 8008f1e:	460b      	mov	r3, r1
 8008f20:	005b      	lsls	r3, r3, #1
 8008f22:	440b      	add	r3, r1
 8008f24:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f28:	3301      	adds	r3, #1
 8008f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f32:	e00f      	b.n	8008f54 <HAL_I2C_Init+0x1dc>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	1e58      	subs	r0, r3, #1
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6859      	ldr	r1, [r3, #4]
 8008f3c:	460b      	mov	r3, r1
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	440b      	add	r3, r1
 8008f42:	0099      	lsls	r1, r3, #2
 8008f44:	440b      	add	r3, r1
 8008f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f54:	6879      	ldr	r1, [r7, #4]
 8008f56:	6809      	ldr	r1, [r1, #0]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	430a      	orrs	r2, r1
 8008f76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008f82:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	6911      	ldr	r1, [r2, #16]
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	68d2      	ldr	r2, [r2, #12]
 8008f8e:	4311      	orrs	r1, r2
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	6812      	ldr	r2, [r2, #0]
 8008f94:	430b      	orrs	r3, r1
 8008f96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	695a      	ldr	r2, [r3, #20]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	431a      	orrs	r2, r3
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	000186a0 	.word	0x000186a0
 8008ff0:	001e847f 	.word	0x001e847f
 8008ff4:	003d08ff 	.word	0x003d08ff
 8008ff8:	431bde83 	.word	0x431bde83
 8008ffc:	10624dd3 	.word	0x10624dd3

08009000 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	e021      	b.n	8009056 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2224      	movs	r2, #36	; 0x24
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f022 0201 	bic.w	r2, r2, #1
 8009028:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f821 	bl	8009072 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3708      	adds	r7, #8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800905e:	b480      	push	{r7}
 8009060:	b083      	sub	sp, #12
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8009066:	bf00      	nop
 8009068:	370c      	adds	r7, #12
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr

08009072 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009072:	b480      	push	{r7}
 8009074:	b083      	sub	sp, #12
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800907a:	bf00      	nop
 800907c:	370c      	adds	r7, #12
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr
	...

08009088 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b088      	sub	sp, #32
 800908c:	af02      	add	r7, sp, #8
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	461a      	mov	r2, r3
 8009096:	4603      	mov	r3, r0
 8009098:	817b      	strh	r3, [r7, #10]
 800909a:	460b      	mov	r3, r1
 800909c:	813b      	strh	r3, [r7, #8]
 800909e:	4613      	mov	r3, r2
 80090a0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090a2:	f7fe fe59 	bl	8007d58 <HAL_GetTick>
 80090a6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	2b20      	cmp	r3, #32
 80090b2:	f040 80d9 	bne.w	8009268 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	9300      	str	r3, [sp, #0]
 80090ba:	2319      	movs	r3, #25
 80090bc:	2201      	movs	r2, #1
 80090be:	496d      	ldr	r1, [pc, #436]	; (8009274 <HAL_I2C_Mem_Write+0x1ec>)
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fc99 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d001      	beq.n	80090d0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80090cc:	2302      	movs	r3, #2
 80090ce:	e0cc      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_I2C_Mem_Write+0x56>
 80090da:	2302      	movs	r3, #2
 80090dc:	e0c5      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d007      	beq.n	8009104 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f042 0201 	orr.w	r2, r2, #1
 8009102:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009112:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2221      	movs	r2, #33	; 0x21
 8009118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2240      	movs	r2, #64	; 0x40
 8009120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	6a3a      	ldr	r2, [r7, #32]
 800912e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009134:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800913a:	b29a      	uxth	r2, r3
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4a4d      	ldr	r2, [pc, #308]	; (8009278 <HAL_I2C_Mem_Write+0x1f0>)
 8009144:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009146:	88f8      	ldrh	r0, [r7, #6]
 8009148:	893a      	ldrh	r2, [r7, #8]
 800914a:	8979      	ldrh	r1, [r7, #10]
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4603      	mov	r3, r0
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fad0 	bl	80096fc <I2C_RequestMemoryWrite>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d052      	beq.n	8009208 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	e081      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009166:	697a      	ldr	r2, [r7, #20]
 8009168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800916a:	68f8      	ldr	r0, [r7, #12]
 800916c:	f000 fd1a 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00d      	beq.n	8009192 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	2b04      	cmp	r3, #4
 800917c:	d107      	bne.n	800918e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800918c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e06b      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009196:	781a      	ldrb	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	1c5a      	adds	r2, r3, #1
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ac:	3b01      	subs	r3, #1
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	3b01      	subs	r3, #1
 80091bc:	b29a      	uxth	r2, r3
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	695b      	ldr	r3, [r3, #20]
 80091c8:	f003 0304 	and.w	r3, r3, #4
 80091cc:	2b04      	cmp	r3, #4
 80091ce:	d11b      	bne.n	8009208 <HAL_I2C_Mem_Write+0x180>
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d017      	beq.n	8009208 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	781a      	ldrb	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	1c5a      	adds	r2, r3, #1
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fe:	b29b      	uxth	r3, r3
 8009200:	3b01      	subs	r3, #1
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	d1aa      	bne.n	8009166 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009210:	697a      	ldr	r2, [r7, #20]
 8009212:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fd06 	bl	8009c26 <I2C_WaitOnBTFFlagUntilTimeout>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00d      	beq.n	800923c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009224:	2b04      	cmp	r3, #4
 8009226:	d107      	bne.n	8009238 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009236:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e016      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	681a      	ldr	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800924a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2220      	movs	r2, #32
 8009250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2200      	movs	r2, #0
 8009258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009264:	2300      	movs	r3, #0
 8009266:	e000      	b.n	800926a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009268:	2302      	movs	r3, #2
  }
}
 800926a:	4618      	mov	r0, r3
 800926c:	3718      	adds	r7, #24
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	00100002 	.word	0x00100002
 8009278:	ffff0000 	.word	0xffff0000

0800927c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b08c      	sub	sp, #48	; 0x30
 8009280:	af02      	add	r7, sp, #8
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	4608      	mov	r0, r1
 8009286:	4611      	mov	r1, r2
 8009288:	461a      	mov	r2, r3
 800928a:	4603      	mov	r3, r0
 800928c:	817b      	strh	r3, [r7, #10]
 800928e:	460b      	mov	r3, r1
 8009290:	813b      	strh	r3, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009296:	f7fe fd5f 	bl	8007d58 <HAL_GetTick>
 800929a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	f040 8208 	bne.w	80096ba <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	9300      	str	r3, [sp, #0]
 80092ae:	2319      	movs	r3, #25
 80092b0:	2201      	movs	r2, #1
 80092b2:	497b      	ldr	r1, [pc, #492]	; (80094a0 <HAL_I2C_Mem_Read+0x224>)
 80092b4:	68f8      	ldr	r0, [r7, #12]
 80092b6:	f000 fb9f 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80092c0:	2302      	movs	r3, #2
 80092c2:	e1fb      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_I2C_Mem_Read+0x56>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e1f4      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d007      	beq.n	80092f8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0201 	orr.w	r2, r2, #1
 80092f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009306:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2222      	movs	r2, #34	; 0x22
 800930c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2240      	movs	r2, #64	; 0x40
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009322:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009328:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932e:	b29a      	uxth	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a5b      	ldr	r2, [pc, #364]	; (80094a4 <HAL_I2C_Mem_Read+0x228>)
 8009338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800933a:	88f8      	ldrh	r0, [r7, #6]
 800933c:	893a      	ldrh	r2, [r7, #8]
 800933e:	8979      	ldrh	r1, [r7, #10]
 8009340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	9300      	str	r3, [sp, #0]
 8009348:	4603      	mov	r3, r0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f000 fa6c 	bl	8009828 <I2C_RequestMemoryRead>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d001      	beq.n	800935a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e1b0      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800935e:	2b00      	cmp	r3, #0
 8009360:	d113      	bne.n	800938a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009362:	2300      	movs	r3, #0
 8009364:	623b      	str	r3, [r7, #32]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	695b      	ldr	r3, [r3, #20]
 800936c:	623b      	str	r3, [r7, #32]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	623b      	str	r3, [r7, #32]
 8009376:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009386:	601a      	str	r2, [r3, #0]
 8009388:	e184      	b.n	8009694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938e:	2b01      	cmp	r3, #1
 8009390:	d11b      	bne.n	80093ca <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a2:	2300      	movs	r3, #0
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	695b      	ldr	r3, [r3, #20]
 80093ac:	61fb      	str	r3, [r7, #28]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	699b      	ldr	r3, [r3, #24]
 80093b4:	61fb      	str	r3, [r7, #28]
 80093b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	e164      	b.n	8009694 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d11b      	bne.n	800940a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093e0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	681a      	ldr	r2, [r3, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093f2:	2300      	movs	r3, #0
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	695b      	ldr	r3, [r3, #20]
 80093fc:	61bb      	str	r3, [r7, #24]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	61bb      	str	r3, [r7, #24]
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	e144      	b.n	8009694 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800940a:	2300      	movs	r3, #0
 800940c:	617b      	str	r3, [r7, #20]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	695b      	ldr	r3, [r3, #20]
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	617b      	str	r3, [r7, #20]
 800941e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009420:	e138      	b.n	8009694 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009426:	2b03      	cmp	r3, #3
 8009428:	f200 80f1 	bhi.w	800960e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009430:	2b01      	cmp	r3, #1
 8009432:	d123      	bne.n	800947c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009436:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	f000 fc35 	bl	8009ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d001      	beq.n	8009448 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009444:	2301      	movs	r3, #1
 8009446:	e139      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691a      	ldr	r2, [r3, #16]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	b2d2      	uxtb	r2, r2
 8009454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	1c5a      	adds	r2, r3, #1
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009464:	3b01      	subs	r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009470:	b29b      	uxth	r3, r3
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	855a      	strh	r2, [r3, #42]	; 0x2a
 800947a:	e10b      	b.n	8009694 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009480:	2b02      	cmp	r3, #2
 8009482:	d14e      	bne.n	8009522 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	9300      	str	r3, [sp, #0]
 8009488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948a:	2200      	movs	r2, #0
 800948c:	4906      	ldr	r1, [pc, #24]	; (80094a8 <HAL_I2C_Mem_Read+0x22c>)
 800948e:	68f8      	ldr	r0, [r7, #12]
 8009490:	f000 fab2 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d008      	beq.n	80094ac <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e10e      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
 800949e:	bf00      	nop
 80094a0:	00100002 	.word	0x00100002
 80094a4:	ffff0000 	.word	0xffff0000
 80094a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691a      	ldr	r2, [r3, #16]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	b2d2      	uxtb	r2, r2
 80094c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	1c5a      	adds	r2, r3, #1
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	691a      	ldr	r2, [r3, #16]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	b2d2      	uxtb	r2, r2
 80094fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	1c5a      	adds	r2, r3, #1
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950a:	3b01      	subs	r3, #1
 800950c:	b29a      	uxth	r2, r3
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009516:	b29b      	uxth	r3, r3
 8009518:	3b01      	subs	r3, #1
 800951a:	b29a      	uxth	r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009520:	e0b8      	b.n	8009694 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	2200      	movs	r2, #0
 800952a:	4966      	ldr	r1, [pc, #408]	; (80096c4 <HAL_I2C_Mem_Read+0x448>)
 800952c:	68f8      	ldr	r0, [r7, #12]
 800952e:	f000 fa63 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009532:	4603      	mov	r3, r0
 8009534:	2b00      	cmp	r3, #0
 8009536:	d001      	beq.n	800953c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	e0bf      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800954a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	1c5a      	adds	r2, r3, #1
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009568:	3b01      	subs	r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800957e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009584:	2200      	movs	r2, #0
 8009586:	494f      	ldr	r1, [pc, #316]	; (80096c4 <HAL_I2C_Mem_Read+0x448>)
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f000 fa35 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e091      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	691a      	ldr	r2, [r3, #16]
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	b2d2      	uxtb	r2, r2
 80095b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ba:	1c5a      	adds	r2, r3, #1
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	3b01      	subs	r3, #1
 80095d4:	b29a      	uxth	r2, r3
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	691a      	ldr	r2, [r3, #16]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e4:	b2d2      	uxtb	r2, r2
 80095e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009602:	b29b      	uxth	r3, r3
 8009604:	3b01      	subs	r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800960c:	e042      	b.n	8009694 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800960e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009610:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fb48 	bl	8009ca8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e04c      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	691a      	ldr	r2, [r3, #16]
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962c:	b2d2      	uxtb	r2, r2
 800962e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009634:	1c5a      	adds	r2, r3, #1
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963e:	3b01      	subs	r3, #1
 8009640:	b29a      	uxth	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800964a:	b29b      	uxth	r3, r3
 800964c:	3b01      	subs	r3, #1
 800964e:	b29a      	uxth	r2, r3
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	695b      	ldr	r3, [r3, #20]
 800965a:	f003 0304 	and.w	r3, r3, #4
 800965e:	2b04      	cmp	r3, #4
 8009660:	d118      	bne.n	8009694 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	691a      	ldr	r2, [r3, #16]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	b2d2      	uxtb	r2, r2
 800966e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800967e:	3b01      	subs	r3, #1
 8009680:	b29a      	uxth	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800968a:	b29b      	uxth	r3, r3
 800968c:	3b01      	subs	r3, #1
 800968e:	b29a      	uxth	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009698:	2b00      	cmp	r3, #0
 800969a:	f47f aec2 	bne.w	8009422 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	e000      	b.n	80096bc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80096ba:	2302      	movs	r3, #2
  }
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3728      	adds	r7, #40	; 0x28
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	00010004 	.word	0x00010004

080096c8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096d6:	b2db      	uxtb	r3, r3
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af02      	add	r7, sp, #8
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	4608      	mov	r0, r1
 8009706:	4611      	mov	r1, r2
 8009708:	461a      	mov	r2, r3
 800970a:	4603      	mov	r3, r0
 800970c:	817b      	strh	r3, [r7, #10]
 800970e:	460b      	mov	r3, r1
 8009710:	813b      	strh	r3, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009724:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009728:	9300      	str	r3, [sp, #0]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	2200      	movs	r2, #0
 800972e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 f960 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00d      	beq.n	800975a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009748:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800974c:	d103      	bne.n	8009756 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009754:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009756:	2303      	movs	r3, #3
 8009758:	e05f      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800975a:	897b      	ldrh	r3, [r7, #10]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	461a      	mov	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009768:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	6a3a      	ldr	r2, [r7, #32]
 800976e:	492d      	ldr	r1, [pc, #180]	; (8009824 <I2C_RequestMemoryWrite+0x128>)
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f998 	bl	8009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e04c      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009780:	2300      	movs	r3, #0
 8009782:	617b      	str	r3, [r7, #20]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	695b      	ldr	r3, [r3, #20]
 800978a:	617b      	str	r3, [r7, #20]
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	699b      	ldr	r3, [r3, #24]
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009798:	6a39      	ldr	r1, [r7, #32]
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fa02 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00d      	beq.n	80097c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d107      	bne.n	80097be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e02b      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097c2:	88fb      	ldrh	r3, [r7, #6]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d105      	bne.n	80097d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097c8:	893b      	ldrh	r3, [r7, #8]
 80097ca:	b2da      	uxtb	r2, r3
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	611a      	str	r2, [r3, #16]
 80097d2:	e021      	b.n	8009818 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80097d4:	893b      	ldrh	r3, [r7, #8]
 80097d6:	0a1b      	lsrs	r3, r3, #8
 80097d8:	b29b      	uxth	r3, r3
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e4:	6a39      	ldr	r1, [r7, #32]
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	f000 f9dc 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80097ec:	4603      	mov	r3, r0
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00d      	beq.n	800980e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f6:	2b04      	cmp	r3, #4
 80097f8:	d107      	bne.n	800980a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009808:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	e005      	b.n	800981a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800980e:	893b      	ldrh	r3, [r7, #8]
 8009810:	b2da      	uxtb	r2, r3
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3718      	adds	r7, #24
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	00010002 	.word	0x00010002

08009828 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b088      	sub	sp, #32
 800982c:	af02      	add	r7, sp, #8
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	4608      	mov	r0, r1
 8009832:	4611      	mov	r1, r2
 8009834:	461a      	mov	r2, r3
 8009836:	4603      	mov	r3, r0
 8009838:	817b      	strh	r3, [r7, #10]
 800983a:	460b      	mov	r3, r1
 800983c:	813b      	strh	r3, [r7, #8]
 800983e:	4613      	mov	r3, r2
 8009840:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009850:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	2200      	movs	r2, #0
 800986a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f000 f8c2 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00d      	beq.n	8009896 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009888:	d103      	bne.n	8009892 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009890:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	e0aa      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009896:	897b      	ldrh	r3, [r7, #10]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	461a      	mov	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	6a3a      	ldr	r2, [r7, #32]
 80098aa:	4952      	ldr	r1, [pc, #328]	; (80099f4 <I2C_RequestMemoryRead+0x1cc>)
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f8fa 	bl	8009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e097      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098bc:	2300      	movs	r3, #0
 80098be:	617b      	str	r3, [r7, #20]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	617b      	str	r3, [r7, #20]
 80098d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098d4:	6a39      	ldr	r1, [r7, #32]
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 f964 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d00d      	beq.n	80098fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e6:	2b04      	cmp	r3, #4
 80098e8:	d107      	bne.n	80098fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e076      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80098fe:	88fb      	ldrh	r3, [r7, #6]
 8009900:	2b01      	cmp	r3, #1
 8009902:	d105      	bne.n	8009910 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009904:	893b      	ldrh	r3, [r7, #8]
 8009906:	b2da      	uxtb	r2, r3
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	611a      	str	r2, [r3, #16]
 800990e:	e021      	b.n	8009954 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009910:	893b      	ldrh	r3, [r7, #8]
 8009912:	0a1b      	lsrs	r3, r3, #8
 8009914:	b29b      	uxth	r3, r3
 8009916:	b2da      	uxtb	r2, r3
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800991e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009920:	6a39      	ldr	r1, [r7, #32]
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f000 f93e 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d00d      	beq.n	800994a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	2b04      	cmp	r3, #4
 8009934:	d107      	bne.n	8009946 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009946:	2301      	movs	r3, #1
 8009948:	e050      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800994a:	893b      	ldrh	r3, [r7, #8]
 800994c:	b2da      	uxtb	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009956:	6a39      	ldr	r1, [r7, #32]
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f923 	bl	8009ba4 <I2C_WaitOnTXEFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d00d      	beq.n	8009980 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009968:	2b04      	cmp	r3, #4
 800996a:	d107      	bne.n	800997c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800997a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800997c:	2301      	movs	r3, #1
 800997e:	e035      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800998e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	2200      	movs	r2, #0
 8009998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f82b 	bl	80099f8 <I2C_WaitOnFlagUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00d      	beq.n	80099c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b6:	d103      	bne.n	80099c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e013      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80099c4:	897b      	ldrh	r3, [r7, #10]
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	f043 0301 	orr.w	r3, r3, #1
 80099cc:	b2da      	uxtb	r2, r3
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d6:	6a3a      	ldr	r2, [r7, #32]
 80099d8:	4906      	ldr	r1, [pc, #24]	; (80099f4 <I2C_RequestMemoryRead+0x1cc>)
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f863 	bl	8009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d001      	beq.n	80099ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e000      	b.n	80099ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3718      	adds	r7, #24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	00010002 	.word	0x00010002

080099f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	603b      	str	r3, [r7, #0]
 8009a04:	4613      	mov	r3, r2
 8009a06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a08:	e025      	b.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a10:	d021      	beq.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a12:	f7fe f9a1 	bl	8007d58 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	683a      	ldr	r2, [r7, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d302      	bcc.n	8009a28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d116      	bne.n	8009a56 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2220      	movs	r2, #32
 8009a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	f043 0220 	orr.w	r2, r3, #32
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a52:	2301      	movs	r3, #1
 8009a54:	e023      	b.n	8009a9e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	0c1b      	lsrs	r3, r3, #16
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d10d      	bne.n	8009a7c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	43da      	mvns	r2, r3
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	bf0c      	ite	eq
 8009a72:	2301      	moveq	r3, #1
 8009a74:	2300      	movne	r3, #0
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	461a      	mov	r2, r3
 8009a7a:	e00c      	b.n	8009a96 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	699b      	ldr	r3, [r3, #24]
 8009a82:	43da      	mvns	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4013      	ands	r3, r2
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	bf0c      	ite	eq
 8009a8e:	2301      	moveq	r3, #1
 8009a90:	2300      	movne	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	79fb      	ldrb	r3, [r7, #7]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	d0b6      	beq.n	8009a0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3710      	adds	r7, #16
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	60f8      	str	r0, [r7, #12]
 8009aae:	60b9      	str	r1, [r7, #8]
 8009ab0:	607a      	str	r2, [r7, #4]
 8009ab2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ab4:	e051      	b.n	8009b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	695b      	ldr	r3, [r3, #20]
 8009abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ac4:	d123      	bne.n	8009b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ad4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ade:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	f043 0204 	orr.w	r2, r3, #4
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e046      	b.n	8009b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b14:	d021      	beq.n	8009b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b16:	f7fe f91f 	bl	8007d58 <HAL_GetTick>
 8009b1a:	4602      	mov	r2, r0
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	1ad3      	subs	r3, r2, r3
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d302      	bcc.n	8009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d116      	bne.n	8009b5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2220      	movs	r2, #32
 8009b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b46:	f043 0220 	orr.w	r2, r3, #32
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e020      	b.n	8009b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	0c1b      	lsrs	r3, r3, #16
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d10c      	bne.n	8009b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	695b      	ldr	r3, [r3, #20]
 8009b6a:	43da      	mvns	r2, r3
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	4013      	ands	r3, r2
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bf14      	ite	ne
 8009b76:	2301      	movne	r3, #1
 8009b78:	2300      	moveq	r3, #0
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	e00b      	b.n	8009b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	43da      	mvns	r2, r3
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	4013      	ands	r3, r2
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	bf14      	ite	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	2300      	moveq	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d18d      	bne.n	8009ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bb0:	e02d      	b.n	8009c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	f000 f8ce 	bl	8009d54 <I2C_IsAcknowledgeFailed>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d001      	beq.n	8009bc2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e02d      	b.n	8009c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bc8:	d021      	beq.n	8009c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bca:	f7fe f8c5 	bl	8007d58 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	68ba      	ldr	r2, [r7, #8]
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d302      	bcc.n	8009be0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d116      	bne.n	8009c0e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2200      	movs	r2, #0
 8009be4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2220      	movs	r2, #32
 8009bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	f043 0220 	orr.w	r2, r3, #32
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e007      	b.n	8009c1e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c18:	2b80      	cmp	r3, #128	; 0x80
 8009c1a:	d1ca      	bne.n	8009bb2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c32:	e02d      	b.n	8009c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f000 f88d 	bl	8009d54 <I2C_IsAcknowledgeFailed>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d001      	beq.n	8009c44 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	e02d      	b.n	8009ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c4a:	d021      	beq.n	8009c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4c:	f7fe f884 	bl	8007d58 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d302      	bcc.n	8009c62 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d116      	bne.n	8009c90 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	2200      	movs	r2, #0
 8009c66:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2220      	movs	r2, #32
 8009c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	f043 0220 	orr.w	r2, r3, #32
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e007      	b.n	8009ca0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	695b      	ldr	r3, [r3, #20]
 8009c96:	f003 0304 	and.w	r3, r3, #4
 8009c9a:	2b04      	cmp	r3, #4
 8009c9c:	d1ca      	bne.n	8009c34 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cb4:	e042      	b.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	695b      	ldr	r3, [r3, #20]
 8009cbc:	f003 0310 	and.w	r3, r3, #16
 8009cc0:	2b10      	cmp	r3, #16
 8009cc2:	d119      	bne.n	8009cf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f06f 0210 	mvn.w	r2, #16
 8009ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2220      	movs	r2, #32
 8009cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e029      	b.n	8009d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf8:	f7fe f82e 	bl	8007d58 <HAL_GetTick>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d302      	bcc.n	8009d0e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d116      	bne.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2220      	movs	r2, #32
 8009d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d28:	f043 0220 	orr.w	r2, r3, #32
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e007      	b.n	8009d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	695b      	ldr	r3, [r3, #20]
 8009d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d46:	2b40      	cmp	r3, #64	; 0x40
 8009d48:	d1b5      	bne.n	8009cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3710      	adds	r7, #16
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b083      	sub	sp, #12
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d6a:	d11b      	bne.n	8009da4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d74:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2200      	movs	r2, #0
 8009d7a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d90:	f043 0204 	orr.w	r2, r3, #4
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e000      	b.n	8009da6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e264      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f003 0301 	and.w	r3, r3, #1
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d075      	beq.n	8009ebe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dd2:	4ba3      	ldr	r3, [pc, #652]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f003 030c 	and.w	r3, r3, #12
 8009dda:	2b04      	cmp	r3, #4
 8009ddc:	d00c      	beq.n	8009df8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009dde:	4ba0      	ldr	r3, [pc, #640]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009de6:	2b08      	cmp	r3, #8
 8009de8:	d112      	bne.n	8009e10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009dea:	4b9d      	ldr	r3, [pc, #628]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009df2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009df6:	d10b      	bne.n	8009e10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009df8:	4b99      	ldr	r3, [pc, #612]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d05b      	beq.n	8009ebc <HAL_RCC_OscConfig+0x108>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d157      	bne.n	8009ebc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e23f      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e18:	d106      	bne.n	8009e28 <HAL_RCC_OscConfig+0x74>
 8009e1a:	4b91      	ldr	r3, [pc, #580]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a90      	ldr	r2, [pc, #576]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e24:	6013      	str	r3, [r2, #0]
 8009e26:	e01d      	b.n	8009e64 <HAL_RCC_OscConfig+0xb0>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e30:	d10c      	bne.n	8009e4c <HAL_RCC_OscConfig+0x98>
 8009e32:	4b8b      	ldr	r3, [pc, #556]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a8a      	ldr	r2, [pc, #552]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	4b88      	ldr	r3, [pc, #544]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a87      	ldr	r2, [pc, #540]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e48:	6013      	str	r3, [r2, #0]
 8009e4a:	e00b      	b.n	8009e64 <HAL_RCC_OscConfig+0xb0>
 8009e4c:	4b84      	ldr	r3, [pc, #528]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a83      	ldr	r2, [pc, #524]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e56:	6013      	str	r3, [r2, #0]
 8009e58:	4b81      	ldr	r3, [pc, #516]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a80      	ldr	r2, [pc, #512]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	685b      	ldr	r3, [r3, #4]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d013      	beq.n	8009e94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e6c:	f7fd ff74 	bl	8007d58 <HAL_GetTick>
 8009e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e72:	e008      	b.n	8009e86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e74:	f7fd ff70 	bl	8007d58 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	2b64      	cmp	r3, #100	; 0x64
 8009e80:	d901      	bls.n	8009e86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e82:	2303      	movs	r3, #3
 8009e84:	e204      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e86:	4b76      	ldr	r3, [pc, #472]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0f0      	beq.n	8009e74 <HAL_RCC_OscConfig+0xc0>
 8009e92:	e014      	b.n	8009ebe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e94:	f7fd ff60 	bl	8007d58 <HAL_GetTick>
 8009e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e9a:	e008      	b.n	8009eae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e9c:	f7fd ff5c 	bl	8007d58 <HAL_GetTick>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	1ad3      	subs	r3, r2, r3
 8009ea6:	2b64      	cmp	r3, #100	; 0x64
 8009ea8:	d901      	bls.n	8009eae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009eaa:	2303      	movs	r3, #3
 8009eac:	e1f0      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eae:	4b6c      	ldr	r3, [pc, #432]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f0      	bne.n	8009e9c <HAL_RCC_OscConfig+0xe8>
 8009eba:	e000      	b.n	8009ebe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f003 0302 	and.w	r3, r3, #2
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d063      	beq.n	8009f92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009eca:	4b65      	ldr	r3, [pc, #404]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009ecc:	689b      	ldr	r3, [r3, #8]
 8009ece:	f003 030c 	and.w	r3, r3, #12
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d00b      	beq.n	8009eee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ed6:	4b62      	ldr	r3, [pc, #392]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ede:	2b08      	cmp	r3, #8
 8009ee0:	d11c      	bne.n	8009f1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ee2:	4b5f      	ldr	r3, [pc, #380]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d116      	bne.n	8009f1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009eee:	4b5c      	ldr	r3, [pc, #368]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d005      	beq.n	8009f06 <HAL_RCC_OscConfig+0x152>
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d001      	beq.n	8009f06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e1c4      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f06:	4b56      	ldr	r3, [pc, #344]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	4952      	ldr	r1, [pc, #328]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009f16:	4313      	orrs	r3, r2
 8009f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f1a:	e03a      	b.n	8009f92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d020      	beq.n	8009f66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f24:	4b4f      	ldr	r3, [pc, #316]	; (800a064 <HAL_RCC_OscConfig+0x2b0>)
 8009f26:	2201      	movs	r2, #1
 8009f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f2a:	f7fd ff15 	bl	8007d58 <HAL_GetTick>
 8009f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f30:	e008      	b.n	8009f44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f32:	f7fd ff11 	bl	8007d58 <HAL_GetTick>
 8009f36:	4602      	mov	r2, r0
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	1ad3      	subs	r3, r2, r3
 8009f3c:	2b02      	cmp	r3, #2
 8009f3e:	d901      	bls.n	8009f44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f40:	2303      	movs	r3, #3
 8009f42:	e1a5      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f44:	4b46      	ldr	r3, [pc, #280]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	f003 0302 	and.w	r3, r3, #2
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d0f0      	beq.n	8009f32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f50:	4b43      	ldr	r3, [pc, #268]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	00db      	lsls	r3, r3, #3
 8009f5e:	4940      	ldr	r1, [pc, #256]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	600b      	str	r3, [r1, #0]
 8009f64:	e015      	b.n	8009f92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f66:	4b3f      	ldr	r3, [pc, #252]	; (800a064 <HAL_RCC_OscConfig+0x2b0>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f6c:	f7fd fef4 	bl	8007d58 <HAL_GetTick>
 8009f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f72:	e008      	b.n	8009f86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f74:	f7fd fef0 	bl	8007d58 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e184      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f86:	4b36      	ldr	r3, [pc, #216]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0302 	and.w	r3, r3, #2
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d1f0      	bne.n	8009f74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f003 0308 	and.w	r3, r3, #8
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d030      	beq.n	800a000 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	695b      	ldr	r3, [r3, #20]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d016      	beq.n	8009fd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fa6:	4b30      	ldr	r3, [pc, #192]	; (800a068 <HAL_RCC_OscConfig+0x2b4>)
 8009fa8:	2201      	movs	r2, #1
 8009faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fac:	f7fd fed4 	bl	8007d58 <HAL_GetTick>
 8009fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fb2:	e008      	b.n	8009fc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fb4:	f7fd fed0 	bl	8007d58 <HAL_GetTick>
 8009fb8:	4602      	mov	r2, r0
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	1ad3      	subs	r3, r2, r3
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d901      	bls.n	8009fc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fc2:	2303      	movs	r3, #3
 8009fc4:	e164      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fc6:	4b26      	ldr	r3, [pc, #152]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0f0      	beq.n	8009fb4 <HAL_RCC_OscConfig+0x200>
 8009fd2:	e015      	b.n	800a000 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fd4:	4b24      	ldr	r3, [pc, #144]	; (800a068 <HAL_RCC_OscConfig+0x2b4>)
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fda:	f7fd febd 	bl	8007d58 <HAL_GetTick>
 8009fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fe0:	e008      	b.n	8009ff4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fe2:	f7fd feb9 	bl	8007d58 <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d901      	bls.n	8009ff4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e14d      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ff4:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 8009ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff8:	f003 0302 	and.w	r3, r3, #2
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d1f0      	bne.n	8009fe2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f003 0304 	and.w	r3, r3, #4
 800a008:	2b00      	cmp	r3, #0
 800a00a:	f000 80a0 	beq.w	800a14e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a00e:	2300      	movs	r3, #0
 800a010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a012:	4b13      	ldr	r3, [pc, #76]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10f      	bne.n	800a03e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a01e:	2300      	movs	r3, #0
 800a020:	60bb      	str	r3, [r7, #8]
 800a022:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 800a024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a026:	4a0e      	ldr	r2, [pc, #56]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 800a028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a02c:	6413      	str	r3, [r2, #64]	; 0x40
 800a02e:	4b0c      	ldr	r3, [pc, #48]	; (800a060 <HAL_RCC_OscConfig+0x2ac>)
 800a030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a036:	60bb      	str	r3, [r7, #8]
 800a038:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a03a:	2301      	movs	r3, #1
 800a03c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <HAL_RCC_OscConfig+0x2b8>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a046:	2b00      	cmp	r3, #0
 800a048:	d121      	bne.n	800a08e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a04a:	4b08      	ldr	r3, [pc, #32]	; (800a06c <HAL_RCC_OscConfig+0x2b8>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a07      	ldr	r2, [pc, #28]	; (800a06c <HAL_RCC_OscConfig+0x2b8>)
 800a050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a054:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a056:	f7fd fe7f 	bl	8007d58 <HAL_GetTick>
 800a05a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a05c:	e011      	b.n	800a082 <HAL_RCC_OscConfig+0x2ce>
 800a05e:	bf00      	nop
 800a060:	40023800 	.word	0x40023800
 800a064:	42470000 	.word	0x42470000
 800a068:	42470e80 	.word	0x42470e80
 800a06c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a070:	f7fd fe72 	bl	8007d58 <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e106      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a082:	4b85      	ldr	r3, [pc, #532]	; (800a298 <HAL_RCC_OscConfig+0x4e4>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d0f0      	beq.n	800a070 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	2b01      	cmp	r3, #1
 800a094:	d106      	bne.n	800a0a4 <HAL_RCC_OscConfig+0x2f0>
 800a096:	4b81      	ldr	r3, [pc, #516]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09a:	4a80      	ldr	r2, [pc, #512]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a09c:	f043 0301 	orr.w	r3, r3, #1
 800a0a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a0a2:	e01c      	b.n	800a0de <HAL_RCC_OscConfig+0x32a>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b05      	cmp	r3, #5
 800a0aa:	d10c      	bne.n	800a0c6 <HAL_RCC_OscConfig+0x312>
 800a0ac:	4b7b      	ldr	r3, [pc, #492]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b0:	4a7a      	ldr	r2, [pc, #488]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0b2:	f043 0304 	orr.w	r3, r3, #4
 800a0b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a0b8:	4b78      	ldr	r3, [pc, #480]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0bc:	4a77      	ldr	r2, [pc, #476]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0be:	f043 0301 	orr.w	r3, r3, #1
 800a0c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a0c4:	e00b      	b.n	800a0de <HAL_RCC_OscConfig+0x32a>
 800a0c6:	4b75      	ldr	r3, [pc, #468]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	4a74      	ldr	r2, [pc, #464]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0cc:	f023 0301 	bic.w	r3, r3, #1
 800a0d0:	6713      	str	r3, [r2, #112]	; 0x70
 800a0d2:	4b72      	ldr	r3, [pc, #456]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d6:	4a71      	ldr	r2, [pc, #452]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a0d8:	f023 0304 	bic.w	r3, r3, #4
 800a0dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d015      	beq.n	800a112 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0e6:	f7fd fe37 	bl	8007d58 <HAL_GetTick>
 800a0ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0ec:	e00a      	b.n	800a104 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0ee:	f7fd fe33 	bl	8007d58 <HAL_GetTick>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	1ad3      	subs	r3, r2, r3
 800a0f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d901      	bls.n	800a104 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e0c5      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a104:	4b65      	ldr	r3, [pc, #404]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a108:	f003 0302 	and.w	r3, r3, #2
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d0ee      	beq.n	800a0ee <HAL_RCC_OscConfig+0x33a>
 800a110:	e014      	b.n	800a13c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a112:	f7fd fe21 	bl	8007d58 <HAL_GetTick>
 800a116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a118:	e00a      	b.n	800a130 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a11a:	f7fd fe1d 	bl	8007d58 <HAL_GetTick>
 800a11e:	4602      	mov	r2, r0
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	1ad3      	subs	r3, r2, r3
 800a124:	f241 3288 	movw	r2, #5000	; 0x1388
 800a128:	4293      	cmp	r3, r2
 800a12a:	d901      	bls.n	800a130 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a12c:	2303      	movs	r3, #3
 800a12e:	e0af      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a130:	4b5a      	ldr	r3, [pc, #360]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a134:	f003 0302 	and.w	r3, r3, #2
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d1ee      	bne.n	800a11a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d105      	bne.n	800a14e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a142:	4b56      	ldr	r3, [pc, #344]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a146:	4a55      	ldr	r2, [pc, #340]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a14c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 809b 	beq.w	800a28e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a158:	4b50      	ldr	r3, [pc, #320]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f003 030c 	and.w	r3, r3, #12
 800a160:	2b08      	cmp	r3, #8
 800a162:	d05c      	beq.n	800a21e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699b      	ldr	r3, [r3, #24]
 800a168:	2b02      	cmp	r3, #2
 800a16a:	d141      	bne.n	800a1f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a16c:	4b4c      	ldr	r3, [pc, #304]	; (800a2a0 <HAL_RCC_OscConfig+0x4ec>)
 800a16e:	2200      	movs	r2, #0
 800a170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a172:	f7fd fdf1 	bl	8007d58 <HAL_GetTick>
 800a176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a178:	e008      	b.n	800a18c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a17a:	f7fd fded 	bl	8007d58 <HAL_GetTick>
 800a17e:	4602      	mov	r2, r0
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	1ad3      	subs	r3, r2, r3
 800a184:	2b02      	cmp	r3, #2
 800a186:	d901      	bls.n	800a18c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a188:	2303      	movs	r3, #3
 800a18a:	e081      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a18c:	4b43      	ldr	r3, [pc, #268]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d1f0      	bne.n	800a17a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	69da      	ldr	r2, [r3, #28]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6a1b      	ldr	r3, [r3, #32]
 800a1a0:	431a      	orrs	r2, r3
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1a6:	019b      	lsls	r3, r3, #6
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ae:	085b      	lsrs	r3, r3, #1
 800a1b0:	3b01      	subs	r3, #1
 800a1b2:	041b      	lsls	r3, r3, #16
 800a1b4:	431a      	orrs	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	061b      	lsls	r3, r3, #24
 800a1bc:	4937      	ldr	r1, [pc, #220]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1c2:	4b37      	ldr	r3, [pc, #220]	; (800a2a0 <HAL_RCC_OscConfig+0x4ec>)
 800a1c4:	2201      	movs	r2, #1
 800a1c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1c8:	f7fd fdc6 	bl	8007d58 <HAL_GetTick>
 800a1cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1ce:	e008      	b.n	800a1e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1d0:	f7fd fdc2 	bl	8007d58 <HAL_GetTick>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	d901      	bls.n	800a1e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e056      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d0f0      	beq.n	800a1d0 <HAL_RCC_OscConfig+0x41c>
 800a1ee:	e04e      	b.n	800a28e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1f0:	4b2b      	ldr	r3, [pc, #172]	; (800a2a0 <HAL_RCC_OscConfig+0x4ec>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1f6:	f7fd fdaf 	bl	8007d58 <HAL_GetTick>
 800a1fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1fc:	e008      	b.n	800a210 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1fe:	f7fd fdab 	bl	8007d58 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	693b      	ldr	r3, [r7, #16]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d901      	bls.n	800a210 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e03f      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a210:	4b22      	ldr	r3, [pc, #136]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1f0      	bne.n	800a1fe <HAL_RCC_OscConfig+0x44a>
 800a21c:	e037      	b.n	800a28e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d101      	bne.n	800a22a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	e032      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a22a:	4b1c      	ldr	r3, [pc, #112]	; (800a29c <HAL_RCC_OscConfig+0x4e8>)
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d028      	beq.n	800a28a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a242:	429a      	cmp	r2, r3
 800a244:	d121      	bne.n	800a28a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a250:	429a      	cmp	r2, r3
 800a252:	d11a      	bne.n	800a28a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a25a:	4013      	ands	r3, r2
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a260:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a262:	4293      	cmp	r3, r2
 800a264:	d111      	bne.n	800a28a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a270:	085b      	lsrs	r3, r3, #1
 800a272:	3b01      	subs	r3, #1
 800a274:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a276:	429a      	cmp	r2, r3
 800a278:	d107      	bne.n	800a28a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a284:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a286:	429a      	cmp	r2, r3
 800a288:	d001      	beq.n	800a28e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e000      	b.n	800a290 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	40007000 	.word	0x40007000
 800a29c:	40023800 	.word	0x40023800
 800a2a0:	42470060 	.word	0x42470060

0800a2a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e0cc      	b.n	800a452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2b8:	4b68      	ldr	r3, [pc, #416]	; (800a45c <HAL_RCC_ClockConfig+0x1b8>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0307 	and.w	r3, r3, #7
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d90c      	bls.n	800a2e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2c6:	4b65      	ldr	r3, [pc, #404]	; (800a45c <HAL_RCC_ClockConfig+0x1b8>)
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	b2d2      	uxtb	r2, r2
 800a2cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2ce:	4b63      	ldr	r3, [pc, #396]	; (800a45c <HAL_RCC_ClockConfig+0x1b8>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 0307 	and.w	r3, r3, #7
 800a2d6:	683a      	ldr	r2, [r7, #0]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d001      	beq.n	800a2e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e0b8      	b.n	800a452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 0302 	and.w	r3, r3, #2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d020      	beq.n	800a32e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d005      	beq.n	800a304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2f8:	4b59      	ldr	r3, [pc, #356]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a2fa:	689b      	ldr	r3, [r3, #8]
 800a2fc:	4a58      	ldr	r2, [pc, #352]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a2fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0308 	and.w	r3, r3, #8
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a310:	4b53      	ldr	r3, [pc, #332]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	4a52      	ldr	r2, [pc, #328]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a31a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a31c:	4b50      	ldr	r3, [pc, #320]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	494d      	ldr	r1, [pc, #308]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d044      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d107      	bne.n	800a352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a342:	4b47      	ldr	r3, [pc, #284]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d119      	bne.n	800a382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a34e:	2301      	movs	r3, #1
 800a350:	e07f      	b.n	800a452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b02      	cmp	r3, #2
 800a358:	d003      	beq.n	800a362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a35e:	2b03      	cmp	r3, #3
 800a360:	d107      	bne.n	800a372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a362:	4b3f      	ldr	r3, [pc, #252]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a36e:	2301      	movs	r3, #1
 800a370:	e06f      	b.n	800a452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a372:	4b3b      	ldr	r3, [pc, #236]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d101      	bne.n	800a382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	e067      	b.n	800a452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a382:	4b37      	ldr	r3, [pc, #220]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f023 0203 	bic.w	r2, r3, #3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	4934      	ldr	r1, [pc, #208]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a390:	4313      	orrs	r3, r2
 800a392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a394:	f7fd fce0 	bl	8007d58 <HAL_GetTick>
 800a398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a39a:	e00a      	b.n	800a3b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a39c:	f7fd fcdc 	bl	8007d58 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d901      	bls.n	800a3b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3ae:	2303      	movs	r3, #3
 800a3b0:	e04f      	b.n	800a452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3b2:	4b2b      	ldr	r3, [pc, #172]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	f003 020c 	and.w	r2, r3, #12
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d1eb      	bne.n	800a39c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3c4:	4b25      	ldr	r3, [pc, #148]	; (800a45c <HAL_RCC_ClockConfig+0x1b8>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f003 0307 	and.w	r3, r3, #7
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d20c      	bcs.n	800a3ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3d2:	4b22      	ldr	r3, [pc, #136]	; (800a45c <HAL_RCC_ClockConfig+0x1b8>)
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	b2d2      	uxtb	r2, r2
 800a3d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3da:	4b20      	ldr	r3, [pc, #128]	; (800a45c <HAL_RCC_ClockConfig+0x1b8>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d001      	beq.n	800a3ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e032      	b.n	800a452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0304 	and.w	r3, r3, #4
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d008      	beq.n	800a40a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3f8:	4b19      	ldr	r3, [pc, #100]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	4916      	ldr	r1, [pc, #88]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a406:	4313      	orrs	r3, r2
 800a408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d009      	beq.n	800a42a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a416:	4b12      	ldr	r3, [pc, #72]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	00db      	lsls	r3, r3, #3
 800a424:	490e      	ldr	r1, [pc, #56]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a426:	4313      	orrs	r3, r2
 800a428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a42a:	f000 f821 	bl	800a470 <HAL_RCC_GetSysClockFreq>
 800a42e:	4602      	mov	r2, r0
 800a430:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <HAL_RCC_ClockConfig+0x1bc>)
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	091b      	lsrs	r3, r3, #4
 800a436:	f003 030f 	and.w	r3, r3, #15
 800a43a:	490a      	ldr	r1, [pc, #40]	; (800a464 <HAL_RCC_ClockConfig+0x1c0>)
 800a43c:	5ccb      	ldrb	r3, [r1, r3]
 800a43e:	fa22 f303 	lsr.w	r3, r2, r3
 800a442:	4a09      	ldr	r2, [pc, #36]	; (800a468 <HAL_RCC_ClockConfig+0x1c4>)
 800a444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <HAL_RCC_ClockConfig+0x1c8>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fd fc40 	bl	8007cd0 <HAL_InitTick>

  return HAL_OK;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	40023c00 	.word	0x40023c00
 800a460:	40023800 	.word	0x40023800
 800a464:	0800c380 	.word	0x0800c380
 800a468:	20000004 	.word	0x20000004
 800a46c:	20000040 	.word	0x20000040

0800a470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a470:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	607b      	str	r3, [r7, #4]
 800a47c:	2300      	movs	r3, #0
 800a47e:	60fb      	str	r3, [r7, #12]
 800a480:	2300      	movs	r3, #0
 800a482:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a488:	4b67      	ldr	r3, [pc, #412]	; (800a628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f003 030c 	and.w	r3, r3, #12
 800a490:	2b08      	cmp	r3, #8
 800a492:	d00d      	beq.n	800a4b0 <HAL_RCC_GetSysClockFreq+0x40>
 800a494:	2b08      	cmp	r3, #8
 800a496:	f200 80bd 	bhi.w	800a614 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d002      	beq.n	800a4a4 <HAL_RCC_GetSysClockFreq+0x34>
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	d003      	beq.n	800a4aa <HAL_RCC_GetSysClockFreq+0x3a>
 800a4a2:	e0b7      	b.n	800a614 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4a4:	4b61      	ldr	r3, [pc, #388]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a4a6:	60bb      	str	r3, [r7, #8]
       break;
 800a4a8:	e0b7      	b.n	800a61a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4aa:	4b61      	ldr	r3, [pc, #388]	; (800a630 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800a4ac:	60bb      	str	r3, [r7, #8]
      break;
 800a4ae:	e0b4      	b.n	800a61a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4b0:	4b5d      	ldr	r3, [pc, #372]	; (800a628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4ba:	4b5b      	ldr	r3, [pc, #364]	; (800a628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d04d      	beq.n	800a562 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4c6:	4b58      	ldr	r3, [pc, #352]	; (800a628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	099b      	lsrs	r3, r3, #6
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	f04f 0300 	mov.w	r3, #0
 800a4d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a4d6:	f04f 0100 	mov.w	r1, #0
 800a4da:	ea02 0800 	and.w	r8, r2, r0
 800a4de:	ea03 0901 	and.w	r9, r3, r1
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	4649      	mov	r1, r9
 800a4e6:	f04f 0200 	mov.w	r2, #0
 800a4ea:	f04f 0300 	mov.w	r3, #0
 800a4ee:	014b      	lsls	r3, r1, #5
 800a4f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a4f4:	0142      	lsls	r2, r0, #5
 800a4f6:	4610      	mov	r0, r2
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	ebb0 0008 	subs.w	r0, r0, r8
 800a4fe:	eb61 0109 	sbc.w	r1, r1, r9
 800a502:	f04f 0200 	mov.w	r2, #0
 800a506:	f04f 0300 	mov.w	r3, #0
 800a50a:	018b      	lsls	r3, r1, #6
 800a50c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a510:	0182      	lsls	r2, r0, #6
 800a512:	1a12      	subs	r2, r2, r0
 800a514:	eb63 0301 	sbc.w	r3, r3, r1
 800a518:	f04f 0000 	mov.w	r0, #0
 800a51c:	f04f 0100 	mov.w	r1, #0
 800a520:	00d9      	lsls	r1, r3, #3
 800a522:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a526:	00d0      	lsls	r0, r2, #3
 800a528:	4602      	mov	r2, r0
 800a52a:	460b      	mov	r3, r1
 800a52c:	eb12 0208 	adds.w	r2, r2, r8
 800a530:	eb43 0309 	adc.w	r3, r3, r9
 800a534:	f04f 0000 	mov.w	r0, #0
 800a538:	f04f 0100 	mov.w	r1, #0
 800a53c:	0259      	lsls	r1, r3, #9
 800a53e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a542:	0250      	lsls	r0, r2, #9
 800a544:	4602      	mov	r2, r0
 800a546:	460b      	mov	r3, r1
 800a548:	4610      	mov	r0, r2
 800a54a:	4619      	mov	r1, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	461a      	mov	r2, r3
 800a550:	f04f 0300 	mov.w	r3, #0
 800a554:	f7f5 fe46 	bl	80001e4 <__aeabi_uldivmod>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4613      	mov	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
 800a560:	e04a      	b.n	800a5f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a562:	4b31      	ldr	r3, [pc, #196]	; (800a628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a564:	685b      	ldr	r3, [r3, #4]
 800a566:	099b      	lsrs	r3, r3, #6
 800a568:	461a      	mov	r2, r3
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a572:	f04f 0100 	mov.w	r1, #0
 800a576:	ea02 0400 	and.w	r4, r2, r0
 800a57a:	ea03 0501 	and.w	r5, r3, r1
 800a57e:	4620      	mov	r0, r4
 800a580:	4629      	mov	r1, r5
 800a582:	f04f 0200 	mov.w	r2, #0
 800a586:	f04f 0300 	mov.w	r3, #0
 800a58a:	014b      	lsls	r3, r1, #5
 800a58c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a590:	0142      	lsls	r2, r0, #5
 800a592:	4610      	mov	r0, r2
 800a594:	4619      	mov	r1, r3
 800a596:	1b00      	subs	r0, r0, r4
 800a598:	eb61 0105 	sbc.w	r1, r1, r5
 800a59c:	f04f 0200 	mov.w	r2, #0
 800a5a0:	f04f 0300 	mov.w	r3, #0
 800a5a4:	018b      	lsls	r3, r1, #6
 800a5a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a5aa:	0182      	lsls	r2, r0, #6
 800a5ac:	1a12      	subs	r2, r2, r0
 800a5ae:	eb63 0301 	sbc.w	r3, r3, r1
 800a5b2:	f04f 0000 	mov.w	r0, #0
 800a5b6:	f04f 0100 	mov.w	r1, #0
 800a5ba:	00d9      	lsls	r1, r3, #3
 800a5bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a5c0:	00d0      	lsls	r0, r2, #3
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	1912      	adds	r2, r2, r4
 800a5c8:	eb45 0303 	adc.w	r3, r5, r3
 800a5cc:	f04f 0000 	mov.w	r0, #0
 800a5d0:	f04f 0100 	mov.w	r1, #0
 800a5d4:	0299      	lsls	r1, r3, #10
 800a5d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a5da:	0290      	lsls	r0, r2, #10
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4610      	mov	r0, r2
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	f04f 0300 	mov.w	r3, #0
 800a5ec:	f7f5 fdfa 	bl	80001e4 <__aeabi_uldivmod>
 800a5f0:	4602      	mov	r2, r0
 800a5f2:	460b      	mov	r3, r1
 800a5f4:	4613      	mov	r3, r2
 800a5f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a5f8:	4b0b      	ldr	r3, [pc, #44]	; (800a628 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5fa:	685b      	ldr	r3, [r3, #4]
 800a5fc:	0c1b      	lsrs	r3, r3, #16
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	3301      	adds	r3, #1
 800a604:	005b      	lsls	r3, r3, #1
 800a606:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a610:	60bb      	str	r3, [r7, #8]
      break;
 800a612:	e002      	b.n	800a61a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a614:	4b05      	ldr	r3, [pc, #20]	; (800a62c <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a616:	60bb      	str	r3, [r7, #8]
      break;
 800a618:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a61a:	68bb      	ldr	r3, [r7, #8]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a626:	bf00      	nop
 800a628:	40023800 	.word	0x40023800
 800a62c:	00f42400 	.word	0x00f42400
 800a630:	007a1200 	.word	0x007a1200

0800a634 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a634:	b480      	push	{r7}
 800a636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a638:	4b03      	ldr	r3, [pc, #12]	; (800a648 <HAL_RCC_GetHCLKFreq+0x14>)
 800a63a:	681b      	ldr	r3, [r3, #0]
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	20000004 	.word	0x20000004

0800a64c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a650:	f7ff fff0 	bl	800a634 <HAL_RCC_GetHCLKFreq>
 800a654:	4602      	mov	r2, r0
 800a656:	4b05      	ldr	r3, [pc, #20]	; (800a66c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	0a9b      	lsrs	r3, r3, #10
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	4903      	ldr	r1, [pc, #12]	; (800a670 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a662:	5ccb      	ldrb	r3, [r1, r3]
 800a664:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a668:	4618      	mov	r0, r3
 800a66a:	bd80      	pop	{r7, pc}
 800a66c:	40023800 	.word	0x40023800
 800a670:	0800c390 	.word	0x0800c390

0800a674 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a678:	f7ff ffdc 	bl	800a634 <HAL_RCC_GetHCLKFreq>
 800a67c:	4602      	mov	r2, r0
 800a67e:	4b05      	ldr	r3, [pc, #20]	; (800a694 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	0b5b      	lsrs	r3, r3, #13
 800a684:	f003 0307 	and.w	r3, r3, #7
 800a688:	4903      	ldr	r1, [pc, #12]	; (800a698 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a68a:	5ccb      	ldrb	r3, [r1, r3]
 800a68c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a690:	4618      	mov	r0, r3
 800a692:	bd80      	pop	{r7, pc}
 800a694:	40023800 	.word	0x40023800
 800a698:	0800c390 	.word	0x0800c390

0800a69c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	e03f      	b.n	800a72e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d106      	bne.n	800a6c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f7f9 ff62 	bl	800458c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2224      	movs	r2, #36	; 0x24
 800a6cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	68da      	ldr	r2, [r3, #12]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 ff3f 	bl	800b564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	691a      	ldr	r2, [r3, #16]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	695a      	ldr	r2, [r3, #20]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2200      	movs	r2, #0
 800a71a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2220      	movs	r2, #32
 800a720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2220      	movs	r2, #32
 800a728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b08c      	sub	sp, #48	; 0x30
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	60f8      	str	r0, [r7, #12]
 800a740:	60b9      	str	r1, [r7, #8]
 800a742:	4613      	mov	r3, r2
 800a744:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b20      	cmp	r3, #32
 800a750:	d165      	bne.n	800a81e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d002      	beq.n	800a75e <HAL_UART_Transmit_DMA+0x26>
 800a758:	88fb      	ldrh	r3, [r7, #6]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e05e      	b.n	800a820 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d101      	bne.n	800a770 <HAL_UART_Transmit_DMA+0x38>
 800a76c:	2302      	movs	r3, #2
 800a76e:	e057      	b.n	800a820 <HAL_UART_Transmit_DMA+0xe8>
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2201      	movs	r2, #1
 800a774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	88fa      	ldrh	r2, [r7, #6]
 800a782:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	88fa      	ldrh	r2, [r7, #6]
 800a788:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2221      	movs	r2, #33	; 0x21
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79c:	4a22      	ldr	r2, [pc, #136]	; (800a828 <HAL_UART_Transmit_DMA+0xf0>)
 800a79e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a4:	4a21      	ldr	r2, [pc, #132]	; (800a82c <HAL_UART_Transmit_DMA+0xf4>)
 800a7a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ac:	4a20      	ldr	r2, [pc, #128]	; (800a830 <HAL_UART_Transmit_DMA+0xf8>)
 800a7ae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800a7b8:	f107 0308 	add.w	r3, r7, #8
 800a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	6819      	ldr	r1, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3304      	adds	r3, #4
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	88fb      	ldrh	r3, [r7, #6]
 800a7d0:	f7fd fcb2 	bl	8008138 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7dc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	3314      	adds	r3, #20
 800a7ec:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ee:	69bb      	ldr	r3, [r7, #24]
 800a7f0:	e853 3f00 	ldrex	r3, [r3]
 800a7f4:	617b      	str	r3, [r7, #20]
   return(result);
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7fc:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	3314      	adds	r3, #20
 800a804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a806:	627a      	str	r2, [r7, #36]	; 0x24
 800a808:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a80a:	6a39      	ldr	r1, [r7, #32]
 800a80c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a80e:	e841 2300 	strex	r3, r2, [r1]
 800a812:	61fb      	str	r3, [r7, #28]
   return(result);
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1e5      	bne.n	800a7e6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	e000      	b.n	800a820 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800a81e:	2302      	movs	r3, #2
  }
}
 800a820:	4618      	mov	r0, r3
 800a822:	3730      	adds	r7, #48	; 0x30
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	0800ae05 	.word	0x0800ae05
 800a82c:	0800ae9f 	.word	0x0800ae9f
 800a830:	0800b017 	.word	0x0800b017

0800a834 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	4613      	mov	r3, r2
 800a840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b20      	cmp	r3, #32
 800a84c:	d11d      	bne.n	800a88a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <HAL_UART_Receive_DMA+0x26>
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d101      	bne.n	800a85e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e016      	b.n	800a88c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a864:	2b01      	cmp	r3, #1
 800a866:	d101      	bne.n	800a86c <HAL_UART_Receive_DMA+0x38>
 800a868:	2302      	movs	r3, #2
 800a86a:	e00f      	b.n	800a88c <HAL_UART_Receive_DMA+0x58>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2200      	movs	r2, #0
 800a878:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a87a:	88fb      	ldrh	r3, [r7, #6]
 800a87c:	461a      	mov	r2, r3
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f000 fc13 	bl	800b0ac <UART_Start_Receive_DMA>
 800a886:	4603      	mov	r3, r0
 800a888:	e000      	b.n	800a88c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800a88a:	2302      	movs	r3, #2
  }
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}

0800a894 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b0ba      	sub	sp, #232	; 0xe8
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	695b      	ldr	r3, [r3, #20]
 800a8b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a8c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8ca:	f003 030f 	and.w	r3, r3, #15
 800a8ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a8d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d10f      	bne.n	800a8fa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8de:	f003 0320 	and.w	r3, r3, #32
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d009      	beq.n	800a8fa <HAL_UART_IRQHandler+0x66>
 800a8e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8ea:	f003 0320 	and.w	r3, r3, #32
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d003      	beq.n	800a8fa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a8f2:	6878      	ldr	r0, [r7, #4]
 800a8f4:	f000 fd7b 	bl	800b3ee <UART_Receive_IT>
      return;
 800a8f8:	e256      	b.n	800ada8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a8fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	f000 80de 	beq.w	800aac0 <HAL_UART_IRQHandler+0x22c>
 800a904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d106      	bne.n	800a91e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a914:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f000 80d1 	beq.w	800aac0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a91e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00b      	beq.n	800a942 <HAL_UART_IRQHandler+0xae>
 800a92a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a92e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a932:	2b00      	cmp	r3, #0
 800a934:	d005      	beq.n	800a942 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93a:	f043 0201 	orr.w	r2, r3, #1
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a946:	f003 0304 	and.w	r3, r3, #4
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00b      	beq.n	800a966 <HAL_UART_IRQHandler+0xd2>
 800a94e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d005      	beq.n	800a966 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95e:	f043 0202 	orr.w	r2, r3, #2
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a96a:	f003 0302 	and.w	r3, r3, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00b      	beq.n	800a98a <HAL_UART_IRQHandler+0xf6>
 800a972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a976:	f003 0301 	and.w	r3, r3, #1
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d005      	beq.n	800a98a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a982:	f043 0204 	orr.w	r2, r3, #4
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d011      	beq.n	800a9ba <HAL_UART_IRQHandler+0x126>
 800a996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d105      	bne.n	800a9ae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a9a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a9a6:	f003 0301 	and.w	r3, r3, #1
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d005      	beq.n	800a9ba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b2:	f043 0208 	orr.w	r2, r3, #8
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f000 81ed 	beq.w	800ad9e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x14e>
 800a9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a9d4:	f003 0320 	and.w	r3, r3, #32
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fd06 	bl	800b3ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	695b      	ldr	r3, [r3, #20]
 800a9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ec:	2b40      	cmp	r3, #64	; 0x40
 800a9ee:	bf0c      	ite	eq
 800a9f0:	2301      	moveq	r3, #1
 800a9f2:	2300      	movne	r3, #0
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fe:	f003 0308 	and.w	r3, r3, #8
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d103      	bne.n	800aa0e <HAL_UART_IRQHandler+0x17a>
 800aa06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d04f      	beq.n	800aaae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 fc0e 	bl	800b230 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	695b      	ldr	r3, [r3, #20]
 800aa1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1e:	2b40      	cmp	r3, #64	; 0x40
 800aa20:	d141      	bne.n	800aaa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3314      	adds	r3, #20
 800aa28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aa30:	e853 3f00 	ldrex	r3, [r3]
 800aa34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800aa38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3314      	adds	r3, #20
 800aa4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800aa4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aa52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800aa5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aa5e:	e841 2300 	strex	r3, r2, [r1]
 800aa62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800aa66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1d9      	bne.n	800aa22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d013      	beq.n	800aa9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	4a7d      	ldr	r2, [pc, #500]	; (800ac70 <HAL_UART_IRQHandler+0x3dc>)
 800aa7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	4618      	mov	r0, r3
 800aa84:	f7fd fc20 	bl	80082c8 <HAL_DMA_Abort_IT>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d016      	beq.n	800aabc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aa98:	4610      	mov	r0, r2
 800aa9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa9c:	e00e      	b.n	800aabc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f99a 	bl	800add8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaa4:	e00a      	b.n	800aabc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 f996 	bl	800add8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aaac:	e006      	b.n	800aabc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 f992 	bl	800add8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aaba:	e170      	b.n	800ad9e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aabc:	bf00      	nop
    return;
 800aabe:	e16e      	b.n	800ad9e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aac4:	2b01      	cmp	r3, #1
 800aac6:	f040 814a 	bne.w	800ad5e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aaca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aace:	f003 0310 	and.w	r3, r3, #16
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	f000 8143 	beq.w	800ad5e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aadc:	f003 0310 	and.w	r3, r3, #16
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f000 813c 	beq.w	800ad5e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aae6:	2300      	movs	r3, #0
 800aae8:	60bb      	str	r3, [r7, #8]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60bb      	str	r3, [r7, #8]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685b      	ldr	r3, [r3, #4]
 800aaf8:	60bb      	str	r3, [r7, #8]
 800aafa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab06:	2b40      	cmp	r3, #64	; 0x40
 800ab08:	f040 80b4 	bne.w	800ac74 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ab18:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	f000 8140 	beq.w	800ada2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ab26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	f080 8139 	bcs.w	800ada2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ab36:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab3c:	69db      	ldr	r3, [r3, #28]
 800ab3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab42:	f000 8088 	beq.w	800ac56 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	330c      	adds	r3, #12
 800ab4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab54:	e853 3f00 	ldrex	r3, [r3]
 800ab58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ab5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ab60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	330c      	adds	r3, #12
 800ab6e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ab72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ab76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ab7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ab82:	e841 2300 	strex	r3, r2, [r1]
 800ab86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ab8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1d9      	bne.n	800ab46 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	3314      	adds	r3, #20
 800ab98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab9c:	e853 3f00 	ldrex	r3, [r3]
 800aba0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aba2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aba4:	f023 0301 	bic.w	r3, r3, #1
 800aba8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3314      	adds	r3, #20
 800abb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800abb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800abba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800abbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800abc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e1      	bne.n	800ab92 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	3314      	adds	r3, #20
 800abd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abd8:	e853 3f00 	ldrex	r3, [r3]
 800abdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800abde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	3314      	adds	r3, #20
 800abee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800abf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800abf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800abf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800abfa:	e841 2300 	strex	r3, r2, [r1]
 800abfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ac00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d1e3      	bne.n	800abce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2220      	movs	r2, #32
 800ac0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	330c      	adds	r3, #12
 800ac1a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac1e:	e853 3f00 	ldrex	r3, [r3]
 800ac22:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ac24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ac26:	f023 0310 	bic.w	r3, r3, #16
 800ac2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	330c      	adds	r3, #12
 800ac34:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ac38:	65ba      	str	r2, [r7, #88]	; 0x58
 800ac3a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac3c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ac3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac40:	e841 2300 	strex	r3, r2, [r1]
 800ac44:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ac46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d1e3      	bne.n	800ac14 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac50:	4618      	mov	r0, r3
 800ac52:	f7fd fac9 	bl	80081e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac5e:	b29b      	uxth	r3, r3
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	4619      	mov	r1, r3
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f8c0 	bl	800adec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ac6c:	e099      	b.n	800ada2 <HAL_UART_IRQHandler+0x50e>
 800ac6e:	bf00      	nop
 800ac70:	0800b2f7 	.word	0x0800b2f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	1ad3      	subs	r3, r2, r3
 800ac80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	f000 808b 	beq.w	800ada6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800ac90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 8086 	beq.w	800ada6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	330c      	adds	r3, #12
 800aca0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca4:	e853 3f00 	ldrex	r3, [r3]
 800aca8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800acaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800acb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	330c      	adds	r3, #12
 800acba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800acbe:	647a      	str	r2, [r7, #68]	; 0x44
 800acc0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acc6:	e841 2300 	strex	r3, r2, [r1]
 800acca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800accc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d1e3      	bne.n	800ac9a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	3314      	adds	r3, #20
 800acd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	e853 3f00 	ldrex	r3, [r3]
 800ace0:	623b      	str	r3, [r7, #32]
   return(result);
 800ace2:	6a3b      	ldr	r3, [r7, #32]
 800ace4:	f023 0301 	bic.w	r3, r3, #1
 800ace8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3314      	adds	r3, #20
 800acf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800acf6:	633a      	str	r2, [r7, #48]	; 0x30
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800acfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ad04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e3      	bne.n	800acd2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	330c      	adds	r3, #12
 800ad1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad20:	693b      	ldr	r3, [r7, #16]
 800ad22:	e853 3f00 	ldrex	r3, [r3]
 800ad26:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f023 0310 	bic.w	r3, r3, #16
 800ad2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	330c      	adds	r3, #12
 800ad38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ad3c:	61fa      	str	r2, [r7, #28]
 800ad3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad40:	69b9      	ldr	r1, [r7, #24]
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	e841 2300 	strex	r3, r2, [r1]
 800ad48:	617b      	str	r3, [r7, #20]
   return(result);
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1e3      	bne.n	800ad18 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ad50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ad54:	4619      	mov	r1, r3
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f848 	bl	800adec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ad5c:	e023      	b.n	800ada6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ad5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d009      	beq.n	800ad7e <HAL_UART_IRQHandler+0x4ea>
 800ad6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d003      	beq.n	800ad7e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 fad1 	bl	800b31e <UART_Transmit_IT>
    return;
 800ad7c:	e014      	b.n	800ada8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ad7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d00e      	beq.n	800ada8 <HAL_UART_IRQHandler+0x514>
 800ad8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d008      	beq.n	800ada8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 fb11 	bl	800b3be <UART_EndTransmit_IT>
    return;
 800ad9c:	e004      	b.n	800ada8 <HAL_UART_IRQHandler+0x514>
    return;
 800ad9e:	bf00      	nop
 800ada0:	e002      	b.n	800ada8 <HAL_UART_IRQHandler+0x514>
      return;
 800ada2:	bf00      	nop
 800ada4:	e000      	b.n	800ada8 <HAL_UART_IRQHandler+0x514>
      return;
 800ada6:	bf00      	nop
  }
}
 800ada8:	37e8      	adds	r7, #232	; 0xe8
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop

0800adb0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr

0800adc4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b083      	sub	sp, #12
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800adcc:	bf00      	nop
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800add8:	b480      	push	{r7}
 800adda:	b083      	sub	sp, #12
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ade0:	bf00      	nop
 800ade2:	370c      	adds	r7, #12
 800ade4:	46bd      	mov	sp, r7
 800ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adea:	4770      	bx	lr

0800adec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800adf8:	bf00      	nop
 800adfa:	370c      	adds	r7, #12
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b090      	sub	sp, #64	; 0x40
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae10:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d137      	bne.n	800ae90 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800ae20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae22:	2200      	movs	r2, #0
 800ae24:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3314      	adds	r3, #20
 800ae2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	623b      	str	r3, [r7, #32]
   return(result);
 800ae36:	6a3b      	ldr	r3, [r7, #32]
 800ae38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae3c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3314      	adds	r3, #20
 800ae44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae46:	633a      	str	r2, [r7, #48]	; 0x30
 800ae48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e5      	bne.n	800ae26 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	330c      	adds	r3, #12
 800ae60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	e853 3f00 	ldrex	r3, [r3]
 800ae68:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34
 800ae72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	330c      	adds	r3, #12
 800ae78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7a:	61fa      	str	r2, [r7, #28]
 800ae7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7e:	69b9      	ldr	r1, [r7, #24]
 800ae80:	69fa      	ldr	r2, [r7, #28]
 800ae82:	e841 2300 	strex	r3, r2, [r1]
 800ae86:	617b      	str	r3, [r7, #20]
   return(result);
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d1e5      	bne.n	800ae5a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae8e:	e002      	b.n	800ae96 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800ae90:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ae92:	f7f7 ffd3 	bl	8002e3c <HAL_UART_TxCpltCallback>
}
 800ae96:	bf00      	nop
 800ae98:	3740      	adds	r7, #64	; 0x40
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeaa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7ff ff7f 	bl	800adb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b09c      	sub	sp, #112	; 0x70
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec6:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d172      	bne.n	800afbc <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800aed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aed8:	2200      	movs	r2, #0
 800aeda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aedc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	330c      	adds	r3, #12
 800aee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee6:	e853 3f00 	ldrex	r3, [r3]
 800aeea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aeec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aef2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aef4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	330c      	adds	r3, #12
 800aefa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aefc:	65ba      	str	r2, [r7, #88]	; 0x58
 800aefe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800af02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af04:	e841 2300 	strex	r3, r2, [r1]
 800af08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800af0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1e5      	bne.n	800aedc <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	3314      	adds	r3, #20
 800af16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	e853 3f00 	ldrex	r3, [r3]
 800af1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af22:	f023 0301 	bic.w	r3, r3, #1
 800af26:	667b      	str	r3, [r7, #100]	; 0x64
 800af28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3314      	adds	r3, #20
 800af2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af30:	647a      	str	r2, [r7, #68]	; 0x44
 800af32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af38:	e841 2300 	strex	r3, r2, [r1]
 800af3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1e5      	bne.n	800af10 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3314      	adds	r3, #20
 800af4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4e:	e853 3f00 	ldrex	r3, [r3]
 800af52:	623b      	str	r3, [r7, #32]
   return(result);
 800af54:	6a3b      	ldr	r3, [r7, #32]
 800af56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af5a:	663b      	str	r3, [r7, #96]	; 0x60
 800af5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	3314      	adds	r3, #20
 800af62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800af64:	633a      	str	r2, [r7, #48]	; 0x30
 800af66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af6c:	e841 2300 	strex	r3, r2, [r1]
 800af70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e5      	bne.n	800af44 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800af78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af7a:	2220      	movs	r2, #32
 800af7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af84:	2b01      	cmp	r3, #1
 800af86:	d119      	bne.n	800afbc <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	330c      	adds	r3, #12
 800af8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	e853 3f00 	ldrex	r3, [r3]
 800af96:	60fb      	str	r3, [r7, #12]
   return(result);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f023 0310 	bic.w	r3, r3, #16
 800af9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	330c      	adds	r3, #12
 800afa6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afa8:	61fa      	str	r2, [r7, #28]
 800afaa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afac:	69b9      	ldr	r1, [r7, #24]
 800afae:	69fa      	ldr	r2, [r7, #28]
 800afb0:	e841 2300 	strex	r3, r2, [r1]
 800afb4:	617b      	str	r3, [r7, #20]
   return(result);
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d1e5      	bne.n	800af88 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d106      	bne.n	800afd2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800afc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800afc8:	4619      	mov	r1, r3
 800afca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800afcc:	f7ff ff0e 	bl	800adec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800afd0:	e002      	b.n	800afd8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800afd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800afd4:	f7f7 ff44 	bl	8002e60 <HAL_UART_RxCpltCallback>
}
 800afd8:	bf00      	nop
 800afda:	3770      	adds	r7, #112	; 0x70
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d108      	bne.n	800b008 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800affa:	085b      	lsrs	r3, r3, #1
 800affc:	b29b      	uxth	r3, r3
 800affe:	4619      	mov	r1, r3
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f7ff fef3 	bl	800adec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b006:	e002      	b.n	800b00e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7ff fedb 	bl	800adc4 <HAL_UART_RxHalfCpltCallback>
}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b01e:	2300      	movs	r3, #0
 800b020:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	695b      	ldr	r3, [r3, #20]
 800b02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b032:	2b80      	cmp	r3, #128	; 0x80
 800b034:	bf0c      	ite	eq
 800b036:	2301      	moveq	r3, #1
 800b038:	2300      	movne	r3, #0
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b044:	b2db      	uxtb	r3, r3
 800b046:	2b21      	cmp	r3, #33	; 0x21
 800b048:	d108      	bne.n	800b05c <UART_DMAError+0x46>
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d005      	beq.n	800b05c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2200      	movs	r2, #0
 800b054:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b056:	68b8      	ldr	r0, [r7, #8]
 800b058:	f000 f8c2 	bl	800b1e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b066:	2b40      	cmp	r3, #64	; 0x40
 800b068:	bf0c      	ite	eq
 800b06a:	2301      	moveq	r3, #1
 800b06c:	2300      	movne	r3, #0
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	2b22      	cmp	r3, #34	; 0x22
 800b07c:	d108      	bne.n	800b090 <UART_DMAError+0x7a>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d005      	beq.n	800b090 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2200      	movs	r2, #0
 800b088:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b08a:	68b8      	ldr	r0, [r7, #8]
 800b08c:	f000 f8d0 	bl	800b230 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b090:	68bb      	ldr	r3, [r7, #8]
 800b092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b094:	f043 0210 	orr.w	r2, r3, #16
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b09c:	68b8      	ldr	r0, [r7, #8]
 800b09e:	f7ff fe9b 	bl	800add8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b0a2:	bf00      	nop
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b098      	sub	sp, #96	; 0x60
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	4613      	mov	r3, r2
 800b0b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b0ba:	68ba      	ldr	r2, [r7, #8]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	88fa      	ldrh	r2, [r7, #6]
 800b0c4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2222      	movs	r2, #34	; 0x22
 800b0d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	4a3e      	ldr	r2, [pc, #248]	; (800b1d4 <UART_Start_Receive_DMA+0x128>)
 800b0da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e0:	4a3d      	ldr	r2, [pc, #244]	; (800b1d8 <UART_Start_Receive_DMA+0x12c>)
 800b0e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e8:	4a3c      	ldr	r2, [pc, #240]	; (800b1dc <UART_Start_Receive_DMA+0x130>)
 800b0ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b0f4:	f107 0308 	add.w	r3, r7, #8
 800b0f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	3304      	adds	r3, #4
 800b104:	4619      	mov	r1, r3
 800b106:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	88fb      	ldrh	r3, [r7, #6]
 800b10c:	f7fd f814 	bl	8008138 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b110:	2300      	movs	r3, #0
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	613b      	str	r3, [r7, #16]
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	613b      	str	r3, [r7, #16]
 800b124:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	330c      	adds	r3, #12
 800b134:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b138:	e853 3f00 	ldrex	r3, [r3]
 800b13c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b13e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b144:	65bb      	str	r3, [r7, #88]	; 0x58
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	330c      	adds	r3, #12
 800b14c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b14e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b150:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b152:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b154:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b156:	e841 2300 	strex	r3, r2, [r1]
 800b15a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b15c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d1e5      	bne.n	800b12e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3314      	adds	r3, #20
 800b168:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16c:	e853 3f00 	ldrex	r3, [r3]
 800b170:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	f043 0301 	orr.w	r3, r3, #1
 800b178:	657b      	str	r3, [r7, #84]	; 0x54
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	3314      	adds	r3, #20
 800b180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b182:	63ba      	str	r2, [r7, #56]	; 0x38
 800b184:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b186:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b18a:	e841 2300 	strex	r3, r2, [r1]
 800b18e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1e5      	bne.n	800b162 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	3314      	adds	r3, #20
 800b19c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	e853 3f00 	ldrex	r3, [r3]
 800b1a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1ac:	653b      	str	r3, [r7, #80]	; 0x50
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3314      	adds	r3, #20
 800b1b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1b6:	627a      	str	r2, [r7, #36]	; 0x24
 800b1b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ba:	6a39      	ldr	r1, [r7, #32]
 800b1bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1be:	e841 2300 	strex	r3, r2, [r1]
 800b1c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1c4:	69fb      	ldr	r3, [r7, #28]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d1e5      	bne.n	800b196 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3760      	adds	r7, #96	; 0x60
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}
 800b1d4:	0800aebb 	.word	0x0800aebb
 800b1d8:	0800afe1 	.word	0x0800afe1
 800b1dc:	0800b017 	.word	0x0800b017

0800b1e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b089      	sub	sp, #36	; 0x24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	330c      	adds	r3, #12
 800b1ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	e853 3f00 	ldrex	r3, [r3]
 800b1f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b1fe:	61fb      	str	r3, [r7, #28]
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	330c      	adds	r3, #12
 800b206:	69fa      	ldr	r2, [r7, #28]
 800b208:	61ba      	str	r2, [r7, #24]
 800b20a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b20c:	6979      	ldr	r1, [r7, #20]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	e841 2300 	strex	r3, r2, [r1]
 800b214:	613b      	str	r3, [r7, #16]
   return(result);
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d1e5      	bne.n	800b1e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2220      	movs	r2, #32
 800b220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b224:	bf00      	nop
 800b226:	3724      	adds	r7, #36	; 0x24
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr

0800b230 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b230:	b480      	push	{r7}
 800b232:	b095      	sub	sp, #84	; 0x54
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	330c      	adds	r3, #12
 800b23e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b242:	e853 3f00 	ldrex	r3, [r3]
 800b246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b24a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b24e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	330c      	adds	r3, #12
 800b256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b258:	643a      	str	r2, [r7, #64]	; 0x40
 800b25a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b25e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b260:	e841 2300 	strex	r3, r2, [r1]
 800b264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1e5      	bne.n	800b238 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3314      	adds	r3, #20
 800b272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b274:	6a3b      	ldr	r3, [r7, #32]
 800b276:	e853 3f00 	ldrex	r3, [r3]
 800b27a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f023 0301 	bic.w	r3, r3, #1
 800b282:	64bb      	str	r3, [r7, #72]	; 0x48
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3314      	adds	r3, #20
 800b28a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b28c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b28e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b294:	e841 2300 	strex	r3, r2, [r1]
 800b298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d1e5      	bne.n	800b26c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2a4:	2b01      	cmp	r3, #1
 800b2a6:	d119      	bne.n	800b2dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	330c      	adds	r3, #12
 800b2ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	e853 3f00 	ldrex	r3, [r3]
 800b2b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f023 0310 	bic.w	r3, r3, #16
 800b2be:	647b      	str	r3, [r7, #68]	; 0x44
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b2c8:	61ba      	str	r2, [r7, #24]
 800b2ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2cc:	6979      	ldr	r1, [r7, #20]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	e841 2300 	strex	r3, r2, [r1]
 800b2d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e5      	bne.n	800b2a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b2ea:	bf00      	nop
 800b2ec:	3754      	adds	r7, #84	; 0x54
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b084      	sub	sp, #16
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f7ff fd61 	bl	800add8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b316:	bf00      	nop
 800b318:	3710      	adds	r7, #16
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b31e:	b480      	push	{r7}
 800b320:	b085      	sub	sp, #20
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	2b21      	cmp	r3, #33	; 0x21
 800b330:	d13e      	bne.n	800b3b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b33a:	d114      	bne.n	800b366 <UART_Transmit_IT+0x48>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d110      	bne.n	800b366 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	881b      	ldrh	r3, [r3, #0]
 800b34e:	461a      	mov	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b358:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	1c9a      	adds	r2, r3, #2
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	621a      	str	r2, [r3, #32]
 800b364:	e008      	b.n	800b378 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a1b      	ldr	r3, [r3, #32]
 800b36a:	1c59      	adds	r1, r3, #1
 800b36c:	687a      	ldr	r2, [r7, #4]
 800b36e:	6211      	str	r1, [r2, #32]
 800b370:	781a      	ldrb	r2, [r3, #0]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	3b01      	subs	r3, #1
 800b380:	b29b      	uxth	r3, r3
 800b382:	687a      	ldr	r2, [r7, #4]
 800b384:	4619      	mov	r1, r3
 800b386:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10f      	bne.n	800b3ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	68da      	ldr	r2, [r3, #12]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b39a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	68da      	ldr	r2, [r3, #12]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e000      	b.n	800b3b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b3b0:	2302      	movs	r3, #2
  }
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	3714      	adds	r7, #20
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b082      	sub	sp, #8
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	68da      	ldr	r2, [r3, #12]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f7f7 fd2c 	bl	8002e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b08c      	sub	sp, #48	; 0x30
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3fc:	b2db      	uxtb	r3, r3
 800b3fe:	2b22      	cmp	r3, #34	; 0x22
 800b400:	f040 80ab 	bne.w	800b55a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	689b      	ldr	r3, [r3, #8]
 800b408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b40c:	d117      	bne.n	800b43e <UART_Receive_IT+0x50>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d113      	bne.n	800b43e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b416:	2300      	movs	r3, #0
 800b418:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b41e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	b29b      	uxth	r3, r3
 800b428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b430:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b436:	1c9a      	adds	r2, r3, #2
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	629a      	str	r2, [r3, #40]	; 0x28
 800b43c:	e026      	b.n	800b48c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b442:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b444:	2300      	movs	r3, #0
 800b446:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b450:	d007      	beq.n	800b462 <UART_Receive_IT+0x74>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	689b      	ldr	r3, [r3, #8]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d10a      	bne.n	800b470 <UART_Receive_IT+0x82>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d106      	bne.n	800b470 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46c:	701a      	strb	r2, [r3, #0]
 800b46e:	e008      	b.n	800b482 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	b2db      	uxtb	r3, r3
 800b478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b480:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b486:	1c5a      	adds	r2, r3, #1
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b490:	b29b      	uxth	r3, r3
 800b492:	3b01      	subs	r3, #1
 800b494:	b29b      	uxth	r3, r3
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	4619      	mov	r1, r3
 800b49a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d15a      	bne.n	800b556 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68da      	ldr	r2, [r3, #12]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	f022 0220 	bic.w	r2, r2, #32
 800b4ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68da      	ldr	r2, [r3, #12]
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b4be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	695a      	ldr	r2, [r3, #20]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f022 0201 	bic.w	r2, r2, #1
 800b4ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2220      	movs	r2, #32
 800b4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d135      	bne.n	800b54c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	330c      	adds	r3, #12
 800b4ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	e853 3f00 	ldrex	r3, [r3]
 800b4f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	f023 0310 	bic.w	r3, r3, #16
 800b4fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	330c      	adds	r3, #12
 800b504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b506:	623a      	str	r2, [r7, #32]
 800b508:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b50a:	69f9      	ldr	r1, [r7, #28]
 800b50c:	6a3a      	ldr	r2, [r7, #32]
 800b50e:	e841 2300 	strex	r3, r2, [r1]
 800b512:	61bb      	str	r3, [r7, #24]
   return(result);
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d1e5      	bne.n	800b4e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0310 	and.w	r3, r3, #16
 800b524:	2b10      	cmp	r3, #16
 800b526:	d10a      	bne.n	800b53e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	685b      	ldr	r3, [r3, #4]
 800b53a:	60fb      	str	r3, [r7, #12]
 800b53c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff fc51 	bl	800adec <HAL_UARTEx_RxEventCallback>
 800b54a:	e002      	b.n	800b552 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7f7 fc87 	bl	8002e60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	e002      	b.n	800b55c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	e000      	b.n	800b55c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b55a:	2302      	movs	r3, #2
  }
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3730      	adds	r7, #48	; 0x30
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b568:	b09f      	sub	sp, #124	; 0x7c
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b56e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b57a:	68d9      	ldr	r1, [r3, #12]
 800b57c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	ea40 0301 	orr.w	r3, r0, r1
 800b584:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b588:	689a      	ldr	r2, [r3, #8]
 800b58a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	431a      	orrs	r2, r3
 800b590:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b592:	695b      	ldr	r3, [r3, #20]
 800b594:	431a      	orrs	r2, r3
 800b596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b59e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	68db      	ldr	r3, [r3, #12]
 800b5a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b5a8:	f021 010c 	bic.w	r1, r1, #12
 800b5ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b5b2:	430b      	orrs	r3, r1
 800b5b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b5b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b5c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c2:	6999      	ldr	r1, [r3, #24]
 800b5c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	ea40 0301 	orr.w	r3, r0, r1
 800b5cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b5ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	4bc5      	ldr	r3, [pc, #788]	; (800b8e8 <UART_SetConfig+0x384>)
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d004      	beq.n	800b5e2 <UART_SetConfig+0x7e>
 800b5d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5da:	681a      	ldr	r2, [r3, #0]
 800b5dc:	4bc3      	ldr	r3, [pc, #780]	; (800b8ec <UART_SetConfig+0x388>)
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d103      	bne.n	800b5ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b5e2:	f7ff f847 	bl	800a674 <HAL_RCC_GetPCLK2Freq>
 800b5e6:	6778      	str	r0, [r7, #116]	; 0x74
 800b5e8:	e002      	b.n	800b5f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b5ea:	f7ff f82f 	bl	800a64c <HAL_RCC_GetPCLK1Freq>
 800b5ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f8:	f040 80b6 	bne.w	800b768 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b5fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b5fe:	461c      	mov	r4, r3
 800b600:	f04f 0500 	mov.w	r5, #0
 800b604:	4622      	mov	r2, r4
 800b606:	462b      	mov	r3, r5
 800b608:	1891      	adds	r1, r2, r2
 800b60a:	6439      	str	r1, [r7, #64]	; 0x40
 800b60c:	415b      	adcs	r3, r3
 800b60e:	647b      	str	r3, [r7, #68]	; 0x44
 800b610:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b614:	1912      	adds	r2, r2, r4
 800b616:	eb45 0303 	adc.w	r3, r5, r3
 800b61a:	f04f 0000 	mov.w	r0, #0
 800b61e:	f04f 0100 	mov.w	r1, #0
 800b622:	00d9      	lsls	r1, r3, #3
 800b624:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b628:	00d0      	lsls	r0, r2, #3
 800b62a:	4602      	mov	r2, r0
 800b62c:	460b      	mov	r3, r1
 800b62e:	1911      	adds	r1, r2, r4
 800b630:	6639      	str	r1, [r7, #96]	; 0x60
 800b632:	416b      	adcs	r3, r5
 800b634:	667b      	str	r3, [r7, #100]	; 0x64
 800b636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	461a      	mov	r2, r3
 800b63c:	f04f 0300 	mov.w	r3, #0
 800b640:	1891      	adds	r1, r2, r2
 800b642:	63b9      	str	r1, [r7, #56]	; 0x38
 800b644:	415b      	adcs	r3, r3
 800b646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b648:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b64c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b650:	f7f4 fdc8 	bl	80001e4 <__aeabi_uldivmod>
 800b654:	4602      	mov	r2, r0
 800b656:	460b      	mov	r3, r1
 800b658:	4ba5      	ldr	r3, [pc, #660]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b65a:	fba3 2302 	umull	r2, r3, r3, r2
 800b65e:	095b      	lsrs	r3, r3, #5
 800b660:	011e      	lsls	r6, r3, #4
 800b662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b664:	461c      	mov	r4, r3
 800b666:	f04f 0500 	mov.w	r5, #0
 800b66a:	4622      	mov	r2, r4
 800b66c:	462b      	mov	r3, r5
 800b66e:	1891      	adds	r1, r2, r2
 800b670:	6339      	str	r1, [r7, #48]	; 0x30
 800b672:	415b      	adcs	r3, r3
 800b674:	637b      	str	r3, [r7, #52]	; 0x34
 800b676:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b67a:	1912      	adds	r2, r2, r4
 800b67c:	eb45 0303 	adc.w	r3, r5, r3
 800b680:	f04f 0000 	mov.w	r0, #0
 800b684:	f04f 0100 	mov.w	r1, #0
 800b688:	00d9      	lsls	r1, r3, #3
 800b68a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b68e:	00d0      	lsls	r0, r2, #3
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	1911      	adds	r1, r2, r4
 800b696:	65b9      	str	r1, [r7, #88]	; 0x58
 800b698:	416b      	adcs	r3, r5
 800b69a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b69c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	f04f 0300 	mov.w	r3, #0
 800b6a6:	1891      	adds	r1, r2, r2
 800b6a8:	62b9      	str	r1, [r7, #40]	; 0x28
 800b6aa:	415b      	adcs	r3, r3
 800b6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b6ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b6b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b6b6:	f7f4 fd95 	bl	80001e4 <__aeabi_uldivmod>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4b8c      	ldr	r3, [pc, #560]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b6c0:	fba3 1302 	umull	r1, r3, r3, r2
 800b6c4:	095b      	lsrs	r3, r3, #5
 800b6c6:	2164      	movs	r1, #100	; 0x64
 800b6c8:	fb01 f303 	mul.w	r3, r1, r3
 800b6cc:	1ad3      	subs	r3, r2, r3
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	3332      	adds	r3, #50	; 0x32
 800b6d2:	4a87      	ldr	r2, [pc, #540]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b6d4:	fba2 2303 	umull	r2, r3, r2, r3
 800b6d8:	095b      	lsrs	r3, r3, #5
 800b6da:	005b      	lsls	r3, r3, #1
 800b6dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b6e0:	441e      	add	r6, r3
 800b6e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f04f 0100 	mov.w	r1, #0
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	1894      	adds	r4, r2, r2
 800b6f0:	623c      	str	r4, [r7, #32]
 800b6f2:	415b      	adcs	r3, r3
 800b6f4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b6fa:	1812      	adds	r2, r2, r0
 800b6fc:	eb41 0303 	adc.w	r3, r1, r3
 800b700:	f04f 0400 	mov.w	r4, #0
 800b704:	f04f 0500 	mov.w	r5, #0
 800b708:	00dd      	lsls	r5, r3, #3
 800b70a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b70e:	00d4      	lsls	r4, r2, #3
 800b710:	4622      	mov	r2, r4
 800b712:	462b      	mov	r3, r5
 800b714:	1814      	adds	r4, r2, r0
 800b716:	653c      	str	r4, [r7, #80]	; 0x50
 800b718:	414b      	adcs	r3, r1
 800b71a:	657b      	str	r3, [r7, #84]	; 0x54
 800b71c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	461a      	mov	r2, r3
 800b722:	f04f 0300 	mov.w	r3, #0
 800b726:	1891      	adds	r1, r2, r2
 800b728:	61b9      	str	r1, [r7, #24]
 800b72a:	415b      	adcs	r3, r3
 800b72c:	61fb      	str	r3, [r7, #28]
 800b72e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b732:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b736:	f7f4 fd55 	bl	80001e4 <__aeabi_uldivmod>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	4b6c      	ldr	r3, [pc, #432]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b740:	fba3 1302 	umull	r1, r3, r3, r2
 800b744:	095b      	lsrs	r3, r3, #5
 800b746:	2164      	movs	r1, #100	; 0x64
 800b748:	fb01 f303 	mul.w	r3, r1, r3
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	00db      	lsls	r3, r3, #3
 800b750:	3332      	adds	r3, #50	; 0x32
 800b752:	4a67      	ldr	r2, [pc, #412]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b754:	fba2 2303 	umull	r2, r3, r2, r3
 800b758:	095b      	lsrs	r3, r3, #5
 800b75a:	f003 0207 	and.w	r2, r3, #7
 800b75e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	4432      	add	r2, r6
 800b764:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b766:	e0b9      	b.n	800b8dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b768:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b76a:	461c      	mov	r4, r3
 800b76c:	f04f 0500 	mov.w	r5, #0
 800b770:	4622      	mov	r2, r4
 800b772:	462b      	mov	r3, r5
 800b774:	1891      	adds	r1, r2, r2
 800b776:	6139      	str	r1, [r7, #16]
 800b778:	415b      	adcs	r3, r3
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b780:	1912      	adds	r2, r2, r4
 800b782:	eb45 0303 	adc.w	r3, r5, r3
 800b786:	f04f 0000 	mov.w	r0, #0
 800b78a:	f04f 0100 	mov.w	r1, #0
 800b78e:	00d9      	lsls	r1, r3, #3
 800b790:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b794:	00d0      	lsls	r0, r2, #3
 800b796:	4602      	mov	r2, r0
 800b798:	460b      	mov	r3, r1
 800b79a:	eb12 0804 	adds.w	r8, r2, r4
 800b79e:	eb43 0905 	adc.w	r9, r3, r5
 800b7a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f04f 0100 	mov.w	r1, #0
 800b7ac:	f04f 0200 	mov.w	r2, #0
 800b7b0:	f04f 0300 	mov.w	r3, #0
 800b7b4:	008b      	lsls	r3, r1, #2
 800b7b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b7ba:	0082      	lsls	r2, r0, #2
 800b7bc:	4640      	mov	r0, r8
 800b7be:	4649      	mov	r1, r9
 800b7c0:	f7f4 fd10 	bl	80001e4 <__aeabi_uldivmod>
 800b7c4:	4602      	mov	r2, r0
 800b7c6:	460b      	mov	r3, r1
 800b7c8:	4b49      	ldr	r3, [pc, #292]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b7ca:	fba3 2302 	umull	r2, r3, r3, r2
 800b7ce:	095b      	lsrs	r3, r3, #5
 800b7d0:	011e      	lsls	r6, r3, #4
 800b7d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f04f 0100 	mov.w	r1, #0
 800b7da:	4602      	mov	r2, r0
 800b7dc:	460b      	mov	r3, r1
 800b7de:	1894      	adds	r4, r2, r2
 800b7e0:	60bc      	str	r4, [r7, #8]
 800b7e2:	415b      	adcs	r3, r3
 800b7e4:	60fb      	str	r3, [r7, #12]
 800b7e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b7ea:	1812      	adds	r2, r2, r0
 800b7ec:	eb41 0303 	adc.w	r3, r1, r3
 800b7f0:	f04f 0400 	mov.w	r4, #0
 800b7f4:	f04f 0500 	mov.w	r5, #0
 800b7f8:	00dd      	lsls	r5, r3, #3
 800b7fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b7fe:	00d4      	lsls	r4, r2, #3
 800b800:	4622      	mov	r2, r4
 800b802:	462b      	mov	r3, r5
 800b804:	1814      	adds	r4, r2, r0
 800b806:	64bc      	str	r4, [r7, #72]	; 0x48
 800b808:	414b      	adcs	r3, r1
 800b80a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b80c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	4618      	mov	r0, r3
 800b812:	f04f 0100 	mov.w	r1, #0
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	008b      	lsls	r3, r1, #2
 800b820:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b824:	0082      	lsls	r2, r0, #2
 800b826:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b82a:	f7f4 fcdb 	bl	80001e4 <__aeabi_uldivmod>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4b2f      	ldr	r3, [pc, #188]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b834:	fba3 1302 	umull	r1, r3, r3, r2
 800b838:	095b      	lsrs	r3, r3, #5
 800b83a:	2164      	movs	r1, #100	; 0x64
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	011b      	lsls	r3, r3, #4
 800b844:	3332      	adds	r3, #50	; 0x32
 800b846:	4a2a      	ldr	r2, [pc, #168]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b848:	fba2 2303 	umull	r2, r3, r2, r3
 800b84c:	095b      	lsrs	r3, r3, #5
 800b84e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b852:	441e      	add	r6, r3
 800b854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b856:	4618      	mov	r0, r3
 800b858:	f04f 0100 	mov.w	r1, #0
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	1894      	adds	r4, r2, r2
 800b862:	603c      	str	r4, [r7, #0]
 800b864:	415b      	adcs	r3, r3
 800b866:	607b      	str	r3, [r7, #4]
 800b868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b86c:	1812      	adds	r2, r2, r0
 800b86e:	eb41 0303 	adc.w	r3, r1, r3
 800b872:	f04f 0400 	mov.w	r4, #0
 800b876:	f04f 0500 	mov.w	r5, #0
 800b87a:	00dd      	lsls	r5, r3, #3
 800b87c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b880:	00d4      	lsls	r4, r2, #3
 800b882:	4622      	mov	r2, r4
 800b884:	462b      	mov	r3, r5
 800b886:	eb12 0a00 	adds.w	sl, r2, r0
 800b88a:	eb43 0b01 	adc.w	fp, r3, r1
 800b88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	4618      	mov	r0, r3
 800b894:	f04f 0100 	mov.w	r1, #0
 800b898:	f04f 0200 	mov.w	r2, #0
 800b89c:	f04f 0300 	mov.w	r3, #0
 800b8a0:	008b      	lsls	r3, r1, #2
 800b8a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b8a6:	0082      	lsls	r2, r0, #2
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	f7f4 fc9a 	bl	80001e4 <__aeabi_uldivmod>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4b0e      	ldr	r3, [pc, #56]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b8b6:	fba3 1302 	umull	r1, r3, r3, r2
 800b8ba:	095b      	lsrs	r3, r3, #5
 800b8bc:	2164      	movs	r1, #100	; 0x64
 800b8be:	fb01 f303 	mul.w	r3, r1, r3
 800b8c2:	1ad3      	subs	r3, r2, r3
 800b8c4:	011b      	lsls	r3, r3, #4
 800b8c6:	3332      	adds	r3, #50	; 0x32
 800b8c8:	4a09      	ldr	r2, [pc, #36]	; (800b8f0 <UART_SetConfig+0x38c>)
 800b8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b8ce:	095b      	lsrs	r3, r3, #5
 800b8d0:	f003 020f 	and.w	r2, r3, #15
 800b8d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4432      	add	r2, r6
 800b8da:	609a      	str	r2, [r3, #8]
}
 800b8dc:	bf00      	nop
 800b8de:	377c      	adds	r7, #124	; 0x7c
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e6:	bf00      	nop
 800b8e8:	40011000 	.word	0x40011000
 800b8ec:	40011400 	.word	0x40011400
 800b8f0:	51eb851f 	.word	0x51eb851f

0800b8f4 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b085      	sub	sp, #20
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	0a5a      	lsrs	r2, r3, #9
 800b904:	490f      	ldr	r1, [pc, #60]	; (800b944 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800b906:	fba1 1202 	umull	r1, r2, r1, r2
 800b90a:	09d2      	lsrs	r2, r2, #7
 800b90c:	490e      	ldr	r1, [pc, #56]	; (800b948 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800b90e:	fb01 f202 	mul.w	r2, r1, r2
 800b912:	1a9b      	subs	r3, r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	0a5b      	lsrs	r3, r3, #9
 800b91c:	4a09      	ldr	r2, [pc, #36]	; (800b944 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800b91e:	fba2 2303 	umull	r2, r3, r2, r3
 800b922:	09db      	lsrs	r3, r3, #7
 800b924:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681a      	ldr	r2, [r3, #0]
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	441a      	add	r2, r3
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	601a      	str	r2, [r3, #0]
}
 800b938:	bf00      	nop
 800b93a:	3714      	adds	r7, #20
 800b93c:	46bd      	mov	sp, r7
 800b93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b942:	4770      	bx	lr
 800b944:	00044b83 	.word	0x00044b83
 800b948:	3b9aca00 	.word	0x3b9aca00

0800b94c <__cxa_pure_virtual>:
 800b94c:	b508      	push	{r3, lr}
 800b94e:	f000 f80d 	bl	800b96c <_ZSt9terminatev>

0800b952 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b952:	b508      	push	{r3, lr}
 800b954:	4780      	blx	r0
 800b956:	f000 f80e 	bl	800b976 <abort>
	...

0800b95c <_ZSt13get_terminatev>:
 800b95c:	4b02      	ldr	r3, [pc, #8]	; (800b968 <_ZSt13get_terminatev+0xc>)
 800b95e:	6818      	ldr	r0, [r3, #0]
 800b960:	f3bf 8f5b 	dmb	ish
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	20000048 	.word	0x20000048

0800b96c <_ZSt9terminatev>:
 800b96c:	b508      	push	{r3, lr}
 800b96e:	f7ff fff5 	bl	800b95c <_ZSt13get_terminatev>
 800b972:	f7ff ffee 	bl	800b952 <_ZN10__cxxabiv111__terminateEPFvvE>

0800b976 <abort>:
 800b976:	b508      	push	{r3, lr}
 800b978:	2006      	movs	r0, #6
 800b97a:	f000 f873 	bl	800ba64 <raise>
 800b97e:	2001      	movs	r0, #1
 800b980:	f7f8 fd88 	bl	8004494 <_exit>

0800b984 <__errno>:
 800b984:	4b01      	ldr	r3, [pc, #4]	; (800b98c <__errno+0x8>)
 800b986:	6818      	ldr	r0, [r3, #0]
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	2000004c 	.word	0x2000004c

0800b990 <__libc_init_array>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	4d0d      	ldr	r5, [pc, #52]	; (800b9c8 <__libc_init_array+0x38>)
 800b994:	4c0d      	ldr	r4, [pc, #52]	; (800b9cc <__libc_init_array+0x3c>)
 800b996:	1b64      	subs	r4, r4, r5
 800b998:	10a4      	asrs	r4, r4, #2
 800b99a:	2600      	movs	r6, #0
 800b99c:	42a6      	cmp	r6, r4
 800b99e:	d109      	bne.n	800b9b4 <__libc_init_array+0x24>
 800b9a0:	4d0b      	ldr	r5, [pc, #44]	; (800b9d0 <__libc_init_array+0x40>)
 800b9a2:	4c0c      	ldr	r4, [pc, #48]	; (800b9d4 <__libc_init_array+0x44>)
 800b9a4:	f000 f970 	bl	800bc88 <_init>
 800b9a8:	1b64      	subs	r4, r4, r5
 800b9aa:	10a4      	asrs	r4, r4, #2
 800b9ac:	2600      	movs	r6, #0
 800b9ae:	42a6      	cmp	r6, r4
 800b9b0:	d105      	bne.n	800b9be <__libc_init_array+0x2e>
 800b9b2:	bd70      	pop	{r4, r5, r6, pc}
 800b9b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b8:	4798      	blx	r3
 800b9ba:	3601      	adds	r6, #1
 800b9bc:	e7ee      	b.n	800b99c <__libc_init_array+0xc>
 800b9be:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9c2:	4798      	blx	r3
 800b9c4:	3601      	adds	r6, #1
 800b9c6:	e7f2      	b.n	800b9ae <__libc_init_array+0x1e>
 800b9c8:	08021aa4 	.word	0x08021aa4
 800b9cc:	08021aa4 	.word	0x08021aa4
 800b9d0:	08021aa4 	.word	0x08021aa4
 800b9d4:	08021aac 	.word	0x08021aac

0800b9d8 <memcpy>:
 800b9d8:	440a      	add	r2, r1
 800b9da:	4291      	cmp	r1, r2
 800b9dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b9e0:	d100      	bne.n	800b9e4 <memcpy+0xc>
 800b9e2:	4770      	bx	lr
 800b9e4:	b510      	push	{r4, lr}
 800b9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9ee:	4291      	cmp	r1, r2
 800b9f0:	d1f9      	bne.n	800b9e6 <memcpy+0xe>
 800b9f2:	bd10      	pop	{r4, pc}

0800b9f4 <memset>:
 800b9f4:	4402      	add	r2, r0
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d100      	bne.n	800b9fe <memset+0xa>
 800b9fc:	4770      	bx	lr
 800b9fe:	f803 1b01 	strb.w	r1, [r3], #1
 800ba02:	e7f9      	b.n	800b9f8 <memset+0x4>

0800ba04 <realloc>:
 800ba04:	4b02      	ldr	r3, [pc, #8]	; (800ba10 <realloc+0xc>)
 800ba06:	460a      	mov	r2, r1
 800ba08:	4601      	mov	r1, r0
 800ba0a:	6818      	ldr	r0, [r3, #0]
 800ba0c:	f000 b8a0 	b.w	800bb50 <_realloc_r>
 800ba10:	2000004c 	.word	0x2000004c

0800ba14 <_raise_r>:
 800ba14:	291f      	cmp	r1, #31
 800ba16:	b538      	push	{r3, r4, r5, lr}
 800ba18:	4604      	mov	r4, r0
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	d904      	bls.n	800ba28 <_raise_r+0x14>
 800ba1e:	2316      	movs	r3, #22
 800ba20:	6003      	str	r3, [r0, #0]
 800ba22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba26:	bd38      	pop	{r3, r4, r5, pc}
 800ba28:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba2a:	b112      	cbz	r2, 800ba32 <_raise_r+0x1e>
 800ba2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba30:	b94b      	cbnz	r3, 800ba46 <_raise_r+0x32>
 800ba32:	4620      	mov	r0, r4
 800ba34:	f000 f830 	bl	800ba98 <_getpid_r>
 800ba38:	462a      	mov	r2, r5
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba42:	f000 b817 	b.w	800ba74 <_kill_r>
 800ba46:	2b01      	cmp	r3, #1
 800ba48:	d00a      	beq.n	800ba60 <_raise_r+0x4c>
 800ba4a:	1c59      	adds	r1, r3, #1
 800ba4c:	d103      	bne.n	800ba56 <_raise_r+0x42>
 800ba4e:	2316      	movs	r3, #22
 800ba50:	6003      	str	r3, [r0, #0]
 800ba52:	2001      	movs	r0, #1
 800ba54:	e7e7      	b.n	800ba26 <_raise_r+0x12>
 800ba56:	2400      	movs	r4, #0
 800ba58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba5c:	4628      	mov	r0, r5
 800ba5e:	4798      	blx	r3
 800ba60:	2000      	movs	r0, #0
 800ba62:	e7e0      	b.n	800ba26 <_raise_r+0x12>

0800ba64 <raise>:
 800ba64:	4b02      	ldr	r3, [pc, #8]	; (800ba70 <raise+0xc>)
 800ba66:	4601      	mov	r1, r0
 800ba68:	6818      	ldr	r0, [r3, #0]
 800ba6a:	f7ff bfd3 	b.w	800ba14 <_raise_r>
 800ba6e:	bf00      	nop
 800ba70:	2000004c 	.word	0x2000004c

0800ba74 <_kill_r>:
 800ba74:	b538      	push	{r3, r4, r5, lr}
 800ba76:	4d07      	ldr	r5, [pc, #28]	; (800ba94 <_kill_r+0x20>)
 800ba78:	2300      	movs	r3, #0
 800ba7a:	4604      	mov	r4, r0
 800ba7c:	4608      	mov	r0, r1
 800ba7e:	4611      	mov	r1, r2
 800ba80:	602b      	str	r3, [r5, #0]
 800ba82:	f7f8 fcf7 	bl	8004474 <_kill>
 800ba86:	1c43      	adds	r3, r0, #1
 800ba88:	d102      	bne.n	800ba90 <_kill_r+0x1c>
 800ba8a:	682b      	ldr	r3, [r5, #0]
 800ba8c:	b103      	cbz	r3, 800ba90 <_kill_r+0x1c>
 800ba8e:	6023      	str	r3, [r4, #0]
 800ba90:	bd38      	pop	{r3, r4, r5, pc}
 800ba92:	bf00      	nop
 800ba94:	200054dc 	.word	0x200054dc

0800ba98 <_getpid_r>:
 800ba98:	f7f8 bce4 	b.w	8004464 <_getpid>

0800ba9c <_malloc_r>:
 800ba9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba9e:	1ccd      	adds	r5, r1, #3
 800baa0:	f025 0503 	bic.w	r5, r5, #3
 800baa4:	3508      	adds	r5, #8
 800baa6:	2d0c      	cmp	r5, #12
 800baa8:	bf38      	it	cc
 800baaa:	250c      	movcc	r5, #12
 800baac:	2d00      	cmp	r5, #0
 800baae:	4606      	mov	r6, r0
 800bab0:	db01      	blt.n	800bab6 <_malloc_r+0x1a>
 800bab2:	42a9      	cmp	r1, r5
 800bab4:	d903      	bls.n	800babe <_malloc_r+0x22>
 800bab6:	230c      	movs	r3, #12
 800bab8:	6033      	str	r3, [r6, #0]
 800baba:	2000      	movs	r0, #0
 800babc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800babe:	f000 f87d 	bl	800bbbc <__malloc_lock>
 800bac2:	4921      	ldr	r1, [pc, #132]	; (800bb48 <_malloc_r+0xac>)
 800bac4:	680a      	ldr	r2, [r1, #0]
 800bac6:	4614      	mov	r4, r2
 800bac8:	b99c      	cbnz	r4, 800baf2 <_malloc_r+0x56>
 800baca:	4f20      	ldr	r7, [pc, #128]	; (800bb4c <_malloc_r+0xb0>)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	b923      	cbnz	r3, 800bada <_malloc_r+0x3e>
 800bad0:	4621      	mov	r1, r4
 800bad2:	4630      	mov	r0, r6
 800bad4:	f000 f862 	bl	800bb9c <_sbrk_r>
 800bad8:	6038      	str	r0, [r7, #0]
 800bada:	4629      	mov	r1, r5
 800badc:	4630      	mov	r0, r6
 800bade:	f000 f85d 	bl	800bb9c <_sbrk_r>
 800bae2:	1c43      	adds	r3, r0, #1
 800bae4:	d123      	bne.n	800bb2e <_malloc_r+0x92>
 800bae6:	230c      	movs	r3, #12
 800bae8:	6033      	str	r3, [r6, #0]
 800baea:	4630      	mov	r0, r6
 800baec:	f000 f86c 	bl	800bbc8 <__malloc_unlock>
 800baf0:	e7e3      	b.n	800baba <_malloc_r+0x1e>
 800baf2:	6823      	ldr	r3, [r4, #0]
 800baf4:	1b5b      	subs	r3, r3, r5
 800baf6:	d417      	bmi.n	800bb28 <_malloc_r+0x8c>
 800baf8:	2b0b      	cmp	r3, #11
 800bafa:	d903      	bls.n	800bb04 <_malloc_r+0x68>
 800bafc:	6023      	str	r3, [r4, #0]
 800bafe:	441c      	add	r4, r3
 800bb00:	6025      	str	r5, [r4, #0]
 800bb02:	e004      	b.n	800bb0e <_malloc_r+0x72>
 800bb04:	6863      	ldr	r3, [r4, #4]
 800bb06:	42a2      	cmp	r2, r4
 800bb08:	bf0c      	ite	eq
 800bb0a:	600b      	streq	r3, [r1, #0]
 800bb0c:	6053      	strne	r3, [r2, #4]
 800bb0e:	4630      	mov	r0, r6
 800bb10:	f000 f85a 	bl	800bbc8 <__malloc_unlock>
 800bb14:	f104 000b 	add.w	r0, r4, #11
 800bb18:	1d23      	adds	r3, r4, #4
 800bb1a:	f020 0007 	bic.w	r0, r0, #7
 800bb1e:	1ac2      	subs	r2, r0, r3
 800bb20:	d0cc      	beq.n	800babc <_malloc_r+0x20>
 800bb22:	1a1b      	subs	r3, r3, r0
 800bb24:	50a3      	str	r3, [r4, r2]
 800bb26:	e7c9      	b.n	800babc <_malloc_r+0x20>
 800bb28:	4622      	mov	r2, r4
 800bb2a:	6864      	ldr	r4, [r4, #4]
 800bb2c:	e7cc      	b.n	800bac8 <_malloc_r+0x2c>
 800bb2e:	1cc4      	adds	r4, r0, #3
 800bb30:	f024 0403 	bic.w	r4, r4, #3
 800bb34:	42a0      	cmp	r0, r4
 800bb36:	d0e3      	beq.n	800bb00 <_malloc_r+0x64>
 800bb38:	1a21      	subs	r1, r4, r0
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f000 f82e 	bl	800bb9c <_sbrk_r>
 800bb40:	3001      	adds	r0, #1
 800bb42:	d1dd      	bne.n	800bb00 <_malloc_r+0x64>
 800bb44:	e7cf      	b.n	800bae6 <_malloc_r+0x4a>
 800bb46:	bf00      	nop
 800bb48:	2000534c 	.word	0x2000534c
 800bb4c:	20005350 	.word	0x20005350

0800bb50 <_realloc_r>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	4607      	mov	r7, r0
 800bb54:	4614      	mov	r4, r2
 800bb56:	460e      	mov	r6, r1
 800bb58:	b921      	cbnz	r1, 800bb64 <_realloc_r+0x14>
 800bb5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb5e:	4611      	mov	r1, r2
 800bb60:	f7ff bf9c 	b.w	800ba9c <_malloc_r>
 800bb64:	b922      	cbnz	r2, 800bb70 <_realloc_r+0x20>
 800bb66:	f000 f835 	bl	800bbd4 <_free_r>
 800bb6a:	4625      	mov	r5, r4
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb70:	f000 f880 	bl	800bc74 <_malloc_usable_size_r>
 800bb74:	42a0      	cmp	r0, r4
 800bb76:	d20f      	bcs.n	800bb98 <_realloc_r+0x48>
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f7ff ff8e 	bl	800ba9c <_malloc_r>
 800bb80:	4605      	mov	r5, r0
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d0f2      	beq.n	800bb6c <_realloc_r+0x1c>
 800bb86:	4631      	mov	r1, r6
 800bb88:	4622      	mov	r2, r4
 800bb8a:	f7ff ff25 	bl	800b9d8 <memcpy>
 800bb8e:	4631      	mov	r1, r6
 800bb90:	4638      	mov	r0, r7
 800bb92:	f000 f81f 	bl	800bbd4 <_free_r>
 800bb96:	e7e9      	b.n	800bb6c <_realloc_r+0x1c>
 800bb98:	4635      	mov	r5, r6
 800bb9a:	e7e7      	b.n	800bb6c <_realloc_r+0x1c>

0800bb9c <_sbrk_r>:
 800bb9c:	b538      	push	{r3, r4, r5, lr}
 800bb9e:	4d06      	ldr	r5, [pc, #24]	; (800bbb8 <_sbrk_r+0x1c>)
 800bba0:	2300      	movs	r3, #0
 800bba2:	4604      	mov	r4, r0
 800bba4:	4608      	mov	r0, r1
 800bba6:	602b      	str	r3, [r5, #0]
 800bba8:	f7f8 fc7e 	bl	80044a8 <_sbrk>
 800bbac:	1c43      	adds	r3, r0, #1
 800bbae:	d102      	bne.n	800bbb6 <_sbrk_r+0x1a>
 800bbb0:	682b      	ldr	r3, [r5, #0]
 800bbb2:	b103      	cbz	r3, 800bbb6 <_sbrk_r+0x1a>
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	bd38      	pop	{r3, r4, r5, pc}
 800bbb8:	200054dc 	.word	0x200054dc

0800bbbc <__malloc_lock>:
 800bbbc:	4801      	ldr	r0, [pc, #4]	; (800bbc4 <__malloc_lock+0x8>)
 800bbbe:	f000 b861 	b.w	800bc84 <__retarget_lock_acquire_recursive>
 800bbc2:	bf00      	nop
 800bbc4:	200054e4 	.word	0x200054e4

0800bbc8 <__malloc_unlock>:
 800bbc8:	4801      	ldr	r0, [pc, #4]	; (800bbd0 <__malloc_unlock+0x8>)
 800bbca:	f000 b85c 	b.w	800bc86 <__retarget_lock_release_recursive>
 800bbce:	bf00      	nop
 800bbd0:	200054e4 	.word	0x200054e4

0800bbd4 <_free_r>:
 800bbd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbd6:	2900      	cmp	r1, #0
 800bbd8:	d048      	beq.n	800bc6c <_free_r+0x98>
 800bbda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbde:	9001      	str	r0, [sp, #4]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	f1a1 0404 	sub.w	r4, r1, #4
 800bbe6:	bfb8      	it	lt
 800bbe8:	18e4      	addlt	r4, r4, r3
 800bbea:	f7ff ffe7 	bl	800bbbc <__malloc_lock>
 800bbee:	4a20      	ldr	r2, [pc, #128]	; (800bc70 <_free_r+0x9c>)
 800bbf0:	9801      	ldr	r0, [sp, #4]
 800bbf2:	6813      	ldr	r3, [r2, #0]
 800bbf4:	4615      	mov	r5, r2
 800bbf6:	b933      	cbnz	r3, 800bc06 <_free_r+0x32>
 800bbf8:	6063      	str	r3, [r4, #4]
 800bbfa:	6014      	str	r4, [r2, #0]
 800bbfc:	b003      	add	sp, #12
 800bbfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc02:	f7ff bfe1 	b.w	800bbc8 <__malloc_unlock>
 800bc06:	42a3      	cmp	r3, r4
 800bc08:	d90b      	bls.n	800bc22 <_free_r+0x4e>
 800bc0a:	6821      	ldr	r1, [r4, #0]
 800bc0c:	1862      	adds	r2, r4, r1
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	bf04      	itt	eq
 800bc12:	681a      	ldreq	r2, [r3, #0]
 800bc14:	685b      	ldreq	r3, [r3, #4]
 800bc16:	6063      	str	r3, [r4, #4]
 800bc18:	bf04      	itt	eq
 800bc1a:	1852      	addeq	r2, r2, r1
 800bc1c:	6022      	streq	r2, [r4, #0]
 800bc1e:	602c      	str	r4, [r5, #0]
 800bc20:	e7ec      	b.n	800bbfc <_free_r+0x28>
 800bc22:	461a      	mov	r2, r3
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	b10b      	cbz	r3, 800bc2c <_free_r+0x58>
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	d9fa      	bls.n	800bc22 <_free_r+0x4e>
 800bc2c:	6811      	ldr	r1, [r2, #0]
 800bc2e:	1855      	adds	r5, r2, r1
 800bc30:	42a5      	cmp	r5, r4
 800bc32:	d10b      	bne.n	800bc4c <_free_r+0x78>
 800bc34:	6824      	ldr	r4, [r4, #0]
 800bc36:	4421      	add	r1, r4
 800bc38:	1854      	adds	r4, r2, r1
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	6011      	str	r1, [r2, #0]
 800bc3e:	d1dd      	bne.n	800bbfc <_free_r+0x28>
 800bc40:	681c      	ldr	r4, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	6053      	str	r3, [r2, #4]
 800bc46:	4421      	add	r1, r4
 800bc48:	6011      	str	r1, [r2, #0]
 800bc4a:	e7d7      	b.n	800bbfc <_free_r+0x28>
 800bc4c:	d902      	bls.n	800bc54 <_free_r+0x80>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	6003      	str	r3, [r0, #0]
 800bc52:	e7d3      	b.n	800bbfc <_free_r+0x28>
 800bc54:	6825      	ldr	r5, [r4, #0]
 800bc56:	1961      	adds	r1, r4, r5
 800bc58:	428b      	cmp	r3, r1
 800bc5a:	bf04      	itt	eq
 800bc5c:	6819      	ldreq	r1, [r3, #0]
 800bc5e:	685b      	ldreq	r3, [r3, #4]
 800bc60:	6063      	str	r3, [r4, #4]
 800bc62:	bf04      	itt	eq
 800bc64:	1949      	addeq	r1, r1, r5
 800bc66:	6021      	streq	r1, [r4, #0]
 800bc68:	6054      	str	r4, [r2, #4]
 800bc6a:	e7c7      	b.n	800bbfc <_free_r+0x28>
 800bc6c:	b003      	add	sp, #12
 800bc6e:	bd30      	pop	{r4, r5, pc}
 800bc70:	2000534c 	.word	0x2000534c

0800bc74 <_malloc_usable_size_r>:
 800bc74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc78:	1f18      	subs	r0, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	bfbc      	itt	lt
 800bc7e:	580b      	ldrlt	r3, [r1, r0]
 800bc80:	18c0      	addlt	r0, r0, r3
 800bc82:	4770      	bx	lr

0800bc84 <__retarget_lock_acquire_recursive>:
 800bc84:	4770      	bx	lr

0800bc86 <__retarget_lock_release_recursive>:
 800bc86:	4770      	bx	lr

0800bc88 <_init>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr

0800bc94 <_fini>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr
